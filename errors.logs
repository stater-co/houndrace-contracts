{
  stackTrace: [
    {
      type: 0,
      sourceReference: {
        function: 'uploadRace',
        contract: 'Races',
        sourceName: 'contracts/races/Index.sol',
        sourceContent: '// SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Races is Params {\n' +
          '    \n' +
          '    constructor(RacesConstructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function uploadRace(Race.Struct memory race) external payable {\n' +
          '        (bool success, ) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function raceStart(Queue.Struct memory queue) external {\n' +
          '        (bool success, ) = control.methods.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 11,
        range: [ 286, 327 ]
      },
      functionType: 1
    },
    {
      type: 0,
      sourceReference: {
        function: 'uploadRace',
        contract: 'RacesRestricted',
        sourceName: 'contracts/races/restricted/Index.sol',
        sourceContent: '// SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import '../params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract RacesRestricted is Params {\n' +
          '\n' +
          '    constructor(RacesConstructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function uploadRace(Race.Struct memory race) external payable onlyOwner {\n' +
          '\n' +
          '        IQueues(control.queues).onBeforeRace{ value: msg.value }(race.queueId);\n' +
          '\n' +
          '        races[id] = race;\n' +
          '\n' +
          '        emit UploadRace(id, race);\n' +
          '\n' +
          '        ++id;\n' +
          '    }\n' +
          '\n' +
          '}\n',
        line: 12,
        range: [ 285, 355 ]
      },
      functionType: 1
    },
    {
      type: 4,
      sourceReference: {
        function: 'onBeforeRace',
        contract: 'Queues',
        sourceName: 'contracts/queues/Index.sol',
        sourceContent: '// SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Queues is Params {\n' +
          '    \n' +
          '    constructor(QueuesConstructor.Struct memory input, address[] memory allowedCallers) Params(input, allowedCallers) {}\n' +
          '\n' +
          '    function createQueues(Queue.Struct[] memory theQueues) external onlyOwner {\n' +
          '        (bool success,) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function deleteQueue(uint256 theId) external onlyOwner {\n' +
          '        (bool success,) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function enqueue(uint256 theId, uint256 hound) external payable {\n' +
          '        (bool success,) = control.methods.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function onBeforeRace(uint256 theId) public payable {\n' +
          '        (bool success,) = control.methods.delegatecall(msg.data);\n' +
          '        require(success); \n' +
          '    }\n' +
          '\n' +
          '}\n',
        line: 27,
        range: [ 888, 904 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0xbecd5966759c1edc6bd5e4b5ce1a88898e54dde56928d5ec3d5735f23cb6226d',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-17T08:00:05.221Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'enqueue',
        contract: 'Queues',
        sourceName: 'contracts/queues/Index.sol',
        sourceContent: '// SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Queues is Params {\n' +
          '    \n' +
          '    constructor(QueuesConstructor.Struct memory input, address[] memory allowedCallers) Params(input, allowedCallers) {}\n' +
          '\n' +
          '    function createQueues(Queue.Struct[] memory theQueues) external onlyOwner {\n' +
          '        (bool success,) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function deleteQueue(uint256 theId) external onlyOwner {\n' +
          '        (bool success,) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function enqueue(uint256 theId, uint256 hound) external payable {\n' +
          '        (bool success,) = control.methods.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function onBeforeRace(uint256 theId) public payable {\n' +
          '        (bool success,) = control.methods.delegatecall(msg.data);\n' +
          '        require(success); \n' +
          '    }\n' +
          '\n' +
          '}\n',
        line: 22,
        range: [ 731, 747 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0x66eabdde7f2c7e86540badf9e4e05ab161720c5ea0e5fc2fa30b27848f1e44b3',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-17T08:00:05.412Z'
}
{
  parent: undefined,
  name: 'NomicLabsHardhatPluginError',
  pluginName: '@nomiclabs/hardhat-etherscan',
  _isHardhatPluginError: true,
  shouldBeReported: false,
  _isNomicLabsHardhatPluginError: true,
  level: 'error',
  errorMessage: 'The selected network is hardhat. Please select a network supported by Etherscan.',
  timestamp: '2022-05-17T08:00:05.481Z'
}
