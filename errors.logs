{
  parent: undefined,
  name: 'NomicLabsHardhatPluginError',
  pluginName: '@nomiclabs/hardhat-etherscan',
  _isHardhatPluginError: true,
  shouldBeReported: false,
  _isNomicLabsHardhatPluginError: true,
  level: 'error',
  errorMessage: 'The selected network is hardhat. Please select a network supported by Etherscan.',
  timestamp: '2022-05-16T13:12:09.571Z'
}
{
  reason: 'invalid value for array',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: { value: 5000 },
  level: 'error',
  errorMessage: 'invalid value for array (argument="value", value={"value":5000}, code=INVALID_ARGUMENT, version=contracts/5.6.0)',
  timestamp: '2022-05-16T13:13:30.212Z'
}
{
  reason: 'missing argument:  in Contract constructor',
  code: 'MISSING_ARGUMENT',
  count: 1,
  expectedCount: 2,
  level: 'error',
  errorMessage: 'missing argument:  in Contract constructor (count=1, expectedCount=2, code=MISSING_ARGUMENT, version=contracts/5.6.0)',
  timestamp: '2022-05-16T13:33:39.995Z'
}
{
  parent: undefined,
  name: 'HardhatError',
  errorDescriptor: {
    number: 700,
    message: 'Artifact for contract "%contractName%" not found. %suggestion%',
    title: 'Artifact not found',
    description: 'Tried to import a nonexistent artifact.\n' +
      '\n' +
      "Please double check that your contracts have been compiled and double check your artifact's name.",
    shouldBeReported: false
  },
  number: 700,
  messageArguments: { contractName: 'PaymentsMethods', suggestion: '' },
  _isHardhatError: true,
  level: 'error',
  errorMessage: 'HH700: Artifact for contract "PaymentsMethods" not found. ',
  timestamp: '2022-05-16T18:02:12.801Z'
}
{
  level: 'error',
  errorMessage: 'paymentsMethods is not defined',
  timestamp: '2022-05-16T18:03:19.691Z'
}
{
  reason: 'invalid address or ENS name',
  code: 'INVALID_ARGUMENT',
  argument: 'name',
  value: 500000000,
  level: 'error',
  errorMessage: 'invalid address or ENS name (argument="name", value=500000000, code=INVALID_ARGUMENT, version=contracts/5.6.0)',
  timestamp: '2022-05-16T18:03:21.905Z'
}
{
  level: 'error',
  errorMessage: 'paymentsMethods is not defined',
  timestamp: '2022-05-16T18:05:37.239Z'
}
{
  level: 'error',
  errorMessage: "Cannot access 'queues' before initialization",
  timestamp: '2022-05-16T18:05:39.585Z'
}
{
  level: 'error',
  errorMessage: 'paymentsMethods is not defined',
  timestamp: '2022-05-16T18:06:23.645Z'
}
{
  reason: 'missing argument:  in Contract constructor',
  code: 'MISSING_ARGUMENT',
  count: 1,
  expectedCount: 2,
  level: 'error',
  errorMessage: 'missing argument:  in Contract constructor (count=1, expectedCount=2, code=MISSING_ARGUMENT, version=contracts/5.6.0)',
  timestamp: '2022-05-16T18:06:26.377Z'
}
{
  level: 'error',
  errorMessage: 'paymentsMethods is not defined',
  timestamp: '2022-05-16T18:08:35.131Z'
}
{
  reason: 'invalid BigNumber value',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: undefined,
  level: 'error',
  errorMessage: 'invalid BigNumber value (argument="value", value=undefined, code=INVALID_ARGUMENT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:08:40.438Z'
}
{
  level: 'error',
  errorMessage: 'paymentsMethods is not defined',
  timestamp: '2022-05-16T18:11:47.807Z'
}
{
  reason: 'invalid BigNumber value',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: undefined,
  level: 'error',
  errorMessage: 'invalid BigNumber value (argument="value", value=undefined, code=INVALID_ARGUMENT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:11:51.330Z'
}
{
  level: 'error',
  errorMessage: 'paymentsMethods is not defined',
  timestamp: '2022-05-16T18:12:09.839Z'
}
{
  reason: 'invalid BigNumber value',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: undefined,
  level: 'error',
  errorMessage: 'invalid BigNumber value (argument="value", value=undefined, code=INVALID_ARGUMENT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:12:13.236Z'
}
{
  reason: 'invalid BigNumber value',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: undefined,
  level: 'error',
  errorMessage: 'invalid BigNumber value (argument="value", value=undefined, code=INVALID_ARGUMENT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:12:34.866Z'
}
{
  reason: 'invalid BigNumber value',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: undefined,
  level: 'error',
  errorMessage: 'invalid BigNumber value (argument="value", value=undefined, code=INVALID_ARGUMENT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:13:45.671Z'
}
{
  reason: 'invalid BigNumber value',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: undefined,
  level: 'error',
  errorMessage: 'invalid BigNumber value (argument="value", value=undefined, code=INVALID_ARGUMENT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:15:52.375Z'
}
{
  reason: 'invalid BigNumber value',
  code: 'INVALID_ARGUMENT',
  argument: 'value',
  value: undefined,
  level: 'error',
  errorMessage: 'invalid BigNumber value (argument="value", value=undefined, code=INVALID_ARGUMENT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:25:32.928Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725650.164,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725650.164, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:27:39.610Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725650.164,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725650.164, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:27:39.618Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725650.164,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725650.164, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:27:39.627Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725650.164,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725650.164, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:27:39.641Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0xf142da1035f2db3bac19e320c89d0edc1e3c98233accbad7570320f0ba1087bc',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:27:39.699Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0x1246fa7f1b44503be6a66d96f439550217b6c479121bb030bd672ae86aa2b168',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:27:39.730Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725650.164,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725650.164, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:27:39.738Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725733.717,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725733.717, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:29:02.887Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725733.717,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725733.717, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:29:02.898Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725733.717,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725733.717, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:29:02.908Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725733.717,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725733.717, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:29:02.918Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0xf142da1035f2db3bac19e320c89d0edc1e3c98233accbad7570320f0ba1087bc',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:29:03.018Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0x1246fa7f1b44503be6a66d96f439550217b6c479121bb030bd672ae86aa2b168',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:29:03.060Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725733.717,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725733.717, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:29:03.071Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725935.727,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725935.727, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:32:25.304Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725935.727,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725935.727, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:32:25.314Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725935.727,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725935.727, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:32:25.323Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725935.727,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725935.727, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:32:25.330Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0xf142da1035f2db3bac19e320c89d0edc1e3c98233accbad7570320f0ba1087bc',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:32:25.385Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0x1246fa7f1b44503be6a66d96f439550217b6c479121bb030bd672ae86aa2b168',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:32:25.417Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652725935.727,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652725935.727, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:32:25.426Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652726237.783,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652726237.783, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:37:27.515Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652726237.783,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652726237.783, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:37:27.523Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652726237.783,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652726237.783, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:37:27.532Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652726237.783,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652726237.783, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:37:27.539Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0xf142da1035f2db3bac19e320c89d0edc1e3c98233accbad7570320f0ba1087bc',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:37:27.602Z'
}
{
  stackTrace: [
    {
      type: 4,
      sourceReference: {
        function: 'breedHounds',
        contract: 'Hounds',
        sourceName: 'contracts/hounds/Index.sol',
        sourceContent: '//SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Hounds is Params {\n' +
          '\n' +
          '    constructor(Constructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function initializeHound(uint256 onId, Hound.Struct memory theHound) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function setTokenURI(uint256 _tokenId, string memory token_uri) external onlyOwner {\n' +
          '        (bool success, ) = control.boilerplate.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function breedHounds(uint256 hound1, uint256 hound2) external payable {\n' +
          '        (bool success, ) = control.boilerplate.minter.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundStamina(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundBreeding(uint256 theId) public {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundStamina(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function boostHoundBreeding(uint256 theId, address user) public payable {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function putHoundForBreed(uint256 theId, uint256 fee, bool status) external {\n' +
          '        (bool success, ) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function updateHoundRunning(uint256 theId, bool running) public returns(bool) {\n' +
          '        (bool success, bytes memory output) = control.boilerplate.houndModifier.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '        return abi.decode(output,(bool)); \n' +
          '    }\n' +
          '\n' +
          '    function getBreedCost(uint256 hound1, uint256 hound2) external view returns(uint256) {\n' +
          '        require(ownerOf(hound1) == msg.sender);\n' +
          '        return control.fees.breedCost + control.fees.breedFee + ( ownerOf(hound2) == msg.sender ? 0 : hounds[hound2].breeding.breedingFee );\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 22,
        range: [ 757, 773 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0x1246fa7f1b44503be6a66d96f439550217b6c479121bb030bd672ae86aa2b168',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:37:27.635Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652726237.783,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652726237.783, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:37:27.643Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652726237.783,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652726237.783, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:37:27.646Z'
}
{
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 1652726237.783,
  level: 'error',
  errorMessage: 'underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=1652726237.783, code=NUMERIC_FAULT, version=bignumber/5.6.0)',
  timestamp: '2022-05-16T18:37:27.648Z'
}
{
  stackTrace: [
    {
      type: 0,
      sourceReference: {
        function: 'uploadRace',
        contract: 'Races',
        sourceName: 'contracts/races/Index.sol',
        sourceContent: '// SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Races is Params {\n' +
          '    \n' +
          '    constructor(RacesConstructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function uploadRace(Race.Struct memory race) external payable {\n' +
          '        (bool success, ) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function raceStart(Queue.Struct memory queue) external {\n' +
          '        (bool success, ) = control.methods.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '}',
        line: 11,
        range: [ 286, 327 ]
      },
      functionType: 1
    },
    {
      type: 0,
      sourceReference: {
        function: 'uploadRace',
        contract: 'RacesRestricted',
        sourceName: 'contracts/races/restricted/Index.sol',
        sourceContent: '// SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import '../params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract RacesRestricted is Params {\n' +
          '\n' +
          '    constructor(RacesConstructor.Struct memory input) Params(input) {}\n' +
          '\n' +
          '    function uploadRace(Race.Struct memory race) external payable onlyOwner {\n' +
          '\n' +
          '        IQueues(control.queues).onBeforeRace{ value: msg.value }(race.queueId);\n' +
          '\n' +
          '        races[id] = race;\n' +
          '\n' +
          '        emit UploadRace(id, race);\n' +
          '\n' +
          '        ++id;\n' +
          '    }\n' +
          '\n' +
          '}\n',
        line: 12,
        range: [ 285, 355 ]
      },
      functionType: 1
    },
    {
      type: 4,
      sourceReference: {
        function: 'onBeforeRace',
        contract: 'Queues',
        sourceName: 'contracts/queues/Index.sol',
        sourceContent: '// SPDX-License-Identifier: MIT\n' +
          'pragma solidity 0.8.13;\n' +
          "import './params/Index.sol';\n" +
          '\n' +
          '\n' +
          'contract Queues is Params {\n' +
          '    \n' +
          '    constructor(QueuesConstructor.Struct memory input, address[] memory allowedCallers) Params(input, allowedCallers) {}\n' +
          '\n' +
          '    function createQueues(Queue.Struct[] memory theQueues) external onlyOwner {\n' +
          '        (bool success,) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function deleteQueue(uint256 theId) external onlyOwner {\n' +
          '        (bool success,) = control.restricted.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function enqueue(uint256 theId, uint256 hound) external payable {\n' +
          '        (bool success,) = control.methods.delegatecall(msg.data);\n' +
          '        require(success);\n' +
          '    }\n' +
          '\n' +
          '    function onBeforeRace(uint256 theId) public payable {\n' +
          '        (bool success,) = control.methods.delegatecall(msg.data);\n' +
          '        require(success); \n' +
          '    }\n' +
          '\n' +
          '}\n',
        line: 27,
        range: [ 888, 904 ]
      },
      message: ReturnData { value: <Buffer > },
      isInvalidOpcodeError: false
    }
  ],
  transactionHash: '0x0c3311e75407a12d3daaad2e8e075c9267378303cae8d535d612d2e100b02fc0',
  level: 'error',
  errorMessage: 'Transaction reverted without a reason string',
  timestamp: '2022-05-16T18:37:27.714Z'
}
