/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IncubatorConstructor {
  export type StructStruct = {
    methods: PromiseOrValue<string>;
    randomness: PromiseOrValue<string>;
    genetics: PromiseOrValue<string>;
    secondsToMaturity: PromiseOrValue<BigNumberish>;
  };

  export type StructStructOutput = [string, string, string, number] & {
    methods: string;
    randomness: string;
    genetics: string;
    secondsToMaturity: number;
  };
}

export declare namespace Hound {
  export type StatisticsStruct = {
    totalRuns: PromiseOrValue<BigNumberish>;
    firstPlace: PromiseOrValue<BigNumberish>;
    secondPlace: PromiseOrValue<BigNumberish>;
    thirdPlace: PromiseOrValue<BigNumberish>;
  };

  export type StatisticsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalRuns: BigNumber;
    firstPlace: BigNumber;
    secondPlace: BigNumber;
    thirdPlace: BigNumber;
  };

  export type StaminaStruct = {
    staminaRefill1xCurrency: PromiseOrValue<string>;
    staminaLastUpdate: PromiseOrValue<BigNumberish>;
    staminaRefill1x: PromiseOrValue<BigNumberish>;
    staminaValue: PromiseOrValue<BigNumberish>;
    staminaPerHour: PromiseOrValue<BigNumberish>;
    staminaCap: PromiseOrValue<BigNumberish>;
  };

  export type StaminaStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    staminaRefill1xCurrency: string;
    staminaLastUpdate: BigNumber;
    staminaRefill1x: BigNumber;
    staminaValue: number;
    staminaPerHour: number;
    staminaCap: number;
  };

  export type BreedingStruct = {
    lastBreed: PromiseOrValue<BigNumberish>;
    breedingCooldown: PromiseOrValue<BigNumberish>;
    breedingFeeCurrency: PromiseOrValue<string>;
    breedingFee: PromiseOrValue<BigNumberish>;
    availableToBreed: PromiseOrValue<boolean>;
  };

  export type BreedingStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    boolean
  ] & {
    lastBreed: BigNumber;
    breedingCooldown: BigNumber;
    breedingFeeCurrency: string;
    breedingFee: BigNumber;
    availableToBreed: boolean;
  };

  export type IdentityStruct = {
    maleParent: PromiseOrValue<BigNumberish>;
    femaleParent: PromiseOrValue<BigNumberish>;
    generation: PromiseOrValue<BigNumberish>;
    birthDate: PromiseOrValue<BigNumberish>;
    geneticSequence: PromiseOrValue<BigNumberish>[];
  };

  export type IdentityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number[]
  ] & {
    maleParent: BigNumber;
    femaleParent: BigNumber;
    generation: BigNumber;
    birthDate: BigNumber;
    geneticSequence: number[];
  };

  export type StructStruct = {
    statistics: Hound.StatisticsStruct;
    stamina: Hound.StaminaStruct;
    breeding: Hound.BreedingStruct;
    identity: Hound.IdentityStruct;
    title: PromiseOrValue<string>;
    token_uri: PromiseOrValue<string>;
    queueId: PromiseOrValue<BigNumberish>;
    custom: PromiseOrValue<boolean>;
  };

  export type StructStructOutput = [
    Hound.StatisticsStructOutput,
    Hound.StaminaStructOutput,
    Hound.BreedingStructOutput,
    Hound.IdentityStructOutput,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    statistics: Hound.StatisticsStructOutput;
    stamina: Hound.StaminaStructOutput;
    breeding: Hound.BreedingStructOutput;
    identity: Hound.IdentityStructOutput;
    title: string;
    token_uri: string;
    queueId: BigNumber;
    custom: boolean;
  };
}

export interface IncubatorInterface extends utils.Interface {
  functions: {
    "breedHounds(uint256,((uint64,uint64,uint64,uint64),(address,uint256,uint256,uint32,uint32,uint32),(uint256,uint256,address,uint256,bool),(uint256,uint256,uint256,uint256,uint32[54]),string,string,uint256,bool),uint256,((uint64,uint64,uint64,uint64),(address,uint256,uint256,uint32,uint32,uint32),(uint256,uint256,address,uint256,bool),(uint256,uint256,uint256,uint256,uint32[54]),string,string,uint256,bool))": FunctionFragment;
    "control()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGlobalParameters((address,address,address,uint32))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "breedHounds"
      | "control"
      | "owner"
      | "renounceOwnership"
      | "setGlobalParameters"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "breedHounds",
    values: [
      PromiseOrValue<BigNumberish>,
      Hound.StructStruct,
      PromiseOrValue<BigNumberish>,
      Hound.StructStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "control", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalParameters",
    values: [IncubatorConstructor.StructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "breedHounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "control", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Incubator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IncubatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    breedHounds(
      hound1Id: PromiseOrValue<BigNumberish>,
      hound1: Hound.StructStruct,
      hound2Id: PromiseOrValue<BigNumberish>,
      hound2: Hound.StructStruct,
      overrides?: CallOverrides
    ): Promise<[Hound.StructStructOutput]>;

    control(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        methods: string;
        randomness: string;
        genetics: string;
        secondsToMaturity: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalParameters(
      globalParameters: IncubatorConstructor.StructStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  breedHounds(
    hound1Id: PromiseOrValue<BigNumberish>,
    hound1: Hound.StructStruct,
    hound2Id: PromiseOrValue<BigNumberish>,
    hound2: Hound.StructStruct,
    overrides?: CallOverrides
  ): Promise<Hound.StructStructOutput>;

  control(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number] & {
      methods: string;
      randomness: string;
      genetics: string;
      secondsToMaturity: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalParameters(
    globalParameters: IncubatorConstructor.StructStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    breedHounds(
      hound1Id: PromiseOrValue<BigNumberish>,
      hound1: Hound.StructStruct,
      hound2Id: PromiseOrValue<BigNumberish>,
      hound2: Hound.StructStruct,
      overrides?: CallOverrides
    ): Promise<Hound.StructStructOutput>;

    control(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number] & {
        methods: string;
        randomness: string;
        genetics: string;
        secondsToMaturity: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGlobalParameters(
      globalParameters: IncubatorConstructor.StructStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    breedHounds(
      hound1Id: PromiseOrValue<BigNumberish>,
      hound1: Hound.StructStruct,
      hound2Id: PromiseOrValue<BigNumberish>,
      hound2: Hound.StructStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    control(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalParameters(
      globalParameters: IncubatorConstructor.StructStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    breedHounds(
      hound1Id: PromiseOrValue<BigNumberish>,
      hound1: Hound.StructStruct,
      hound2Id: PromiseOrValue<BigNumberish>,
      hound2: Hound.StructStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    control(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalParameters(
      globalParameters: IncubatorConstructor.StructStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
