/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace GeneticsConstructor {
  export type StructStruct = {
    randomness: PromiseOrValue<string>;
    terrains: PromiseOrValue<string>;
    male: PromiseOrValue<BigNumberish>[];
    female: PromiseOrValue<BigNumberish>[];
    maleGenesProbability: PromiseOrValue<BigNumberish>;
    femaleGenesProbability: PromiseOrValue<BigNumberish>;
    geneticSequenceSignature: PromiseOrValue<BigNumberish>[];
    maxValues: PromiseOrValue<BigNumberish>[];
  };

  export type StructStructOutput = [
    string,
    string,
    number[],
    number[],
    number,
    number,
    number[],
    number[]
  ] & {
    randomness: string;
    terrains: string;
    male: number[];
    female: number[];
    maleGenesProbability: number;
    femaleGenesProbability: number;
    geneticSequenceSignature: number[];
    maxValues: number[];
  };
}

export interface GeneticsInterface extends utils.Interface {
  functions: {
    "arithmeticMutation(uint32[54],uint256)": FunctionFragment;
    "control()": FunctionFragment;
    "inversionMutation(uint32[54],uint256)": FunctionFragment;
    "mixGenes(uint32[54],uint32[54],uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "scrambleMutation(uint32[54],uint256)": FunctionFragment;
    "setGlobalParameters((address,address,uint32[54],uint32[54],uint32,uint32,uint32[13],uint32[54]))": FunctionFragment;
    "swapMutation(uint32[54],uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniformCrossover(uint32[54],uint32[54],uint256)": FunctionFragment;
    "wholeArithmeticRecombination(uint32[54],uint32[54])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arithmeticMutation"
      | "control"
      | "inversionMutation"
      | "mixGenes"
      | "owner"
      | "renounceOwnership"
      | "scrambleMutation"
      | "setGlobalParameters"
      | "swapMutation"
      | "transferOwnership"
      | "uniformCrossover"
      | "wholeArithmeticRecombination"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arithmeticMutation",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "control", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inversionMutation",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mixGenes",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scrambleMutation",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalParameters",
    values: [GeneticsConstructor.StructStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapMutation",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniformCrossover",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wholeArithmeticRecombination",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "arithmeticMutation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "control", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inversionMutation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mixGenes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scrambleMutation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapMutation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniformCrossover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wholeArithmeticRecombination",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Genetics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GeneticsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arithmeticMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    control(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        randomness: string;
        terrains: string;
        maleGenesProbability: number;
        femaleGenesProbability: number;
      }
    >;

    inversionMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    mixGenes(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scrambleMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    setGlobalParameters(
      globalParameters: GeneticsConstructor.StructStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniformCrossover(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { geneticSequence: number[] }>;

    wholeArithmeticRecombination(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[number[]] & { geneticSequence: number[] }>;
  };

  arithmeticMutation(
    geneticSequence: PromiseOrValue<BigNumberish>[],
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  control(
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, number] & {
      randomness: string;
      terrains: string;
      maleGenesProbability: number;
      femaleGenesProbability: number;
    }
  >;

  inversionMutation(
    geneticSequence: PromiseOrValue<BigNumberish>[],
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  mixGenes(
    geneticSequence1: PromiseOrValue<BigNumberish>[],
    geneticSequence2: PromiseOrValue<BigNumberish>[],
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scrambleMutation(
    geneticSequence: PromiseOrValue<BigNumberish>[],
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  setGlobalParameters(
    globalParameters: GeneticsConstructor.StructStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapMutation(
    geneticSequence: PromiseOrValue<BigNumberish>[],
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniformCrossover(
    geneticSequence1: PromiseOrValue<BigNumberish>[],
    geneticSequence2: PromiseOrValue<BigNumberish>[],
    randomness: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  wholeArithmeticRecombination(
    geneticSequence1: PromiseOrValue<BigNumberish>[],
    geneticSequence2: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<number[]>;

  callStatic: {
    arithmeticMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    control(
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, number] & {
        randomness: string;
        terrains: string;
        maleGenesProbability: number;
        femaleGenesProbability: number;
      }
    >;

    inversionMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    mixGenes(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    scrambleMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    setGlobalParameters(
      globalParameters: GeneticsConstructor.StructStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniformCrossover(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    wholeArithmeticRecombination(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<number[]>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    arithmeticMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    control(overrides?: CallOverrides): Promise<BigNumber>;

    inversionMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mixGenes(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scrambleMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGlobalParameters(
      globalParameters: GeneticsConstructor.StructStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniformCrossover(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wholeArithmeticRecombination(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arithmeticMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    control(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inversionMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mixGenes(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scrambleMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGlobalParameters(
      globalParameters: GeneticsConstructor.StructStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapMutation(
      geneticSequence: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniformCrossover(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      randomness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wholeArithmeticRecombination(
      geneticSequence1: PromiseOrValue<BigNumberish>[],
      geneticSequence2: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
