/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Payments,
  PaymentsInterface,
  PaymentsConstructor,
} from "../Payments";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
        ],
        internalType: "struct PaymentsConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "enum Payment.PaymentTypes",
        name: "",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "alphaduneReservoirs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "alphadune",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "enum Payment.PaymentTypes",
        name: "paymentType",
        type: "uint8",
      },
    ],
    name: "fillRewardsReservoir",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "enum Payment.PaymentTypes",
        name: "paymentType",
        type: "uint8",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Payment.PaymentTypes",
        name: "",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rewardsReservoirs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
        ],
        internalType: "struct PaymentsConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012793803806200127983398181016040528101906200003791906200038b565b80620000586200004c6200014260201b60201c565b6200014a60201b60201c565b6001808190555080600460008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050505050620003bd565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200026d8262000222565b810181811067ffffffffffffffff821117156200028f576200028e62000233565b5b80604052505050565b6000620002a46200020e565b9050620002b2828262000262565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002e482620002b7565b9050919050565b620002f681620002d7565b81146200030257600080fd5b50565b6000815190506200031681620002eb565b92915050565b6000606082840312156200033557620003346200021d565b5b62000341606062000298565b90506000620003538482850162000305565b6000830152506020620003698482850162000305565b60208301525060406200037f8482850162000305565b60408301525092915050565b600060608284031215620003a457620003a362000218565b5b6000620003b4848285016200031c565b91505092915050565b610eac80620003cd6000396000f3fe60806040526004361061008a5760003560e01c8063c01f59c211610059578063c01f59c21461014f578063d6dc0dfd1461016b578063d8de658714610194578063edcfb3f3146101c1578063f2fde38b146101dd57610091565b8063715018a6146100935780638da5cb5b146100aa57806398f66e3f146100d5578063a1575fe21461011257610091565b3661009157005b005b34801561009f57600080fd5b506100a8610206565b005b3480156100b657600080fd5b506100bf61021a565b6040516100cc91906107b9565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f7919061086f565b610243565b60405161010991906108d1565b60405180910390f35b34801561011e57600080fd5b506101396004803603810190610134919061086f565b610275565b60405161014691906108d1565b60405180910390f35b61016960048036038101906101649190610a45565b6102a7565b005b34801561017757600080fd5b50610192600480360381019061018d9190610b73565b6103a1565b005b3480156101a057600080fd5b506101a9610487565b6040516101b893929190610ba0565b60405180910390f35b6101db60048036038101906101d69190610bd7565b6104ff565b005b3480156101e957600080fd5b5061020460048036038101906101ff9190610c76565b6105ab565b005b61020e61062e565b61021860006106ac565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b600260205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b6002600154036102ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e390610d00565b60405180910390fd5b60026001819055506000600460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600036604051610343929190610d5f565b600060405180830381855af49150503d806000811461037e576040519150601f19603f3d011682016040523d82523d6000602084013e610383565b606091505b505090508061039157600080fd5b5060018081905550505050505050565b6103a961062e565b80600460008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050565b60048060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b61050761062e565b6000600460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600036604051610556929190610d5f565b600060405180830381855af49150503d8060008114610591576040519150601f19603f3d011682016040523d82523d6000602084013e610596565b606091505b50509050806105a457600080fd5b5050505050565b6105b361062e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061990610dea565b60405180910390fd5b61062b816106ac565b50565b610636610770565b73ffffffffffffffffffffffffffffffffffffffff1661065461021a565b73ffffffffffffffffffffffffffffffffffffffff16146106aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a190610e56565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107a382610778565b9050919050565b6107b381610798565b82525050565b60006020820190506107ce60008301846107aa565b92915050565b6000604051905090565b600080fd5b600080fd5b600481106107f557600080fd5b50565b600081359050610807816107e8565b92915050565b61081681610798565b811461082157600080fd5b50565b6000813590506108338161080d565b92915050565b6000819050919050565b61084c81610839565b811461085757600080fd5b50565b60008135905061086981610843565b92915050565b600080600060608486031215610888576108876107de565b5b6000610896868287016107f8565b93505060206108a786828701610824565b92505060406108b88682870161085a565b9150509250925092565b6108cb81610839565b82525050565b60006020820190506108e660008301846108c2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61093a826108f1565b810181811067ffffffffffffffff8211171561095957610958610902565b5b80604052505050565b600061096c6107d4565b90506109788282610931565b919050565b600067ffffffffffffffff82111561099857610997610902565b5b602082029050602081019050919050565b600080fd5b60006109c16109bc8461097d565b610962565b905080838252602082019050602084028301858111156109e4576109e36109a9565b5b835b81811015610a0d57806109f9888261085a565b8452602084019350506020810190506109e6565b5050509392505050565b600082601f830112610a2c57610a2b6108ec565b5b8135610a3c8482602086016109ae565b91505092915050565b60008060008060008060c08789031215610a6257610a616107de565b5b6000610a7089828a01610824565b9650506020610a8189828a01610824565b9550506040610a9289828a01610824565b945050606087013567ffffffffffffffff811115610ab357610ab26107e3565b5b610abf89828a01610a17565b935050608087013567ffffffffffffffff811115610ae057610adf6107e3565b5b610aec89828a01610a17565b92505060a0610afd89828a016107f8565b9150509295509295509295565b600080fd5b600060608284031215610b2557610b24610b0a565b5b610b2f6060610962565b90506000610b3f84828501610824565b6000830152506020610b5384828501610824565b6020830152506040610b6784828501610824565b60408301525092915050565b600060608284031215610b8957610b886107de565b5b6000610b9784828501610b0f565b91505092915050565b6000606082019050610bb560008301866107aa565b610bc260208301856107aa565b610bcf60408301846107aa565b949350505050565b60008060008060808587031215610bf157610bf06107de565b5b6000610bff87828801610824565b945050602085013567ffffffffffffffff811115610c2057610c1f6107e3565b5b610c2c87828801610a17565b935050604085013567ffffffffffffffff811115610c4d57610c4c6107e3565b5b610c5987828801610a17565b9250506060610c6a878288016107f8565b91505092959194509250565b600060208284031215610c8c57610c8b6107de565b5b6000610c9a84828501610824565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610cea601f83610ca3565b9150610cf582610cb4565b602082019050919050565b60006020820190508181036000830152610d1981610cdd565b9050919050565b600081905092915050565b82818337600083830152505050565b6000610d468385610d20565b9350610d53838584610d2b565b82840190509392505050565b6000610d6c828486610d3a565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610dd4602683610ca3565b9150610ddf82610d78565b604082019050919050565b60006020820190508181036000830152610e0381610dc7565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610e40602083610ca3565b9150610e4b82610e0a565b602082019050919050565b60006020820190508181036000830152610e6f81610e33565b905091905056fea26469706673582212204e2b96f8b40dd024110a3e892a0715cf08c40fc7bea95612593a14aec19b8cf464736f6c63430008110033";

type PaymentsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Payments__factory extends ContractFactory {
  constructor(...args: PaymentsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Payments";
  }

  deploy(
    input: PaymentsConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Payments> {
    return super.deploy(input, overrides || {}) as Promise<Payments>;
  }
  getDeployTransaction(
    input: PaymentsConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Payments {
    return super.attach(address) as Payments;
  }
  connect(signer: Signer): Payments__factory {
    return super.connect(signer) as Payments__factory;
  }
  static readonly contractName: "Payments";
  public readonly contractName: "Payments";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentsInterface {
    return new utils.Interface(_abi) as PaymentsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Payments {
    return new Contract(address, _abi, signerOrProvider) as Payments;
  }
}
