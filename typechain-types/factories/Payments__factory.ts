/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Payments, PaymentsInterface } from "../Payments";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "id",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amount",
        type: "uint256[]",
      },
      {
        internalType: "uint32",
        name: "paymentType",
        type: "uint32",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c42806100826000396000f3fe6080604052600436106100405760003560e01c8063400f959f14610049578063715018a61461005c5780638da5cb5b14610071578063f2fde38b1461009c57005b3661004757005b005b61004761005736600461096e565b6100bc565b34801561006857600080fd5b50610047610597565b34801561007d57600080fd5b506100866105ab565b6040516100939190610a1f565b60405180910390f35b3480156100a857600080fd5b506100476100b7366004610a33565b6105ba565b6100ed6040518060400160405280601081526020016f3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d60801b815250610638565b6100f68661067b565b6100ff8561067b565b6101088461067b565b6101178163ffffffff166106be565b6101486040518060400160405280601081526020016f3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d60801b815250610638565b8063ffffffff166000036101d757836001600160a01b03166342842e0e87878660008151811061017a5761017a610a55565b60200260200101516040518463ffffffff1660e01b81526004016101a093929190610a6b565b600060405180830381600087803b1580156101ba57600080fd5b505af11580156101ce573d6000803e3d6000fd5b5050505061056a565b8063ffffffff1660010361021757604051631759616b60e11b81526001600160a01b03851690632eb2c2d6906101a0908990899088908890600401610aca565b8063ffffffff166002036104995761024d604051806040016040528060078152602001663432b93297171760c91b815250610638565b6102708260008151811061026357610263610a55565b60200260200101516106be565b6040805180820182526009815268020b63637bbb2b21d160bd1b60208201529051636eb1769f60e11b81526001600160a01b03888116600483015230602483015261030992919087169063dd62ed3e90604401602060405180830381865afa1580156102e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103049190610b25565b610703565b6001600160a01b03861630146103af57836001600160a01b03166323b872dd87308560008151811061033d5761033d610a55565b60200260200101516040518463ffffffff1660e01b815260040161036393929190610a6b565b6020604051808303816000875af1158015610382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a69190610b3e565b6103af57600080fd5b6103ec6040518060400160405280601c81526020017b2bb290353ab6b81039ba3930b4b3b43a103a37903a3930b739b332b960211b815250610638565b836001600160a01b031663a9059cbb868460008151811061040f5761040f610a55565b60200260200101516040518363ffffffff1660e01b81526004016104489291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190610b3e565b61049457600080fd5b61056a565b8063ffffffff1660030361056a576104bd8260008151811061026357610263610a55565b6104eb6040518060400160405280600c81526020016b03a379030b2323932b9b99d160a51b8152508661074c565b6104f4346106be565b61050a8260008151811061026357610263610a55565b61051f6001600160a01b0386163b1515610791565b846001600160a01b03166108fc8360008151811061053f5761053f610a55565b60200260200101519081150290604051600060405180830381858888f1935050505061056a57600080fd5b61058f60405180604001604052806004815260200163444f4e4560e01b815250610638565b505050505050565b61059f6107d2565b6105a96000610831565b565b6000546001600160a01b031690565b6105c26107d2565b6001600160a01b03811661062c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61063581610831565b50565b6106358160405160240161064c9190610bad565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610881565b6106358160405160240161068f9190610a1f565b60408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052610881565b610635816040516024016106d491815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b179052610881565b6107488282604051602401610719929190610bc0565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052610881565b5050565b6107488282604051602401610762929190610be2565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610881565b60405181151560248201526106359060440160408051601f198184030181529190526020810180516001600160e01b03166332458eed60e01b179052610881565b336107db6105ab565b6001600160a01b0316146105a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610623565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b03811681146108b957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126108e557600080fd5b813560206001600160401b0380831115610901576109016108be565b8260051b604051601f19603f83011681018181108482111715610926576109266108be565b60405293845285810183019383810192508785111561094457600080fd5b83870191505b848210156109635781358352918301919083019061094a565b979650505050505050565b60008060008060008060c0878903121561098757600080fd5b610990876108a2565b955061099e602088016108a2565b94506109ac604088016108a2565b935060608701356001600160401b03808211156109c857600080fd5b6109d48a838b016108d4565b945060808901359150808211156109ea57600080fd5b506109f789828a016108d4565b92505060a087013563ffffffff81168114610a1157600080fd5b809150509295509295509295565b6001600160a01b0391909116815260200190565b600060208284031215610a4557600080fd5b610a4e826108a2565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600081518084526020808501945080840160005b83811015610abf57815187529582019590820190600101610aa3565b509495945050505050565b6001600160a01b0385811682528416602082015260a060408201819052600090610af690830185610a8f565b8281036060840152610b088185610a8f565b838103608090940193909352505060008152602001949350505050565b600060208284031215610b3757600080fd5b5051919050565b600060208284031215610b5057600080fd5b81518015158114610a4e57600080fd5b6000815180845260005b81811015610b8657602081850181015186830182015201610b6a565b81811115610b98576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610a4e6020830184610b60565b604081526000610bd36040830185610b60565b90508260208301529392505050565b604081526000610bf56040830185610b60565b905060018060a01b0383166020830152939250505056fea26469706673582212202f016bddc2791e8b0d2da391c7927789bd63e2882bf9248a9cbbe01c4914463164736f6c634300080f0033";

type PaymentsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Payments__factory extends ContractFactory {
  constructor(...args: PaymentsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Payments";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Payments> {
    return super.deploy(overrides || {}) as Promise<Payments>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Payments {
    return super.attach(address) as Payments;
  }
  connect(signer: Signer): Payments__factory {
    return super.connect(signer) as Payments__factory;
  }
  static readonly contractName: "Payments";
  public readonly contractName: "Payments";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentsInterface {
    return new utils.Interface(_abi) as PaymentsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Payments {
    return new Contract(address, _abi, signerOrProvider) as Payments;
  }
}
