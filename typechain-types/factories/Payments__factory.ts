/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Payments,
  PaymentsInterface,
  PaymentsConstructor,
} from "../Payments";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "bytes4[][]",
            name: "targets",
            type: "bytes4[][]",
          },
        ],
        internalType: "struct PaymentsConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "enum Payment.PaymentTypes",
        name: "paymentType",
        type: "uint8",
      },
    ],
    name: "NewPayment",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "enum Payment.PaymentTypes",
        name: "paymentType",
        type: "uint8",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "bytes4[][]",
            name: "targets",
            type: "bytes4[][]",
          },
        ],
        internalType: "struct PaymentsConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "whitelists",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200158d3803806200158d8339810160408190526200003491620005d3565b8051604082015160016000558291906200004e33620001e0565b80518251146200005d57600080fd5b60005b8251811015620001765760005b828281518110620000825762000082620006e3565b602002602001015151811015620001625760026000858481518110620000ac57620000ac620006e3565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020838381518110620000e957620000e9620006e3565b60200260200101518281518110620001055762000105620006e3565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c919091029190911790556200015a81620006f9565b90506200006d565b506200016e81620006f9565b905062000060565b505081518051839250600391620001939183916020019062000232565b506020828101516001830180546001600160a01b0319166001600160a01b0390921691909117905560408301518051620001d492600285019201906200029c565b50905050505062000721565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280548282559060005260206000209081019282156200028a579160200282015b828111156200028a57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000253565b5062000298929150620002fc565b5090565b828054828255906000526020600020908101928215620002ee579160200282015b82811115620002ee5782518051620002dd91849160209091019062000313565b5091602001919060010190620002bd565b5062000298929150620003c1565b5b80821115620002985760008155600101620002fd565b828054828255906000526020600020906007016008900481019282156200028a5791602002820160005b838211156200038057835183826101000a81548163ffffffff021916908360e01c021790555092602001926004016020816003010492830192600103026200033d565b8015620003b25782816101000a81549063ffffffff021916905560040160208160030104928301926001030262000380565b505062000298929150620002fc565b8082111562000298576000620003d88282620003e2565b50600101620003c1565b508054600082556007016008900490600052602060002090810190620004099190620002fc565b50565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156200044757620004476200040c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200047857620004786200040c565b604052919050565b60006001600160401b038211156200049c576200049c6200040c565b5060051b60200190565b80516001600160a01b0381168114620004be57600080fd5b919050565b600082601f830112620004d557600080fd5b81516020620004ee620004e88362000480565b6200044d565b828152600592831b85018201928282019190878511156200050e57600080fd5b8387015b85811015620005c65780516001600160401b03811115620005335760008081fd5b8801603f81018a13620005465760008081fd5b8581015160406200055b620004e88362000480565b82815291851b8301810191888101908d841115620005795760008081fd5b938201935b83851015620005b457845192506001600160e01b031983168314620005a35760008081fd5b82825293890193908901906200057e565b88525050509385019350840162000512565b5090979650505050505050565b60006020808385031215620005e757600080fd5b82516001600160401b0380821115620005ff57600080fd5b90840190606082870312156200061457600080fd5b6200061e62000422565b8251828111156200062e57600080fd5b8301601f810188136200064057600080fd5b805162000651620004e88262000480565b81815260059190911b8201860190868101908a8311156200067157600080fd5b928701925b828410156200069a576200068a84620004a6565b8252928701929087019062000676565b845250620006ad915050838501620004a6565b848201526040830151935081841115620006c657600080fd5b620006d487858501620004c3565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200071a57634e487b7160e01b600052601160045260246000fd5b5060010190565b610e5c80620007316000396000f3fe60806040526004361061006e5760003560e01c8063c01f59c21161004b578063c01f59c21461012e578063d8de658714610141578063eccf35ba1461016e578063f2fde38b1461018e57005b80635b19e29414610077578063715018a6146100cd5780638da5cb5b146100e257005b3661007557005b005b34801561008357600080fd5b50610097610092366004610949565b6101ae565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b3480156100d957600080fd5b506100756101f4565b3480156100ee57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c4565b61007561013c366004610aa9565b610208565b34801561014d57600080fd5b506004546101099073ffffffffffffffffffffffffffffffffffffffff1681565b34801561017a57600080fd5b50610075610189366004610c69565b61028c565b34801561019a57600080fd5b506100756101a9366004610d66565b610328565b600260205281600052604060002081815481106101ca57600080fd5b9060005260206000209060089182820401919006600402915091509054906101000a900460e01b81565b6101fc6103e1565b6102066000610462565b565b60045460405160009173ffffffffffffffffffffffffffffffffffffffff16906102359083903690610d88565b600060405180830381855af49150503d8060008114610270576040519150601f19603f3d011682016040523d82523d6000602084013e610275565b606091505b505090508061028357600080fd5b50505050505050565b6102946103e1565b8051805182916003916102ae91839160209091019061073f565b506020828101516001830180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790556040830151805161031292600285019201906107c9565b50508151604083015161032592506104d9565b50565b6103306103e1565b73ffffffffffffffffffffffffffffffffffffffff81166103d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61032581610462565b60015473ffffffffffffffffffffffffffffffffffffffff163314610206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103cf565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80518251146104e757600080fd5b60005b825181101561073a5760005b82828151811061050857610508610d98565b602002602001015151811015610729576002600085848151811061052e5761052e610d98565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811061064c576002600085848151811061059057610590610d98565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208383815181106105e4576105e4610d98565b602002602001015182815181106105fd576105fd610d98565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c91909102919091179055610719565b82828151811061065e5761065e610d98565b6020026020010151818151811061067757610677610d98565b60200260200101516002600086858151811061069557610695610d98565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106106e8576106e8610d98565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505b61072281610dc7565b90506104f6565b5061073381610dc7565b90506104ea565b505050565b8280548282559060005260206000209081019282156107b9579160200282015b828111156107b957825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061075f565b506107c5929150610822565b5090565b828054828255906000526020600020908101928215610816579160200282015b828111156108165782518051610806918491602090910190610837565b50916020019190600101906107e9565b506107c59291506108de565b5b808211156107c55760008155600101610823565b828054828255906000526020600020906007016008900481019282156107b95791602002820160005b838211156108a157835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610860565b80156108d15782816101000a81549063ffffffff02191690556004016020816003010492830192600103026108a1565b50506107c5929150610822565b808211156107c55760006108f282826108fb565b506001016108de565b5080546000825560070160089004906000526020600020908101906103259190610822565b803573ffffffffffffffffffffffffffffffffffffffff8116811461094457600080fd5b919050565b6000806040838503121561095c57600080fd5b61096583610920565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156109c5576109c5610973565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610a1257610a12610973565b604052919050565b600067ffffffffffffffff821115610a3457610a34610973565b5060051b60200190565b600082601f830112610a4f57600080fd5b81356020610a64610a5f83610a1a565b6109cb565b82815260059290921b84018101918181019086841115610a8357600080fd5b8286015b84811015610a9e5780358352918301918301610a87565b509695505050505050565b60008060008060008060c08789031215610ac257600080fd5b610acb87610920565b9550610ad960208801610920565b9450610ae760408801610920565b9350606087013567ffffffffffffffff80821115610b0457600080fd5b610b108a838b01610a3e565b94506080890135915080821115610b2657600080fd5b50610b3389828a01610a3e565b92505060a087013560048110610b4857600080fd5b809150509295509295509295565b600082601f830112610b6757600080fd5b81356020610b77610a5f83610a1a565b828152600592831b8501820192828201919087851115610b9657600080fd5b8387015b85811015610c5c57803567ffffffffffffffff811115610bba5760008081fd5b8801603f81018a13610bcc5760008081fd5b858101356040610bde610a5f83610a1a565b82815291851b8301810191888101908d841115610bfb5760008081fd5b938201935b83851015610c4b57843592507fffffffff0000000000000000000000000000000000000000000000000000000083168314610c3b5760008081fd5b8282529389019390890190610c00565b885250505093850193508401610b9a565b5090979650505050505050565b60006020808385031215610c7c57600080fd5b823567ffffffffffffffff80821115610c9457600080fd5b9084019060608287031215610ca857600080fd5b610cb06109a2565b823582811115610cbf57600080fd5b8301601f81018813610cd057600080fd5b8035610cde610a5f82610a1a565b81815260059190911b8201860190868101908a831115610cfd57600080fd5b928701925b82841015610d2257610d1384610920565b82529287019290870190610d02565b845250610d33915050838501610920565b848201526040830135935081841115610d4b57600080fd5b610d5787858501610b56565b60408201529695505050505050565b600060208284031215610d7857600080fd5b610d8182610920565b9392505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e1f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea264697066735822122030b92f62ce523f88ccc4aae4ef87033b74d499b5abeea41383d01b3bff98526664736f6c63430008110033";

type PaymentsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Payments__factory extends ContractFactory {
  constructor(...args: PaymentsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Payments";
  }

  deploy(
    input: PaymentsConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Payments> {
    return super.deploy(input, overrides || {}) as Promise<Payments>;
  }
  getDeployTransaction(
    input: PaymentsConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Payments {
    return super.attach(address) as Payments;
  }
  connect(signer: Signer): Payments__factory {
    return super.connect(signer) as Payments__factory;
  }
  static readonly contractName: "Payments";
  public readonly contractName: "Payments";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentsInterface {
    return new utils.Interface(_abi) as PaymentsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Payments {
    return new Contract(address, _abi, signerOrProvider) as Payments;
  }
}
