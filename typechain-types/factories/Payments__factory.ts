/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Payments,
  PaymentsInterface,
  PaymentsConstructor,
} from "../Payments";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
        ],
        internalType: "struct PaymentsConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "enum Payment.PaymentTypes",
        name: "",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "alphaduneReservoirs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "alphadune",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "enum Payment.PaymentTypes",
        name: "paymentType",
        type: "uint8",
      },
    ],
    name: "fillRewardsReservoir",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "enum Payment.PaymentTypes",
        name: "paymentType",
        type: "uint8",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Payment.PaymentTypes",
        name: "",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rewardsReservoirs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
        ],
        internalType: "struct PaymentsConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610ae1380380610ae183398101604081905261002f916100f6565b806100393361008a565b600180558051600480546001600160a01b03199081166001600160a01b039384161790915560208301516005805483169184169190911790556040909201516006805490931691161790555061016f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f157600080fd5b919050565b60006060828403121561010857600080fd5b604051606081016001600160401b038111828210171561013857634e487b7160e01b600052604160045260246000fd5b604052610144836100da565b8152610152602084016100da565b6020820152610163604084016100da565b60408201529392505050565b6109638061017e6000396000f3fe6080604052600436106100915760003560e01c8063c01f59c211610063578063d8de65871161004b578063d8de6587146101a6578063edcfb3f314610217578063f2fde38b1461022a57005b8063c01f59c214610173578063d6dc0dfd1461018657005b8063715018a61461009a5780638da5cb5b146100af57806398f66e3f146100e9578063a1575fe21461013557005b3661009857005b005b3480156100a657600080fd5b5061009861024a565b3480156100bb57600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100f557600080fd5b50610127610104366004610641565b600360209081526000938452604080852082529284528284209052825290205481565b6040519081526020016100e0565b34801561014157600080fd5b50610127610150366004610641565b600260209081526000938452604080852082529284528284209052825290205481565b610098610181366004610765565b61025e565b34801561019257600080fd5b506100986101a136600461080a565b61035c565b3480156101b257600080fd5b506004546005546006546101e09273ffffffffffffffffffffffffffffffffffffffff908116928116911683565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529216918101919091526060016100e0565b610098610225366004610876565b6103d2565b34801561023657600080fd5b506100986102453660046108fb565b61045c565b610252610513565b61025c6000610594565b565b6002600154036102cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560065460405160009173ffffffffffffffffffffffffffffffffffffffff1690610301908390369061091d565b600060405180830381855af49150503d806000811461033c576040519150601f19603f3d011682016040523d82523d6000602084013e610341565b606091505b505090508061034f57600080fd5b5050600180555050505050565b610364610513565b8051600480547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416179091556020830151600580548316918416919091179055604090920151600680549093169116179055565b6103da610513565b60055460405160009173ffffffffffffffffffffffffffffffffffffffff1690610407908390369061091d565b600060405180830381855af49150503d8060008114610442576040519150601f19603f3d011682016040523d82523d6000602084013e610447565b606091505b505090508061045557600080fd5b5050505050565b610464610513565b73ffffffffffffffffffffffffffffffffffffffff8116610507576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102c6565b61051081610594565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461025c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102c6565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356004811061061857600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461061857600080fd5b60008060006060848603121561065657600080fd5b61065f84610609565b925061066d6020850161061d565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126106bd57600080fd5b8135602067ffffffffffffffff808311156106da576106da61067d565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561071d5761071d61067d565b60405293845285810183019383810192508785111561073b57600080fd5b83870191505b8482101561075a57813583529183019190830190610741565b979650505050505050565b60008060008060008060c0878903121561077e57600080fd5b6107878761061d565b95506107956020880161061d565b94506107a36040880161061d565b9350606087013567ffffffffffffffff808211156107c057600080fd5b6107cc8a838b016106ac565b945060808901359150808211156107e257600080fd5b506107ef89828a016106ac565b9250506107fe60a08801610609565b90509295509295509295565b60006060828403121561081c57600080fd5b6040516060810181811067ffffffffffffffff8211171561083f5761083f61067d565b60405261084b8361061d565b81526108596020840161061d565b602082015261086a6040840161061d565b60408201529392505050565b6000806000806080858703121561088c57600080fd5b6108958561061d565b9350602085013567ffffffffffffffff808211156108b257600080fd5b6108be888389016106ac565b945060408701359150808211156108d457600080fd5b506108e1878288016106ac565b9250506108f060608601610609565b905092959194509250565b60006020828403121561090d57600080fd5b6109168261061d565b9392505050565b818382376000910190815291905056fea2646970667358221220cafb30331fee07f9b72f2ae6f18b0269c941cb3cfe4e3fc31e599027da43607964736f6c63430008110033";

type PaymentsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Payments__factory extends ContractFactory {
  constructor(...args: PaymentsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Payments";
  }

  deploy(
    input: PaymentsConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Payments> {
    return super.deploy(input, overrides || {}) as Promise<Payments>;
  }
  getDeployTransaction(
    input: PaymentsConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Payments {
    return super.attach(address) as Payments;
  }
  connect(signer: Signer): Payments__factory {
    return super.connect(signer) as Payments__factory;
  }
  static readonly contractName: "Payments";
  public readonly contractName: "Payments";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentsInterface {
    return new utils.Interface(_abi) as PaymentsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Payments {
    return new Contract(address, _abi, signerOrProvider) as Payments;
  }
}
