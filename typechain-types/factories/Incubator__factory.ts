/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Incubator,
  IncubatorInterface,
  IncubatorConstructor,
} from "../Incubator";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "genetics",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
          {
            internalType: "address",
            name: "races",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "allowed",
            type: "address[]",
          },
          {
            internalType: "uint32",
            name: "secondsToMaturity",
            type: "uint32",
          },
        ],
        internalType: "struct IncubatorConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "hound1Id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "maleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "femaleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "generation",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "birthDate",
            type: "uint256",
          },
          {
            internalType: "uint32[54]",
            name: "geneticSequence",
            type: "uint32[54]",
          },
          {
            internalType: "string",
            name: "extensionTraits",
            type: "string",
          },
          {
            internalType: "enum Specie.Enum",
            name: "specie",
            type: "uint8",
          },
        ],
        internalType: "struct HoundIdentity.Struct",
        name: "hound1",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "hound2Id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "maleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "femaleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "generation",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "birthDate",
            type: "uint256",
          },
          {
            internalType: "uint32[54]",
            name: "geneticSequence",
            type: "uint32[54]",
          },
          {
            internalType: "string",
            name: "extensionTraits",
            type: "string",
          },
          {
            internalType: "enum Specie.Enum",
            name: "specie",
            type: "uint8",
          },
        ],
        internalType: "struct HoundIdentity.Struct",
        name: "hound2",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "onId",
        type: "uint256",
      },
    ],
    name: "breedHounds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "randomness",
        type: "address",
      },
      {
        internalType: "address",
        name: "genetics",
        type: "address",
      },
      {
        internalType: "address",
        name: "gamification",
        type: "address",
      },
      {
        internalType: "address",
        name: "races",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "secondsToMaturity",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "theId",
        type: "uint256",
      },
    ],
    name: "getIdentity",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "maleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "femaleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "generation",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "birthDate",
            type: "uint256",
          },
          {
            internalType: "uint32[54]",
            name: "geneticSequence",
            type: "uint32[54]",
          },
          {
            internalType: "string",
            name: "extensionTraits",
            type: "string",
          },
          {
            internalType: "enum Specie.Enum",
            name: "specie",
            type: "uint8",
          },
        ],
        internalType: "struct HoundIdentity.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "houndsIdentity",
    outputs: [
      {
        internalType: "uint256",
        name: "maleParent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "femaleParent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "generation",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "birthDate",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "extensionTraits",
        type: "string",
      },
      {
        internalType: "enum Specie.Enum",
        name: "specie",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "genetics",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
          {
            internalType: "address",
            name: "races",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "allowed",
            type: "address[]",
          },
          {
            internalType: "uint32",
            name: "secondsToMaturity",
            type: "uint32",
          },
        ],
        internalType: "struct IncubatorConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "theId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "maleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "femaleParent",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "generation",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "birthDate",
            type: "uint256",
          },
          {
            internalType: "uint32[54]",
            name: "geneticSequence",
            type: "uint32[54]",
          },
          {
            internalType: "string",
            name: "extensionTraits",
            type: "string",
          },
          {
            internalType: "enum Specie.Enum",
            name: "specie",
            type: "uint8",
          },
        ],
        internalType: "struct HoundIdentity.Struct",
        name: "identity",
        type: "tuple",
      },
    ],
    name: "setIdentity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001928380380620019288339810160408190526200003491620003b7565b80620000403362000107565b8051600180546001600160a01b03199081166001600160a01b0393841617825560208085015160028054841691861691909117905560408501516003805484169186169190911790556060850151600480548416918616919091179055608085015160058054909316941693909317905560a083015180518493620000cb9260069291019062000216565b5060c091909101516006909101805463ffffffff191663ffffffff90921691909117905560a0810151620000ff9062000157565b5050620004db565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b81518110156200021257600860008383815181106200017d576200017d6200049d565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff161560086000848481518110620001cd57620001cd6200049d565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556200020a81620004b3565b90506200015a565b5050565b8280548282559060005260206000209081019282156200026e579160200282015b828111156200026e57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000237565b506200027c92915062000280565b5090565b5b808211156200027c576000815560010162000281565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715620002d257620002d262000297565b60405290565b80516001600160a01b0381168114620002f057600080fd5b919050565b600082601f8301126200030757600080fd5b815160206001600160401b038083111562000326576200032662000297565b8260051b604051601f19603f830116810181811084821117156200034e576200034e62000297565b6040529384528581018301938381019250878511156200036d57600080fd5b83870191505b8482101562000397576200038782620002d8565b8352918301919083019062000373565b979650505050505050565b805163ffffffff81168114620002f057600080fd5b600060208284031215620003ca57600080fd5b81516001600160401b0380821115620003e257600080fd5b9083019060e08286031215620003f757600080fd5b62000401620002ad565b6200040c83620002d8565b81526200041c60208401620002d8565b60208201526200042f60408401620002d8565b60408201526200044260608401620002d8565b60608201526200045560808401620002d8565b608082015260a0830151828111156200046d57600080fd5b6200047b87828601620002f5565b60a0830152506200048f60c08401620003a2565b60c082015295945050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620004d457634e487b7160e01b600052601160045260246000fd5b5060010190565b61143d80620004eb6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063c2115d4d11610076578063d8de65871161005b578063d8de65871461018a578063e0eb2c5614610222578063f2fde38b1461024757600080fd5b8063c2115d4d14610144578063d63a8e111461015757600080fd5b80637f1f59bf116100a75780637f1f59bf146100e057806385e3f058146100f35780638da5cb5b1461011c57600080fd5b806307b371c7146100c3578063715018a6146100d8575b600080fd5b6100d66100d1366004610d93565b61025a565b005b6100d66102dd565b6100d66100ee366004610e12565b6102f1565b610106610101366004610e59565b6103b9565b6040516101139190610f40565b60405180910390f35b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610113565b6100d6610152366004611082565b61052e565b61017a610165366004611155565b60086020526000908152604090205460ff1681565b6040519015158152602001610113565b6001546002546003546004546005546007546101cd9573ffffffffffffffffffffffffffffffffffffffff90811695811694811693811692169063ffffffff1686565b6040805173ffffffffffffffffffffffffffffffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015263ffffffff90911660a082015260c001610113565b610235610230366004610e59565b610634565b60405161011396959493929190611177565b6100d6610255366004611155565b6106f6565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff169061028790839036906111b1565b600060405180830381855af49150503d80600081146102c2576040519150601f19603f3d011682016040523d82523d6000602084013e6102c7565b606091505b50509050806102d557600080fd5b505050505050565b6102e56107af565b6102ef6000610830565b565b3360009081526008602052604090205460ff1661030d57600080fd5b60008281526009602090815260409182902083518155908301516001820155908201516002820155606082015160038201556080820151829190610357906004830190603661099f565b5060a0820151600b82019061036c908261125f565b5060c0820151600c820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360068111156103ae576103ae610ed6565b021790555050505050565b6103c1610a3b565b6000828152600960209081526040808320815160e081018352815481526001820154938101939093526002810154838301526003810154606084015281516106c0810192839052929390926080850192909160048501916036918390855b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161041f57905050505050508152602001600b82018054610474906111c1565b80601f01602080910402602001604051908101604052809291908181526020018280546104a0906111c1565b80156104ed5780601f106104c2576101008083540402835291602001916104ed565b820191906000526020600020905b8154815290600101906020018083116104d057829003601f168201915b5050509183525050600c82015460209091019060ff16600681111561051457610514610ed6565b600681111561052557610525610ed6565b90525092915050565b6105366107af565b8051600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617825560208085015160028054841691861691909117905560408501516003805484169186169190911790556060850151600480548416918616919091179055608085015160058054909316941693909317905560a0830151805184936105e492600692910190610a7d565b5060c09190910151600690910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff90921691909117905560a0810151610631906108a5565b50565b60096020526000908152604090208054600182015460028301546003840154600b85018054949593949293919261066a906111c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610696906111c1565b80156106e35780601f106106b8576101008083540402835291602001916106e3565b820191906000526020600020905b8154815290600101906020018083116106c657829003601f168201915b505050600c909301549192505060ff1686565b6106fe6107af565b73ffffffffffffffffffffffffffffffffffffffff81166107a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61063181610830565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161079d565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60005b815181101561099b57600860008383815181106108c7576108c7611379565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156008600084848151811061092e5761092e611379565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610994816113a8565b90506108a8565b5050565b600783019183908215610a2b5791602002820160005b838211156109f957835183826101000a81548163ffffffff021916908363ffffffff16021790555092602001926004016020816003010492830192600103026109b5565b8015610a295782816101000a81549063ffffffff02191690556004016020816003010492830192600103026109f9565b505b50610a37929150610af7565b5090565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001610a6a610b0c565b8152606060208201526040016000905290565b828054828255906000526020600020908101928215610a2b579160200282015b82811115610a2b57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610a9d565b5b80821115610a375760008155600101610af8565b604051806106c001604052806036906020820280368337509192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715610b7d57610b7d610b2b565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610bca57610bca610b2b565b604052919050565b803563ffffffff81168114610be657600080fd5b919050565b600082601f830112610bfc57600080fd5b6040516106c080820182811067ffffffffffffffff82111715610c2157610c21610b2b565b60405283018185821115610c3457600080fd5b845b82811015610c5557610c4781610bd2565b825260209182019101610c36565b509195945050505050565b600082601f830112610c7157600080fd5b813567ffffffffffffffff811115610c8b57610c8b610b2b565b610cbc60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610b83565b818152846020838601011115610cd157600080fd5b816020850160208301376000918101602001919091529392505050565b803560078110610be657600080fd5b60006107808284031215610d1057600080fd5b610d18610b5a565b905081358152602082013560208201526040820135604082015260608201356060820152610d498360808401610beb565b608082015261074082013567ffffffffffffffff811115610d6957600080fd5b610d7584828501610c60565b60a083015250610d886107608301610cee565b60c082015292915050565b600080600080600060a08688031215610dab57600080fd5b85359450602086013567ffffffffffffffff80821115610dca57600080fd5b610dd689838a01610cfd565b9550604088013594506060880135915080821115610df357600080fd5b50610e0088828901610cfd565b95989497509295608001359392505050565b60008060408385031215610e2557600080fd5b82359150602083013567ffffffffffffffff811115610e4357600080fd5b610e4f85828601610cfd565b9150509250929050565b600060208284031215610e6b57600080fd5b5035919050565b6000815180845260005b81811015610e9857602081850181015186830182015201610e7c565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60078110610f3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600060208083528351818401528084015160408401526040840151606084015260608401516080840152608084015160a0840160005b6036811015610f9957825163ffffffff1682529183019190830190600101610f76565b5050505060a083015161078080610760850152610fba6107a0850183610e72565b915060c0850151610fcd82860182610f05565b5090949350505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610be657600080fd5b600082601f83011261100c57600080fd5b8135602067ffffffffffffffff82111561102857611028610b2b565b8160051b611037828201610b83565b928352848101820192828101908785111561105157600080fd5b83870192505b848310156110775761106883610fd7565b82529183019190830190611057565b979650505050505050565b60006020828403121561109457600080fd5b813567ffffffffffffffff808211156110ac57600080fd5b9083019060e082860312156110c057600080fd5b6110c8610b5a565b6110d183610fd7565b81526110df60208401610fd7565b60208201526110f060408401610fd7565b604082015261110160608401610fd7565b606082015261111260808401610fd7565b608082015260a08301358281111561112957600080fd5b61113587828601610ffb565b60a08301525061114760c08401610bd2565b60c082015295945050505050565b60006020828403121561116757600080fd5b61117082610fd7565b9392505050565b86815285602082015284604082015283606082015260c0608082015260006111a260c0830185610e72565b905061107760a0830184610f05565b8183823760009101908152919050565b600181811c908216806111d557607f821691505b60208210810361120e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561125a57600081815260208120601f850160051c8101602086101561123b5750805b601f850160051c820191505b818110156102d557828155600101611247565b505050565b815167ffffffffffffffff81111561127957611279610b2b565b61128d8161128784546111c1565b84611214565b602080601f8311600181146112e057600084156112aa5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556102d5565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561132d5788860151825594840194600190910190840161130e565b508582101561136957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611400577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea264697066735822122087baf8ed86d4ee601be3f59dc21175cdc8542c986fbb9914a4ebd15565ae60bb64736f6c63430008110033";

type IncubatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IncubatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Incubator__factory extends ContractFactory {
  constructor(...args: IncubatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Incubator";
  }

  deploy(
    input: IncubatorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Incubator> {
    return super.deploy(input, overrides || {}) as Promise<Incubator>;
  }
  getDeployTransaction(
    input: IncubatorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Incubator {
    return super.attach(address) as Incubator;
  }
  connect(signer: Signer): Incubator__factory {
    return super.connect(signer) as Incubator__factory;
  }
  static readonly contractName: "Incubator";
  public readonly contractName: "Incubator";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IncubatorInterface {
    return new utils.Interface(_abi) as IncubatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Incubator {
    return new Contract(address, _abi, signerOrProvider) as Incubator;
  }
}
