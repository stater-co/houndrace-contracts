/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Shop, ShopInterface, ShopConstructor } from "../Shop";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "discountsReceiverWallet",
            type: "address",
          },
          {
            internalType: "bytes4[][]",
            name: "targets",
            type: "bytes4[][]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToUsePerUsableDiscount",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "NewDiscount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "calculateDiscount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "discountsReceiverWallet",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToUsePerUsableDiscount",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "createDiscount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToUsePerUsableDiscount",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "discountId",
        type: "uint256",
      },
    ],
    name: "editDiscount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "discountsReceiverWallet",
            type: "address",
          },
          {
            internalType: "bytes4[][]",
            name: "targets",
            type: "bytes4[][]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "whitelists",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016002553480156200001657600080fd5b506040516200188d3803806200188d8339810160408190526200003991620005fc565b805160808201518291906200004e336200020b565b80518251146200005d57600080fd5b60005b8251811015620001765760005b82828151811062000082576200008262000732565b602002602001015151811015620001625760016000858481518110620000ac57620000ac62000732565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020838381518110620000e957620000e962000732565b6020026020010151828151811062000105576200010562000732565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c919091029190911790556200015a8162000748565b90506200006d565b506200016e8162000748565b905062000060565b50508151805183925060039162000193918391602001906200025b565b506020828101516001830180546001600160a01b039283166001600160a01b0319918216179091556040850151600285018054918416918316919091179055606085015160038501805491909316911617905560808301518051620001ff9260048501920190620002c5565b50905050505062000770565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620002b3579160200282015b82811115620002b357825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200027c565b50620002c192915062000325565b5090565b82805482825590600052602060002090810192821562000317579160200282015b82811115620003175782518051620003069184916020909101906200033c565b5091602001919060010190620002e6565b50620002c1929150620003ea565b5b80821115620002c1576000815560010162000326565b82805482825590600052602060002090600701600890048101928215620002b35791602002820160005b83821115620003a957835183826101000a81548163ffffffff021916908360e01c0217905550926020019260040160208160030104928301926001030262000366565b8015620003db5782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620003a9565b5050620002c192915062000325565b80821115620002c15760006200040182826200040b565b50600101620003ea565b50805460008255600701600890049060005260206000209081019062000432919062000325565b50565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171562000470576200047062000435565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004a157620004a162000435565b604052919050565b60006001600160401b03821115620004c557620004c562000435565b5060051b60200190565b80516001600160a01b0381168114620004e757600080fd5b919050565b600082601f830112620004fe57600080fd5b81516020620005176200051183620004a9565b62000476565b828152600592831b85018201928282019190878511156200053757600080fd5b8387015b85811015620005ef5780516001600160401b038111156200055c5760008081fd5b8801603f81018a136200056f5760008081fd5b858101516040620005846200051183620004a9565b82815291851b8301810191888101908d841115620005a25760008081fd5b938201935b83851015620005dd57845192506001600160e01b031983168314620005cc5760008081fd5b8282529389019390890190620005a7565b8852505050938501935084016200053b565b5090979650505050505050565b600060208083850312156200061057600080fd5b82516001600160401b03808211156200062857600080fd5b9084019060a082870312156200063d57600080fd5b620006476200044b565b8251828111156200065757600080fd5b8301601f810188136200066957600080fd5b80516200067a6200051182620004a9565b81815260059190911b8201860190868101908a8311156200069a57600080fd5b928701925b82841015620006c357620006b384620004cf565b825292870192908701906200069f565b845250620006d6915050838501620004cf565b84820152620006e860408401620004cf565b6040820152620006fb60608401620004cf565b606082015260808301519350818411156200071557600080fd5b6200072387858501620004ec565b60808201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200076957634e487b7160e01b600052601160045260246000fd5b5060010190565b61110d80620007806000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063af640d0f11610076578063d4b1d7561161005b578063d4b1d7561461018e578063d8de6587146101a1578063f2fde38b1461020557600080fd5b8063af640d0f14610172578063c0d94d1a1461017b57600080fd5b80637c5ff21f116100a75780637c5ff21f146101165780638da5cb5b14610129578063ad6a87451461015157600080fd5b80635b19e294146100c3578063715018a61461010c575b600080fd5b6100d66100d1366004610aee565b610218565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b61011461025e565b005b610114610124366004610d52565b610272565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016461015f366004610d87565b6102f1565b604051908152602001610103565b61016460025481565b610114610189366004610ebc565b61038d565b61011461019c366004610fdb565b610454565b6004546005546006546101ce9273ffffffffffffffffffffffffffffffffffffffff908116928116911683565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529284166020840152921691810191909152606001610103565b610114610213366004610d87565b6104d4565b6001602052816000526040600020818154811061023457600080fd5b9060005260206000209060089182820401919006600402915091509054906101000a900460e01b81565b61026661058d565b610270600061060e565b565b60055460405160009173ffffffffffffffffffffffffffffffffffffffff169061029f9083903690611020565b600060405180830381855af49150503d80600081146102da576040519150601f19603f3d011682016040523d82523d6000602084013e6102df565b606091505b50509050806102ed57600080fd5b5050565b6004546040516000918291829173ffffffffffffffffffffffffffffffffffffffff16906103229083903690611020565b600060405180830381855af49150503d806000811461035d576040519150601f19603f3d011682016040523d82523d6000602084013e610362565b606091505b50915091508161037157600080fd5b808060200190518101906103859190611030565b949350505050565b61039561058d565b8051805182916003916103af9183916020909101906108e4565b5060208281015160018301805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155604085015160028501805491841691831691909117905560608501516003850180549190931691161790556080830151805161043e926004850192019061096e565b5050815160808301516104519250610683565b50565b60055460405160009173ffffffffffffffffffffffffffffffffffffffff16906104819083903690611020565b600060405180830381855af49150503d80600081146104bc576040519150601f19603f3d011682016040523d82523d6000602084013e6104c1565b606091505b50509050806104cf57600080fd5b505050565b6104dc61058d565b73ffffffffffffffffffffffffffffffffffffffff8116610584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6104518161060e565b60005473ffffffffffffffffffffffffffffffffffffffff163314610270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161057b565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805182511461069157600080fd5b60005b82518110156104cf5760005b8282815181106106b2576106b2611049565b6020026020010151518110156108d357600160008584815181106106d8576106d8611049565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081106107f6576001600085848151811061073a5761073a611049565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083838151811061078e5761078e611049565b602002602001015182815181106107a7576107a7611049565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c919091029190911790556108c3565b82828151811061080857610808611049565b6020026020010151818151811061082157610821611049565b60200260200101516001600086858151811061083f5761083f611049565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061089257610892611049565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505b6108cc81611078565b90506106a0565b506108dd81611078565b9050610694565b82805482825590600052602060002090810192821561095e579160200282015b8281111561095e57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610904565b5061096a9291506109c7565b5090565b8280548282559060005260206000209081019282156109bb579160200282015b828111156109bb57825180516109ab9184916020909101906109dc565b509160200191906001019061098e565b5061096a929150610a83565b5b8082111561096a57600081556001016109c8565b8280548282559060005260206000209060070160089004810192821561095e5791602002820160005b83821115610a4657835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610a05565b8015610a765782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610a46565b505061096a9291506109c7565b8082111561096a576000610a978282610aa0565b50600101610a83565b50805460008255600701600890049060005260206000209081019061045191906109c7565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ae957600080fd5b919050565b60008060408385031215610b0157600080fd5b610b0a83610ac5565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715610b6b57610b6b610b18565b60405290565b60405160a0810167ffffffffffffffff81118282101715610b6b57610b6b610b18565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610bdb57610bdb610b18565b604052919050565b600067ffffffffffffffff821115610bfd57610bfd610b18565b5060051b60200190565b600082601f830112610c1857600080fd5b81356020610c2d610c2883610be3565b610b94565b82815260059290921b84018101918181019086841115610c4c57600080fd5b8286015b84811015610c675780358352918301918301610c50565b509695505050505050565b803563ffffffff81168114610ae957600080fd5b803560ff81168114610ae957600080fd5b80358015158114610ae957600080fd5b60006101008284031215610cba57600080fd5b610cc2610b47565b9050610ccd82610ac5565b8152602082013567ffffffffffffffff811115610ce957600080fd5b610cf584828501610c07565b602083015250604082013560408201526060820135606082015260808201356080820152610d2560a08301610c72565b60a0820152610d3660c08301610c86565b60c0820152610d4760e08301610c97565b60e082015292915050565b600060208284031215610d6457600080fd5b813567ffffffffffffffff811115610d7b57600080fd5b61038584828501610ca7565b600060208284031215610d9957600080fd5b610da282610ac5565b9392505050565b600082601f830112610dba57600080fd5b81356020610dca610c2883610be3565b828152600592831b8501820192828201919087851115610de957600080fd5b8387015b85811015610eaf57803567ffffffffffffffff811115610e0d5760008081fd5b8801603f81018a13610e1f5760008081fd5b858101356040610e31610c2883610be3565b82815291851b8301810191888101908d841115610e4e5760008081fd5b938201935b83851015610e9e57843592507fffffffff0000000000000000000000000000000000000000000000000000000083168314610e8e5760008081fd5b8282529389019390890190610e53565b885250505093850193508401610ded565b5090979650505050505050565b60006020808385031215610ecf57600080fd5b823567ffffffffffffffff80821115610ee757600080fd5b9084019060a08287031215610efb57600080fd5b610f03610b71565b823582811115610f1257600080fd5b8301601f81018813610f2357600080fd5b8035610f31610c2882610be3565b81815260059190911b8201860190868101908a831115610f5057600080fd5b928701925b82841015610f7557610f6684610ac5565b82529287019290870190610f55565b845250610f86915050838501610ac5565b84820152610f9660408401610ac5565b6040820152610fa760608401610ac5565b60608201526080830135935081841115610fc057600080fd5b610fcc87858501610da9565b60808201529695505050505050565b60008060408385031215610fee57600080fd5b823567ffffffffffffffff81111561100557600080fd5b61101185828601610ca7565b95602094909401359450505050565b8183823760009101908152919050565b60006020828403121561104257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036110d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220d8cf0a26681debeb8153e572f78b986f57225a3e0ec7d487c3e2dd0e509e140b64736f6c63430008110033";

type ShopConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShopConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Shop__factory extends ContractFactory {
  constructor(...args: ShopConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Shop";
  }

  deploy(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Shop> {
    return super.deploy(input, overrides || {}) as Promise<Shop>;
  }
  getDeployTransaction(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Shop {
    return super.attach(address) as Shop;
  }
  connect(signer: Signer): Shop__factory {
    return super.connect(signer) as Shop__factory;
  }
  static readonly contractName: "Shop";
  public readonly contractName: "Shop";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShopInterface {
    return new utils.Interface(_abi) as ShopInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Shop {
    return new Contract(address, _abi, signerOrProvider) as Shop;
  }
}
