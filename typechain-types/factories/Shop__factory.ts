/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Shop, ShopInterface, ShopConstructor } from "../Shop";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "targets",
            type: "bytes4[]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "NewDiscount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "calculateDiscount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "alphadune",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "createDiscount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "theId",
        type: "uint256",
      },
    ],
    name: "editDiscount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "targets",
            type: "bytes4[]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016002553480156200001657600080fd5b506040516200132d3803806200132d833981016040819052620000399162000448565b805160808201518291906200004e336200018c565b80518251146200005d57600080fd5b60005b8251811015620000f7578181815181106200007f576200007f6200057e565b602002602001015160016000858481518110620000a057620000a06200057e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555080620000ef9062000594565b905062000060565b5050815180518392506003916200011491839160200190620001dc565b506020828101516001830180546001600160a01b039283166001600160a01b031991821617909155604085015160028501805491841691831691909117905560608501516003850180549190931691161790556080830151805162000180926004850192019062000246565b509050505050620005bc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000234579160200282015b828111156200023457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001fd565b5062000242929150620002ef565b5090565b82805482825590600052602060002090600701600890048101928215620002345791602002820160005b83821115620002b357835183826101000a81548163ffffffff021916908360e01c0217905550926020019260040160208160030104928301926001030262000270565b8015620002e55782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620002b3565b5050620002429291505b5b80821115620002425760008155600101620002f0565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171562000341576200034162000306565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000372576200037262000306565b604052919050565b60006001600160401b0382111562000396576200039662000306565b5060051b60200190565b80516001600160a01b0381168114620003b857600080fd5b919050565b600082601f830112620003cf57600080fd5b81516020620003e8620003e2836200037a565b62000347565b82815260059290921b840181019181810190868411156200040857600080fd5b8286015b848110156200043d5780516001600160e01b0319811681146200042f5760008081fd5b83529183019183016200040c565b509695505050505050565b600060208083850312156200045c57600080fd5b82516001600160401b03808211156200047457600080fd5b9084019060a082870312156200048957600080fd5b620004936200031c565b825182811115620004a357600080fd5b8301601f81018813620004b557600080fd5b8051620004c6620003e2826200037a565b81815260059190911b8201860190868101908a831115620004e657600080fd5b928701925b828410156200050f57620004ff84620003a0565b82529287019290870190620004eb565b84525062000522915050838501620003a0565b848201526200053460408401620003a0565b60408201526200054760608401620003a0565b606082015260808301519350818411156200056157600080fd5b6200056f87858501620003bd565b60808201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620005b557634e487b7160e01b600052601160045260246000fd5b5060010190565b610d6180620005cc6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638da5cb5b11610076578063af640d0f1161005b578063af640d0f14610139578063d8de658714610142578063f2fde38b146101a657600080fd5b80638da5cb5b146100eb578063ad6a87451461011857600080fd5b80632a45ccb5146100a85780633d278784146100bd578063715018a6146100d057806381c461ab146100d8575b600080fd5b6100bb6100b6366004610a2f565b6101b9565b005b6100bb6100cb366004610afe565b610239565b6100bb610300565b6100bb6100e6366004610c1d565b610314565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61012b610126366004610c52565b610393565b60405190815260200161010f565b61012b60025481565b60045460055460065461016f9273ffffffffffffffffffffffffffffffffffffffff908116928116911683565b6040805173ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292169181019190915260600161010f565b6100bb6101b4366004610c52565b61042f565b60055460405160009173ffffffffffffffffffffffffffffffffffffffff16906101e69083903690610c74565b600060405180830381855af49150503d8060008114610221576040519150601f19603f3d011682016040523d82523d6000602084013e610226565b606091505b505090508061023457600080fd5b505050565b6102416104e8565b80518051829160039161025b918391602090910190610696565b5060208281015160018301805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560408501516002850180549184169183169190911790556060850151600385018054919093169116179055608083015180516102ea9260048501920190610720565b5050815160808301516102fd9250610569565b50565b6103086104e8565b6103126000610621565b565b60055460405160009173ffffffffffffffffffffffffffffffffffffffff16906103419083903690610c74565b600060405180830381855af49150503d806000811461037c576040519150601f19603f3d011682016040523d82523d6000602084013e610381565b606091505b505090508061038f57600080fd5b5050565b6004546040516000918291829173ffffffffffffffffffffffffffffffffffffffff16906103c49083903690610c74565b600060405180830381855af49150503d80600081146103ff576040519150601f19603f3d011682016040523d82523d6000602084013e610404565b606091505b50915091508161041357600080fd5b808060200190518101906104279190610c84565b949350505050565b6104376104e8565b73ffffffffffffffffffffffffffffffffffffffff81166104df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102fd81610621565b60005473ffffffffffffffffffffffffffffffffffffffff163314610312576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d6565b805182511461057757600080fd5b60005b82518110156102345781818151811061059557610595610c9d565b6020026020010151600160008584815181106105b3576105b3610c9d565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055508061061a90610ccc565b905061057a565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610710579160200282015b8281111561071057825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906106b6565b5061071c9291506107c3565b5090565b828054828255906000526020600020906007016008900481019282156107105791602002820160005b8382111561078a57835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610749565b80156107ba5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261078a565b505061071c9291505b5b8082111561071c57600081556001016107c4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561082a5761082a6107d8565b60405290565b60405160a0810167ffffffffffffffff8111828210171561082a5761082a6107d8565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561089a5761089a6107d8565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146108c657600080fd5b919050565b600067ffffffffffffffff8211156108e5576108e56107d8565b5060051b60200190565b600082601f83011261090057600080fd5b81356020610915610910836108cb565b610853565b82815260059290921b8401810191818101908684111561093457600080fd5b8286015b8481101561094f5780358352918301918301610938565b509695505050505050565b803563ffffffff811681146108c657600080fd5b803560ff811681146108c657600080fd5b803580151581146108c657600080fd5b600060e082840312156109a157600080fd5b6109a9610807565b90506109b4826108a2565b8152602082013567ffffffffffffffff8111156109d057600080fd5b6109dc848285016108ef565b6020830152506040820135604082015260608201356060820152610a026080830161095a565b6080820152610a1360a0830161096e565b60a0820152610a2460c0830161097f565b60c082015292915050565b60008060408385031215610a4257600080fd5b823567ffffffffffffffff811115610a5957600080fd5b610a658582860161098f565b95602094909401359450505050565b600082601f830112610a8557600080fd5b81356020610a95610910836108cb565b82815260059290921b84018101918181019086841115610ab457600080fd5b8286015b8481101561094f5780357fffffffff0000000000000000000000000000000000000000000000000000000081168114610af15760008081fd5b8352918301918301610ab8565b60006020808385031215610b1157600080fd5b823567ffffffffffffffff80821115610b2957600080fd5b9084019060a08287031215610b3d57600080fd5b610b45610830565b823582811115610b5457600080fd5b8301601f81018813610b6557600080fd5b8035610b73610910826108cb565b81815260059190911b8201860190868101908a831115610b9257600080fd5b928701925b82841015610bb757610ba8846108a2565b82529287019290870190610b97565b845250610bc89150508385016108a2565b84820152610bd8604084016108a2565b6040820152610be9606084016108a2565b60608201526080830135935081841115610c0257600080fd5b610c0e87858501610a74565b60808201529695505050505050565b600060208284031215610c2f57600080fd5b813567ffffffffffffffff811115610c4657600080fd5b6104278482850161098f565b600060208284031215610c6457600080fd5b610c6d826108a2565b9392505050565b8183823760009101908152919050565b600060208284031215610c9657600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d24577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220a83d6fc270a516f3b222bd168c6a02376ccb4994faea0277012c1832fa8ce61164736f6c63430008110033";

type ShopConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShopConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Shop__factory extends ContractFactory {
  constructor(...args: ShopConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Shop";
  }

  deploy(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Shop> {
    return super.deploy(input, overrides || {}) as Promise<Shop>;
  }
  getDeployTransaction(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Shop {
    return super.attach(address) as Shop;
  }
  connect(signer: Signer): Shop__factory {
    return super.connect(signer) as Shop__factory;
  }
  static readonly contractName: "Shop";
  public readonly contractName: "Shop";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShopInterface {
    return new utils.Interface(_abi) as ShopInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Shop {
    return new Contract(address, _abi, signerOrProvider) as Shop;
  }
}
