/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Shop, ShopInterface, ShopConstructor } from "../Shop";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "targets",
            type: "bytes4[]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "NewDiscount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "calculateDiscount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "checkWhiteList",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "alphadune",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "createDiscount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "theId",
        type: "uint256",
      },
    ],
    name: "editDiscount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "targets",
            type: "bytes4[]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "operators",
        type: "address[]",
      },
      {
        internalType: "bytes4[]",
        name: "targets",
        type: "bytes4[]",
      },
    ],
    name: "updateWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016002553480156200001657600080fd5b506040516200146338038062001463833981016040819052620000399162000448565b805160808201518291906200004e336200018c565b80518251146200005d57600080fd5b60005b8251811015620000f7578181815181106200007f576200007f6200057e565b602002602001015160016000858481518110620000a057620000a06200057e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555080620000ef9062000594565b905062000060565b5050815180518392506003916200011491839160200190620001dc565b506020828101516001830180546001600160a01b039283166001600160a01b031991821617909155604085015160028501805491841691831691909117905560608501516003850180549190931691161790556080830151805162000180926004850192019062000246565b509050505050620005bc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000234579160200282015b828111156200023457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001fd565b5062000242929150620002ef565b5090565b82805482825590600052602060002090600701600890048101928215620002345791602002820160005b83821115620002b357835183826101000a81548163ffffffff021916908360e01c0217905550926020019260040160208160030104928301926001030262000270565b8015620002e55782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620002b3565b5050620002429291505b5b80821115620002425760008155600101620002f0565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171562000341576200034162000306565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000372576200037262000306565b604052919050565b60006001600160401b0382111562000396576200039662000306565b5060051b60200190565b80516001600160a01b0381168114620003b857600080fd5b919050565b600082601f830112620003cf57600080fd5b81516020620003e8620003e2836200037a565b62000347565b82815260059290921b840181019181810190868411156200040857600080fd5b8286015b848110156200043d5780516001600160e01b0319811681146200042f5760008081fd5b83529183019183016200040c565b509695505050505050565b600060208083850312156200045c57600080fd5b82516001600160401b03808211156200047457600080fd5b9084019060a082870312156200048957600080fd5b620004936200031c565b825182811115620004a357600080fd5b8301601f81018813620004b557600080fd5b8051620004c6620003e2826200037a565b81815260059190911b8201860190868101908a831115620004e657600080fd5b928701925b828410156200050f57620004ff84620003a0565b82529287019290870190620004eb565b84525062000522915050838501620003a0565b848201526200053460408401620003a0565b60408201526200054760608401620003a0565b606082015260808301519350818411156200056157600080fd5b6200056f87858501620003bd565b60808201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620005b557634e487b7160e01b600052601160045260246000fd5b5060010190565b610e9780620005cc6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063af640d0f1161005b578063af640d0f14610209578063d8de658714610212578063f2fde38b1461027657600080fd5b80638da5cb5b146101245780639cce37c614610151578063ad6a8745146101e857600080fd5b80633d278784116100b25780633d278784146100f6578063715018a61461010957806381c461ab1461011157600080fd5b80632a45ccb5146100ce578063357d5142146100e3575b600080fd5b6100e16100dc366004610afa565b610289565b005b6100e16100f1366004610c2b565b610309565b6100e1610104366004610c8f565b6103c9565b6100e1610480565b6100e161011f366004610d53565b610494565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6101af61015f366004610d88565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081205460e01b9190357fffffffff000000000000000000000000000000000000000000000000000000001690565b604080517fffffffff00000000000000000000000000000000000000000000000000000000938416815292909116602083015201610148565b6101fb6101f6366004610d88565b610513565b604051908152602001610148565b6101fb60025481565b60045460055460065461023f9273ffffffffffffffffffffffffffffffffffffffff908116928116911683565b6040805173ffffffffffffffffffffffffffffffffffffffff94851681529284166020840152921691810191909152606001610148565b6100e1610284366004610d88565b6105af565b60055460405160009173ffffffffffffffffffffffffffffffffffffffff16906102b69083903690610daa565b600060405180830381855af49150503d80600081146102f1576040519150601f19603f3d011682016040523d82523d6000602084013e6102f6565b606091505b505090508061030457600080fd5b505050565b61031161066b565b805182511461031f57600080fd5b60005b82518110156103045781818151811061033d5761033d610dba565b60200260200101516001600085848151811061035b5761035b610dba565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908360e01c0217905550806103c290610de9565b9050610322565b6103d161066b565b8051805182916003916103eb918391602090910190610761565b5060208281015160018301805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155604085015160028501805491841691831691909117905560608501516003850180549190931691161790556080830151805161047a92600485019201906107eb565b50505050565b61048861066b565b61049260006106ec565b565b60055460405160009173ffffffffffffffffffffffffffffffffffffffff16906104c19083903690610daa565b600060405180830381855af49150503d80600081146104fc576040519150601f19603f3d011682016040523d82523d6000602084013e610501565b606091505b505090508061050f57600080fd5b5050565b6004546040516000918291829173ffffffffffffffffffffffffffffffffffffffff16906105449083903690610daa565b600060405180830381855af49150503d806000811461057f576040519150601f19603f3d011682016040523d82523d6000602084013e610584565b606091505b50915091508161059357600080fd5b808060200190518101906105a79190610e48565b949350505050565b6105b761066b565b73ffffffffffffffffffffffffffffffffffffffff811661065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610668816106ec565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610656565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156107db579160200282015b828111156107db57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610781565b506107e792915061088e565b5090565b828054828255906000526020600020906007016008900481019282156107db5791602002820160005b8382111561085557835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610814565b80156108855782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610855565b50506107e79291505b5b808211156107e7576000815560010161088f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156108f5576108f56108a3565b60405290565b60405160a0810167ffffffffffffffff811182821017156108f5576108f56108a3565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610965576109656108a3565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461099157600080fd5b919050565b600067ffffffffffffffff8211156109b0576109b06108a3565b5060051b60200190565b600082601f8301126109cb57600080fd5b813560206109e06109db83610996565b61091e565b82815260059290921b840181019181810190868411156109ff57600080fd5b8286015b84811015610a1a5780358352918301918301610a03565b509695505050505050565b803563ffffffff8116811461099157600080fd5b803560ff8116811461099157600080fd5b8035801515811461099157600080fd5b600060e08284031215610a6c57600080fd5b610a746108d2565b9050610a7f8261096d565b8152602082013567ffffffffffffffff811115610a9b57600080fd5b610aa7848285016109ba565b6020830152506040820135604082015260608201356060820152610acd60808301610a25565b6080820152610ade60a08301610a39565b60a0820152610aef60c08301610a4a565b60c082015292915050565b60008060408385031215610b0d57600080fd5b823567ffffffffffffffff811115610b2457600080fd5b610b3085828601610a5a565b95602094909401359450505050565b600082601f830112610b5057600080fd5b81356020610b606109db83610996565b82815260059290921b84018101918181019086841115610b7f57600080fd5b8286015b84811015610a1a57610b948161096d565b8352918301918301610b83565b600082601f830112610bb257600080fd5b81356020610bc26109db83610996565b82815260059290921b84018101918181019086841115610be157600080fd5b8286015b84811015610a1a5780357fffffffff0000000000000000000000000000000000000000000000000000000081168114610c1e5760008081fd5b8352918301918301610be5565b60008060408385031215610c3e57600080fd5b823567ffffffffffffffff80821115610c5657600080fd5b610c6286838701610b3f565b93506020850135915080821115610c7857600080fd5b50610c8585828601610ba1565b9150509250929050565b600060208284031215610ca157600080fd5b813567ffffffffffffffff80821115610cb957600080fd5b9083019060a08286031215610ccd57600080fd5b610cd56108fb565b823582811115610ce457600080fd5b610cf087828601610b3f565b825250610cff6020840161096d565b6020820152610d106040840161096d565b6040820152610d216060840161096d565b6060820152608083013582811115610d3857600080fd5b610d4487828601610ba1565b60808301525095945050505050565b600060208284031215610d6557600080fd5b813567ffffffffffffffff811115610d7c57600080fd5b6105a784828501610a5a565b600060208284031215610d9a57600080fd5b610da38261096d565b9392505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e41577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600060208284031215610e5a57600080fd5b505191905056fea2646970667358221220a83fa6c1d1affa2e3ad377ada15e8b45e98dedb11a7cbd592bdc859f36d001c764736f6c63430008110033";

type ShopConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShopConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Shop__factory extends ContractFactory {
  constructor(...args: ShopConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Shop";
  }

  deploy(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Shop> {
    return super.deploy(input, overrides || {}) as Promise<Shop>;
  }
  getDeployTransaction(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Shop {
    return super.attach(address) as Shop;
  }
  connect(signer: Signer): Shop__factory {
    return super.connect(signer) as Shop__factory;
  }
  static readonly contractName: "Shop";
  public readonly contractName: "Shop";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShopInterface {
    return new utils.Interface(_abi) as ShopInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Shop {
    return new Contract(address, _abi, signerOrProvider) as Shop;
  }
}
