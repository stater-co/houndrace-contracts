/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  RacesMethods,
  RacesMethodsInterface,
  RacesConstructor,
} from "../../../../../contracts/races/methods/Index.sol/RacesMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "generator",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "queues",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "allowedCallers",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "raceFee",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "callable",
            type: "bool",
          },
        ],
        internalType: "struct RacesConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "arena",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entryFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "from",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "to",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "currency",
                type: "address[]",
              },
              {
                internalType: "uint256[][]",
                name: "ids",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "amounts",
                type: "uint256[][]",
              },
              {
                internalType: "uint32[]",
                name: "paymentType",
                type: "uint32[]",
              },
            ],
            internalType: "struct Payment.Struct",
            name: "payments",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        indexed: false,
        internalType: "struct Race.Struct",
        name: "race",
        type: "tuple",
      },
    ],
    name: "NewFinishedRace",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "arena",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entryFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "from",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "to",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "currency",
                type: "address[]",
              },
              {
                internalType: "uint256[][]",
                name: "ids",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "amounts",
                type: "uint256[][]",
              },
              {
                internalType: "uint32[]",
                name: "paymentType",
                type: "uint32[]",
              },
            ],
            internalType: "struct Payment.Struct",
            name: "payments",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        indexed: false,
        internalType: "struct Race.Struct",
        name: "race",
        type: "tuple",
      },
    ],
    name: "NewRace",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "arena",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entryFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "from",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "to",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "currency",
                type: "address[]",
              },
              {
                internalType: "uint256[][]",
                name: "ids",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "amounts",
                type: "uint256[][]",
              },
              {
                internalType: "uint32[]",
                name: "paymentType",
                type: "uint32[]",
              },
            ],
            internalType: "struct Payment.Struct",
            name: "payments",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        indexed: false,
        internalType: "struct Race.Struct",
        name: "race",
        type: "tuple",
      },
    ],
    name: "UploadRace",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "randomness",
        type: "address",
      },
      {
        internalType: "address",
        name: "arenas",
        type: "address",
      },
      {
        internalType: "address",
        name: "hounds",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "generator",
        type: "address",
      },
      {
        internalType: "address",
        name: "payments",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "queues",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "raceFee",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "callable",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "from",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "to",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "currency",
            type: "address[]",
          },
          {
            internalType: "uint256[][]",
            name: "ids",
            type: "uint256[][]",
          },
          {
            internalType: "uint256[][]",
            name: "amounts",
            type: "uint256[][]",
          },
          {
            internalType: "uint32[]",
            name: "paymentType",
            type: "uint32[]",
          },
        ],
        internalType: "struct Payment.Struct",
        name: "payment",
        type: "tuple",
      },
    ],
    name: "handleRaceLoot",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "theId",
        type: "uint256",
      },
    ],
    name: "participantsOf",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "payout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "theId",
        type: "uint256",
      },
    ],
    name: "race",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "arena",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entryFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "from",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "to",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "currency",
                type: "address[]",
              },
              {
                internalType: "uint256[][]",
                name: "ids",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "amounts",
                type: "uint256[][]",
              },
              {
                internalType: "uint32[]",
                name: "paymentType",
                type: "uint32[]",
              },
            ],
            internalType: "struct Payment.Struct",
            name: "payments",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        internalType: "struct Race.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "enqueueDates",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "arena",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entryFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastCompletion",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "from",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "to",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "currency",
                type: "address[]",
              },
              {
                internalType: "uint256[][]",
                name: "ids",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "amounts",
                type: "uint256[][]",
              },
              {
                internalType: "uint32[]",
                name: "paymentType",
                type: "uint32[]",
              },
            ],
            internalType: "struct Payment.Struct",
            name: "payments",
            type: "tuple",
          },
          {
            internalType: "uint32",
            name: "totalParticipants",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "cooldown",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "closed",
            type: "bool",
          },
        ],
        internalType: "struct Queue.Struct",
        name: "queue",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "theId",
        type: "uint256",
      },
    ],
    name: "raceStart",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "races",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "arena",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entryFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "randomness",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "from",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "to",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "currency",
            type: "address[]",
          },
          {
            internalType: "uint256[][]",
            name: "ids",
            type: "uint256[][]",
          },
          {
            internalType: "uint256[][]",
            name: "amounts",
            type: "uint256[][]",
          },
          {
            internalType: "uint32[]",
            name: "paymentType",
            type: "uint32[]",
          },
        ],
        internalType: "struct Payment.Struct",
        name: "payments",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "queueId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "seed",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "generator",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "queues",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "allowedCallers",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "raceFee",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "callable",
            type: "bool",
          },
        ],
        internalType: "struct RacesConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600180553480156200001557600080fd5b506040516200363d3803806200363d8339810160408190526200003891620003f4565b80620000443362000206565b8051600280546001600160a01b03199081166001600160a01b0393841617825560208085015160038054841691861691909117905560408501516004805484169186169190911790556060850151600580548416918616919091179055608085015160068054841691861691909117905560a085015160078054841691861691909117905560c085015160088054841691861691909117905560e0850151600980549093169416939093179055610100830151805184936200010c92600a9291019062000256565b50610120820151600982015561014090910151600a909101805460ff191691151591909117905560005b81610100015151811015620001fd57600e6000836101000151838151811062000163576200016362000528565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1615600e60008461010001518481518110620001b857620001b862000528565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055620001f5816200053e565b905062000136565b50505062000566565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620002ae579160200282015b82811115620002ae57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000277565b50620002bc929150620002c0565b5090565b5b80821115620002bc5760008155600101620002c1565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715620003135762000313620002d7565b60405290565b80516001600160a01b03811681146200033157600080fd5b919050565b600082601f8301126200034857600080fd5b815160206001600160401b0380831115620003675762000367620002d7565b8260051b604051601f19603f830116810181811084821117156200038f576200038f620002d7565b604052938452858101830193838101925087851115620003ae57600080fd5b83870191505b84821015620003d857620003c88262000319565b83529183019190830190620003b4565b979650505050505050565b805180151581146200033157600080fd5b6000602082840312156200040757600080fd5b81516001600160401b03808211156200041f57600080fd5b9083019061016082860312156200043557600080fd5b6200043f620002ed565b6200044a8362000319565b81526200045a6020840162000319565b60208201526200046d6040840162000319565b6040820152620004806060840162000319565b6060820152620004936080840162000319565b6080820152620004a660a0840162000319565b60a0820152620004b960c0840162000319565b60c0820152620004cc60e0840162000319565b60e08201526101008084015183811115620004e657600080fd5b620004f48882870162000336565b82840152505061012091508183015182820152610140915062000519828401620003e3565b91810191909152949350505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016200055f57634e487b7160e01b600052601160045260246000fd5b5060010190565b6130c780620005766000396000f3fe6080604052600436106100a35760003560e01c80633f16e358146100ac578063715018a6146100bf5780637bbc469e146100d45780638da5cb5b14610111578063af640d0f1461013e578063b02da54314610162578063b7dda85e14610182578063c4bdc7e7146101af578063d63a8e11146101cf578063d8de65871461020f578063e1152343146102ca578063e200c857146102ea578063f2fde38b1461031757005b366100aa57005b005b6100aa6100ba366004611db9565b610337565b3480156100cb57600080fd5b506100aa6104d0565b3480156100e057600080fd5b506100f46100ef366004611df5565b6104e4565b604051610108989796959493929190612005565b60405180910390f35b34801561011d57600080fd5b50610126610920565b6040516001600160a01b039091168152602001610108565b34801561014a57600080fd5b5061015460015481565b604051908152602001610108565b34801561016e57600080fd5b506100aa61017d366004612102565b61092f565b34801561018e57600080fd5b506101a261019d366004611df5565b610e2d565b6040516101089190612268565b3480156101bb57600080fd5b506100aa6101ca366004612327565b6112f9565b3480156101db57600080fd5b506101ff6101ea366004612441565b600e6020526000908152604090205460ff1681565b6040519015158152602001610108565b34801561021b57600080fd5b50600254600354600454600554600654600754600854600954600b54600c54610265996001600160a01b039081169981169881169781169681169581169481169316919060ff168a565b604080516001600160a01b039b8c168152998b1660208b0152978a16978901979097529488166060880152928716608087015290861660a0860152851660c085015290931660e083015261010082019290925290151561012082015261014001610108565b3480156102d657600080fd5b506100aa6102e5366004611df5565b6114ae565b3480156102f657600080fd5b5061030a610305366004611df5565b61159e565b6040516101089190612465565b34801561032357600080fd5b506100aa610332366004612441565b611603565b336000908152600e602052604090205460ff1661035357600080fd5b60005b8151518110156104cc57600754825180516000926001600160a01b031691908490811061038557610385612478565b6020026020010151846020015184815181106103a3576103a3612478565b6020026020010151856040015185815181106103c1576103c1612478565b6020026020010151866060015186815181106103df576103df612478565b6020026020010151876080015187815181106103fd576103fd612478565b60200260200101518860a00151888151811061041b5761041b612478565b60200260200101516040516024016104389695949392919061248e565b60408051601f198184030181529181526020820180516001600160e01b031663400f959f60e01b1790525161046d91906124ee565b600060405180830381855af49150503d80600081146104a8576040519150601f19603f3d011682016040523d82523d6000602084013e6104ad565b606091505b50509050806104bb57600080fd5b506104c58161250a565b9050610356565b5050565b6104d8611679565b6104e260006116d8565b565b600d602052600090815260409020805481906104ff90612531565b80601f016020809104026020016040519081016040528092919081815260200182805461052b90612531565b80156105785780601f1061054d57610100808354040283529160200191610578565b820191906000526020600020905b81548152906001019060200180831161055b57829003601f168201915b50505060018401546003850154600486015460058701546040805160068a01805460e0602082028401810190945260c083018181529a9b6001600160a01b039098169a9699509497509295949093849284919084018282801561060457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105e6575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561066657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610648575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156106c857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106aa575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b828210156107625760008481526020908190208301805460408051828502810185019091528181529283018282801561074e57602002820191906000526020600020905b81548152602001906001019080831161073a575b5050505050815260200190600101906106f6565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156107fb576000848152602090819020830180546040805182850281018501909152818152928301828280156107e757602002820191906000526020600020905b8154815260200190600101908083116107d3575b50505050508152602001906001019061078f565b5050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561087e57602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116108415790505b5050505050815250509080600c01549080600d01805461089d90612531565b80601f01602080910402602001604051908101604052809291908181526020018280546108c990612531565b80156109165780601f106108eb57610100808354040283529160200191610916565b820191906000526020600020905b8154815290600101906020018083116108f957829003601f168201915b5050505050905088565b6000546001600160a01b031690565b336000908152600e602052604090205460ff1661094b57600080fd5b600c5460ff1615610d5d57600654604051630c419e8f60e11b81526001600160a01b03909116906318833d1e90610988908590859060040161256b565b600060405180830381865afa1580156109a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cd9190810190612988565b6001546000908152600d60205260409020815181906109ec9082612aed565b506020828101516001830180546001600160a01b0319166001600160a01b0390921691909117905560408301518051610a2b9260028501920190611728565b50606082015160038201556080820151600482015560a0820151600582015560c0820151805180516006840191610a6791839160200190611773565b506020828101518051610a809260018501920190611773565b5060408201518051610a9c916002840191602090910190611773565b5060608201518051610ab89160038401916020909101906117c8565b5060808201518051610ad49160048401916020909101906117c8565b5060a08201518051610af0916005840191602090910190611821565b50505060e0820151600c820155610100820151600d820190610b129082612aed565b5050600380546001546000908152600d6020526040808220909301549251635ba52fdf60e11b8152600481019390935292506001600160a01b03169063b74a5fbe90602401600060405180830381865afa158015610b74573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b9c9190810190612bac565b60035460408201519192506001600160a01b03908116916311a34393911615610bc6576000610bcc565b82606001515b600d60006001548152602001908152602001600020600301546040518363ffffffff1660e01b8152600401610c0391815260200190565b6000604051808303818588803b158015610c1c57600080fd5b505af1158015610c30573d6000803e3d6000fd5b5050505050610c43836101200151610337565b60005b836040015151811015610d0e57600454604085015180516001600160a01b039092169163894f39fc919084908110610c8057610c80612478565b6020026020010151856040518363ffffffff1660e01b8152600401610caf929190918252602082015260400190565b6020604051808303816000875af1158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf29190612c8a565b600003610cfe57600080fd5b610d078161250a565b9050610c46565b506001546000818152600d60205260409081902090517fdeac4b75274224a1b860c0caee5b72450aea68ad014cfa51df709ab425da417f91610d4f91612fda565b60405180910390a250610e16565b6001547fabf9a9f55436fcab94967775cab48bb9102d7a183c116e1f2aed1f263df682cb6040518061012001604052808560000151815260200185602001516001600160a01b0316815260200185604001518152602001856080015181526020018560a001518152602001600081526020018561012001518152602001848152602001604051806040016040528060048152602001630307830360e41b815250815250604051610e0d9190612268565b60405180910390a25b600160008154610e259061250a565b909155505050565b610e356118cb565b6000828152600d60205260409081902081516101208101909252805482908290610e5e90612531565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8a90612531565b8015610ed75780601f10610eac57610100808354040283529160200191610ed7565b820191906000526020600020905b815481529060010190602001808311610eba57829003601f168201915b505050918352505060018201546001600160a01b03166020808301919091526002830180546040805182850281018501825282815294019392830182828015610f3f57602002820191906000526020600020905b815481526020019060010190808311610f2b575b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682016040518060c001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610fcf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610fb1575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561103157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611013575b505050505081526020016002820180548060200260200160405190810160405280929190818152602001828054801561109357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611075575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b8282101561112d5760008481526020908190208301805460408051828502810185019091528181529283018282801561111957602002820191906000526020600020905b815481526020019060010190808311611105575b5050505050815260200190600101906110c1565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156111c6576000848152602090819020830180546040805182850281018501909152818152928301828280156111b257602002820191906000526020600020905b81548152602001906001019080831161119e575b50505050508152602001906001019061115a565b5050505081526020016005820180548060200260200160405190810160405280929190818152602001828054801561124957602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff168152602001906004019060208260030104928301926001038202915080841161120c5790505b5050505050815250508152602001600c8201548152602001600d8201805461127090612531565b80601f016020809104026020016040519081016040528092919081815260200182805461129c90612531565b80156112e95780601f106112be576101008083540402835291602001916112e9565b820191906000526020600020905b8154815290600101906020018083116112cc57829003601f168201915b5050505050815250509050919050565b611301611679565b8051600280546001600160a01b03199081166001600160a01b0393841617825560208085015160038054841691861691909117905560408501516004805484169186169190911790556060850151600580548416918616919091179055608085015160068054841691861691909117905560a085015160078054841691861691909117905560c085015160088054841691861691909117905560e0850151600980549093169416939093179055610100830151805184936113c792600a92910190611773565b50610120820151600982015561014090910151600a909101805460ff191691151591909117905560005b816101000151518110156104cc57600e6000836101000151838151811061141a5761141a612478565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a900460ff1615600e6000846101000151848151811061146c5761146c612478565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556114a78161250a565b90506113f1565b6114b6611679565b478111156115235760405162461bcd60e51b815260206004820152602f60248201527f5061796f75743a2052657175657374656420616d6f756e7420746f207769746860448201526e6472617720697320746f6f2062696760881b60648201526084015b60405180910390fd5b61152b610920565b6001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505061159b5760405162461bcd60e51b815260206004820152601a6024820152795061796f75743a204661696c656420746f20776974686472617760301b604482015260640161151a565b50565b6000818152600d60209081526040918290206002018054835181840281018401909452808452606093928301828280156115f757602002820191906000526020600020905b8154815260200190600101908083116115e3575b50505050509050919050565b61160b611679565b6001600160a01b0381166116705760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161151a565b61159b816116d8565b33611682610920565b6001600160a01b0316146104e25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161151a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215611763579160200282015b82811115611763578251825591602001919060010190611748565b5061176f929150611957565b5090565b828054828255906000526020600020908101928215611763579160200282015b8281111561176357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611793565b828054828255906000526020600020908101928215611815579160200282015b828111156118155782518051611805918491602090910190611728565b50916020019190600101906117e8565b5061176f92915061196c565b828054828255906000526020600020906007016008900481019282156117635791602002820160005b8382111561188e57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261184a565b80156118be5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261188e565b505061176f929150611957565b6040518061012001604052806060815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081526020016119436040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b815260200160008152602001606081525090565b5b8082111561176f5760008155600101611958565b8082111561176f5760006119808282611989565b5060010161196c565b508054600082559060005260206000209081019061159b9190611957565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156119df576119df6119a7565b60405290565b6040516101a081016001600160401b03811182821017156119df576119df6119a7565b60405161016081016001600160401b03811182821017156119df576119df6119a7565b60405161012081016001600160401b03811182821017156119df576119df6119a7565b60405160e081016001600160401b03811182821017156119df576119df6119a7565b604051601f8201601f191681016001600160401b0381118282101715611a9857611a986119a7565b604052919050565b60006001600160401b03821115611ab957611ab96119a7565b5060051b60200190565b6001600160a01b038116811461159b57600080fd5b8035611ae381611ac3565b919050565b600082601f830112611af957600080fd5b81356020611b0e611b0983611aa0565b611a70565b82815260059290921b84018101918181019086841115611b2d57600080fd5b8286015b84811015611b51578035611b4481611ac3565b8352918301918301611b31565b509695505050505050565b600082601f830112611b6d57600080fd5b81356020611b7d611b0983611aa0565b82815260059290921b84018101918181019086841115611b9c57600080fd5b8286015b84811015611b515780358352918301918301611ba0565b600082601f830112611bc857600080fd5b81356020611bd8611b0983611aa0565b82815260059290921b84018101918181019086841115611bf757600080fd5b8286015b84811015611b515780356001600160401b03811115611c1a5760008081fd5b611c288986838b0101611b5c565b845250918301918301611bfb565b63ffffffff8116811461159b57600080fd5b8035611ae381611c36565b600082601f830112611c6457600080fd5b81356020611c74611b0983611aa0565b82815260059290921b84018101918181019086841115611c9357600080fd5b8286015b84811015611b51578035611caa81611c36565b8352918301918301611c97565b600060c08284031215611cc957600080fd5b611cd16119bd565b905081356001600160401b0380821115611cea57600080fd5b611cf685838601611ae8565b83526020840135915080821115611d0c57600080fd5b611d1885838601611ae8565b60208401526040840135915080821115611d3157600080fd5b611d3d85838601611ae8565b60408401526060840135915080821115611d5657600080fd5b611d6285838601611bb7565b60608401526080840135915080821115611d7b57600080fd5b611d8785838601611bb7565b608084015260a0840135915080821115611da057600080fd5b50611dad84828501611c53565b60a08301525092915050565b600060208284031215611dcb57600080fd5b81356001600160401b03811115611de157600080fd5b611ded84828501611cb7565b949350505050565b600060208284031215611e0757600080fd5b5035919050565b60005b83811015611e29578181015183820152602001611e11565b83811115611e38576000848401525b50505050565b60008151808452611e56816020860160208601611e0e565b601f01601f19169290920160200192915050565b6001600160a01b03169052565b600081518084526020808501945080840160005b83811015611eb05781516001600160a01b031687529582019590820190600101611e8b565b509495945050505050565b600081518084526020808501945080840160005b83811015611eb057815187529582019590820190600101611ecf565b600081518084526020808501808196508360051b8101915082860160005b85811015611f33578284038952611f21848351611ebb565b98850198935090840190600101611f09565b5091979650505050505050565b6000815160c08452611f5560c0850182611e77565b905060208084015185830382870152611f6e8382611e77565b92505060408401518583036040870152611f888382611e77565b92505060608401518583036060870152611fa28382611eeb565b92505060808401518583036080870152611fbc8382611eeb565b60a086810151888303918901919091528051808352908401945060009250908301905b80831015611b5157845163ffffffff168252938301936001929092019190830190611fdf565b60006101008083526120198184018c611e3e565b6001600160a01b038b166020850152604084018a9052606084018990526080840188905283810360a085015290506120518187611f40565b90508460c084015282810360e084015261206b8185611e3e565b9b9a5050505050505050505050565b60006001600160401b03821115612093576120936119a7565b50601f01601f191660200190565b600082601f8301126120b257600080fd5b81356120c0611b098261207a565b8181528460208386010111156120d557600080fd5b816020850160208301376000918101602001919091529392505050565b80358015158114611ae357600080fd5b6000806040838503121561211557600080fd5b82356001600160401b038082111561212c57600080fd5b908401906101a0828703121561214157600080fd5b6121496119e5565b82358281111561215857600080fd5b612164888286016120a1565b82525061217360208401611ad8565b602082015260408301358281111561218a57600080fd5b61219688828601611b5c565b6040830152506060830135828111156121ae57600080fd5b6121ba88828601611b5c565b6060830152506080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358381111561220857600080fd5b61221489828701611cb7565b828401525050610140915061222a828401611c48565b82820152610160915061223e828401611c48565b8282015261018091506122528284016120f2565b9181019190915295602094909401359450505050565b6020815260008251610120806020850152612287610140850183611e3e565b9150602085015161229b6040860182611e6a565b506040850151601f19808685030160608701526122b88483611ebb565b935060608701516080870152608087015160a087015260a087015160c087015260c08701519150808685030160e08701526122f38483611f40565b60e088015161010088810191909152880151878203909201848801529350905061231d8382611e3e565b9695505050505050565b60006020828403121561233957600080fd5b81356001600160401b038082111561235057600080fd5b90830190610160828603121561236557600080fd5b61236d611a08565b61237683611ad8565b815261238460208401611ad8565b602082015261239560408401611ad8565b60408201526123a660608401611ad8565b60608201526123b760808401611ad8565b60808201526123c860a08401611ad8565b60a08201526123d960c08401611ad8565b60c08201526123ea60e08401611ad8565b60e0820152610100808401358381111561240357600080fd5b61240f88828701611ae8565b8284015250506101209150818301358282015261014091506124328284016120f2565b91810191909152949350505050565b60006020828403121561245357600080fd5b813561245e81611ac3565b9392505050565b60208152600061245e6020830184611ebb565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03878116825286811660208301528516604082015260c0606082018190526000906124c290830186611ebb565b82810360808401526124d48186611ebb565b91505063ffffffff831660a0830152979650505050505050565b60008251612500818460208701611e0e565b9190910192915050565b60006001820161252a57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061254557607f821691505b60208210810361256557634e487b7160e01b600052602260045260246000fd5b50919050565b60408152600083516101a080604085015261258a6101e0850183611e3e565b9150602086015161259e6060860182611e6a565b506040860151603f19808685030160808701526125bb8483611ebb565b935060608801519150808685030160a08701526125d88483611ebb565b9350608088015160c087015260a088015160e087015260c08801519150610100828188015260e089015192506101208381890152818a0151935061014091508382890152808a01519350506101608288870301818901526126398685611f40565b9550818a0151935061018092506126578389018563ffffffff169052565b89015163ffffffff811685890152925061266e9050565b8701518015156101c087015291506126839050565b506020929092019290925292915050565b600082601f8301126126a557600080fd5b81516126b3611b098261207a565b8181528460208386010111156126c857600080fd5b611ded826020830160208701611e0e565b8051611ae381611ac3565b600082601f8301126126f557600080fd5b81516020612705611b0983611aa0565b82815260059290921b8401810191818101908684111561272457600080fd5b8286015b84811015611b515780518352918301918301612728565b600082601f83011261275057600080fd5b81516020612760611b0983611aa0565b82815260059290921b8401810191818101908684111561277f57600080fd5b8286015b84811015611b5157805161279681611ac3565b8352918301918301612783565b600082601f8301126127b457600080fd5b815160206127c4611b0983611aa0565b82815260059290921b840181019181810190868411156127e357600080fd5b8286015b84811015611b515780516001600160401b038111156128065760008081fd5b6128148986838b01016126e4565b8452509183019183016127e7565b8051611ae381611c36565b600082601f83011261283e57600080fd5b8151602061284e611b0983611aa0565b82815260059290921b8401810191818101908684111561286d57600080fd5b8286015b84811015611b5157805161288481611c36565b8352918301918301612871565b600060c082840312156128a357600080fd5b6128ab6119bd565b82519091506001600160401b03808211156128c557600080fd5b6128d18583860161273f565b835260208401519150808211156128e757600080fd5b6128f38583860161273f565b6020840152604084015191508082111561290c57600080fd5b6129188583860161273f565b6040840152606084015191508082111561293157600080fd5b61293d858386016127a3565b6060840152608084015191508082111561295657600080fd5b612962858386016127a3565b608084015260a084015191508082111561297b57600080fd5b50611dad8482850161282d565b60006020828403121561299a57600080fd5b81516001600160401b03808211156129b157600080fd5b9083019061012082860312156129c657600080fd5b6129ce611a2b565b8251828111156129dd57600080fd5b6129e987828601612694565b8252506129f8602084016126d9565b6020820152604083015182811115612a0f57600080fd5b612a1b878286016126e4565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015182811115612a5157600080fd5b612a5d87828601612891565b60c08301525060e083015160e08201526101008084015183811115612a8157600080fd5b612a8d88828701612694565b918301919091525095945050505050565b601f821115612ae857600081815260208120601f850160051c81016020861015612ac55750805b601f850160051c820191505b81811015612ae457828155600101612ad1565b5050505b505050565b81516001600160401b03811115612b0657612b066119a7565b612b1a81612b148454612531565b84612a9e565b602080601f831160018114612b4f5760008415612b375750858301515b600019600386901b1c1916600185901b178555612ae4565b600085815260208120601f198616915b82811015612b7e57888601518255948401946001909101908401612b5f565b5085821015612b9c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612bbe57600080fd5b81516001600160401b0380821115612bd557600080fd5b9083019060e08286031215612be957600080fd5b612bf1611a4e565b825182811115612c0057600080fd5b612c0c87828601612694565b825250602083015182811115612c2157600080fd5b612c2d87828601612694565b602083015250612c3f604084016126d9565b604082015260608301516060820152612c5a60808401612822565b6080820152612c6b60a08401612822565b60a0820152612c7c60c08401612822565b60c082015295945050505050565b600060208284031215612c9c57600080fd5b5051919050565b60008154612cb081612531565b808552602060018381168015612ccd5760018114612ce757612d15565b60ff1985168884015283151560051b880183019550612d15565b866000528260002060005b85811015612d0d5781548a8201860152908301908401612cf2565b890184019650505b505050505092915050565b6000815480845260208085019450836000528060002060005b83811015611eb057815487529582019560019182019101612d39565b6000815480845260208085019450836000528060002060005b83811015611eb05781546001600160a01b031687529582019560019182019101612d6e565b600081548084526020808501808196508360051b81019150856000528260002060005b85811015611f33578284038952612dcd8483612d20565b98850198935060019182019101612db6565b60c082526000612df260c0840183612d55565b6001602085830381870152612e0983838701612d55565b9250604086840381880152612e218460028801612d55565b9350606087850381890152612e398560038901612d93565b94506080888603818a0152612e518660048a01612d93565b95506005880160a08a8803818c0152878254612e71818b90815260200190565b6000948552602085209a5091505b80600785011015612eef57895463ffffffff8082168452818a1c81168a85015281891c81168985015281881c81168885015281871c81168785015281851c81168585015260c082811c8216908501525060e090811c90830152988801986008939093019261010090910190612e7f565b98549880841015612f0c5763ffffffff8a16825292880192908701905b80841015612f285789881c63ffffffff16825292880192908701905b80841015612f445789871c63ffffffff16825292880192908701905b80841015612f605789861c63ffffffff16825292880192908701905b80841015612f7c5789851c63ffffffff16825292880192908701905b80841015612f985789831c63ffffffff16825292880192908701905b80841015612fb65760c08a901c63ffffffff16825292880192908701905b80841015612fca5760e08a901c8252908701905b509b9a5050505050505050505050565b602081526000610120806020840152612ff7610140840185612ca3565b60018501546001600160a01b03166130126040860182611e6a565b50601f198085830301606086015261302d8260028801612d20565b915060038601546080860152600486015460a0860152600586015460c0860152808583030160e08601526130648260068801612ddf565b9150600c8601546101008601528085830301838601525061308881600d8701612ca3565b9594505050505056fea2646970667358221220faadeb147efdbf897bb8603b8af3632e99a2fc5ed5cb2505d83c5529885671fa64736f6c634300080f0033";

type RacesMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RacesMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RacesMethods__factory extends ContractFactory {
  constructor(...args: RacesMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    input: RacesConstructor.StructStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RacesMethods> {
    return super.deploy(input, overrides || {}) as Promise<RacesMethods>;
  }
  override getDeployTransaction(
    input: RacesConstructor.StructStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  override attach(address: string): RacesMethods {
    return super.attach(address) as RacesMethods;
  }
  override connect(signer: Signer): RacesMethods__factory {
    return super.connect(signer) as RacesMethods__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RacesMethodsInterface {
    return new utils.Interface(_abi) as RacesMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RacesMethods {
    return new Contract(address, _abi, signerOrProvider) as RacesMethods;
  }
}
