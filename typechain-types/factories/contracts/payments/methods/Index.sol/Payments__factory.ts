/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  Payments,
  PaymentsInterface,
} from "../../../../../contracts/payments/methods/Index.sol/Payments";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "id",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amount",
        type: "uint256[]",
      },
      {
        internalType: "uint32",
        name: "paymentType",
        type: "uint32",
      },
    ],
    name: "pay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610742806100826000396000f3fe6080604052600436106100405760003560e01c8063400f959f14610049578063715018a61461005c5780638da5cb5b14610071578063f2fde38b146100a257005b3661004757005b005b610047610057366004610547565b6100c2565b34801561006857600080fd5b5061004761032b565b34801561007d57600080fd5b5061008661033f565b6040516001600160a01b03909116815260200160405180910390f35b3480156100ae57600080fd5b506100476100bd3660046105f8565b61034e565b8063ffffffff1660000361015157836001600160a01b03166342842e0e8787866000815181106100f4576100f461061a565b60200260200101516040518463ffffffff1660e01b815260040161011a93929190610630565b600060405180830381600087803b15801561013457600080fd5b505af1158015610148573d6000803e3d6000fd5b50505050610323565b8063ffffffff1660010361019157604051631759616b60e11b81526001600160a01b03851690632eb2c2d69061011a90899089908890889060040161068f565b8063ffffffff1660020361023a57836001600160a01b03166323b872dd8787856000815181106101c3576101c361061a565b60200260200101516040518463ffffffff1660e01b81526004016101e993929190610630565b6020604051808303816000875af1158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c91906106ea565b61023557600080fd5b610323565b8063ffffffff16600303610323576001600160a01b0385163b156102d8576000856001600160a01b0316836000815181106102775761027761061a565b602002602001015160405160006040518083038185875af1925050503d80600081146102bf576040519150601f19603f3d011682016040523d82523d6000602084013e6102c4565b606091505b50509050806102d257600080fd5b50610323565b846001600160a01b03166108fc836000815181106102f8576102f861061a565b60200260200101519081150290604051600060405180830381858888f1935050505061032357600080fd5b505050505050565b6103336103cc565b61033d600061042b565b565b6000546001600160a01b031690565b6103566103cc565b6001600160a01b0381166103c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103c98161042b565b50565b336103d561033f565b6001600160a01b03161461033d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103b7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461049257600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126104be57600080fd5b813560206001600160401b03808311156104da576104da610497565b8260051b604051601f19603f830116810181811084821117156104ff576104ff610497565b60405293845285810183019383810192508785111561051d57600080fd5b83870191505b8482101561053c57813583529183019190830190610523565b979650505050505050565b60008060008060008060c0878903121561056057600080fd5b6105698761047b565b95506105776020880161047b565b94506105856040880161047b565b935060608701356001600160401b03808211156105a157600080fd5b6105ad8a838b016104ad565b945060808901359150808211156105c357600080fd5b506105d089828a016104ad565b92505060a087013563ffffffff811681146105ea57600080fd5b809150509295509295509295565b60006020828403121561060a57600080fd5b6106138261047b565b9392505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600081518084526020808501945080840160005b8381101561068457815187529582019590820190600101610668565b509495945050505050565b6001600160a01b0385811682528416602082015260a0604082018190526000906106bb90830185610654565b82810360608401526106cd8185610654565b838103608090940193909352505060008152602001949350505050565b6000602082840312156106fc57600080fd5b8151801515811461061357600080fdfea26469706673582212203a4e687e8144af141d45db0d7d1ad40508f41c10880cca079dd1ff4059d33bdb64736f6c634300080f0033";

type PaymentsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Payments__factory extends ContractFactory {
  constructor(...args: PaymentsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Payments> {
    return super.deploy(overrides || {}) as Promise<Payments>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Payments {
    return super.attach(address) as Payments;
  }
  override connect(signer: Signer): Payments__factory {
    return super.connect(signer) as Payments__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentsInterface {
    return new utils.Interface(_abi) as PaymentsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Payments {
    return new Contract(address, _abi, signerOrProvider) as Payments;
  }
}
