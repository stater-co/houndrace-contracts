/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GamificationMethods,
  GamificationMethodsInterface,
  GamificationConstructor,
} from "../GamificationMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "breedingFeeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "breedingCooldownCurrency",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "lastBreed",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "breedingCooldown",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "breedingFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "breedingCooldownTimeUnit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "refillBreedingCooldownCost",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "availableToBreed",
                type: "bool",
              },
            ],
            internalType: "struct HoundBreeding.Struct",
            name: "defaultBreeding",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "staminaRefillCurrency",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "staminaLastUpdate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "staminaRefill1x",
                type: "uint256",
              },
              {
                internalType: "uint32",
                name: "staminaValue",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "staminaPerTimeUnit",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "staminaCap",
                type: "uint32",
              },
            ],
            internalType: "struct HoundStamina.Struct",
            name: "defaultStamina",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "firewall",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
        ],
        internalType: "struct GamificationConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "breedingFeeCurrency",
            type: "address",
          },
          {
            internalType: "address",
            name: "breedingCooldownCurrency",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "lastBreed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingCooldown",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingCooldownTimeUnit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refillBreedingCooldownCost",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "availableToBreed",
            type: "bool",
          },
        ],
        internalType: "struct HoundBreeding.Struct",
        name: "defaultBreeding",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "staminaRefillCurrency",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "staminaLastUpdate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "staminaRefill1x",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "staminaValue",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "staminaPerTimeUnit",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "staminaCap",
            type: "uint32",
          },
        ],
        internalType: "struct HoundStamina.Struct",
        name: "defaultStamina",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "firewall",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getBreeding",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "breedingFeeCurrency",
            type: "address",
          },
          {
            internalType: "address",
            name: "breedingCooldownCurrency",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "lastBreed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingCooldown",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingCooldownTimeUnit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refillBreedingCooldownCost",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "availableToBreed",
            type: "bool",
          },
        ],
        internalType: "struct HoundBreeding.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getStamina",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "staminaRefillCurrency",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "staminaLastUpdate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "staminaRefill1x",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "staminaValue",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "staminaPerTimeUnit",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "staminaCap",
            type: "uint32",
          },
        ],
        internalType: "struct HoundStamina.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getStaminaBreeding",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "staminaRefillCurrency",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "staminaLastUpdate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "staminaRefill1x",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "staminaValue",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "staminaPerTimeUnit",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "staminaCap",
            type: "uint32",
          },
        ],
        internalType: "struct HoundStamina.Struct",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "breedingFeeCurrency",
            type: "address",
          },
          {
            internalType: "address",
            name: "breedingCooldownCurrency",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "lastBreed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingCooldown",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "breedingCooldownTimeUnit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "refillBreedingCooldownCost",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "availableToBreed",
            type: "bool",
          },
        ],
        internalType: "struct HoundBreeding.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "houndsBreeding",
    outputs: [
      {
        internalType: "address",
        name: "breedingFeeCurrency",
        type: "address",
      },
      {
        internalType: "address",
        name: "breedingCooldownCurrency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "lastBreed",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "breedingCooldown",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "breedingFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "breedingCooldownTimeUnit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "refillBreedingCooldownCost",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "availableToBreed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "houndsStamina",
    outputs: [
      {
        internalType: "address",
        name: "staminaRefillCurrency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "staminaLastUpdate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "staminaRefill1x",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "staminaValue",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "staminaPerTimeUnit",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "staminaCap",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "onId",
        type: "uint256",
      },
      {
        internalType: "uint32[54]",
        name: "genetics",
        type: "uint32[54]",
      },
    ],
    name: "initializeHoundGamingStats",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "breedingFeeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "breedingCooldownCurrency",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "lastBreed",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "breedingCooldown",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "breedingFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "breedingCooldownTimeUnit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "refillBreedingCooldownCost",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "availableToBreed",
                type: "bool",
              },
            ],
            internalType: "struct HoundBreeding.Struct",
            name: "defaultBreeding",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "staminaRefillCurrency",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "staminaLastUpdate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "staminaRefill1x",
                type: "uint256",
              },
              {
                internalType: "uint32",
                name: "staminaValue",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "staminaPerTimeUnit",
                type: "uint32",
              },
              {
                internalType: "uint32",
                name: "staminaCap",
                type: "uint32",
              },
            ],
            internalType: "struct HoundStamina.Struct",
            name: "defaultStamina",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "firewall",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
        ],
        internalType: "struct GamificationConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620015a8380380620015a88339810160408190526200003491620002b0565b80518051600080546001600160a01b03199081166001600160a01b039384161790915560208084015160018054841691851691909117905560408085015160025560608086015160035560808087015160045560a08088015160055560c088015160065560e0909701516007805460ff19169115159190911790558388015180516008805488169189169190911790559384015160095583830151600a5583820151600b805486840151969099015163ffffffff9283166001600160401b0319909a1699909917640100000000968316969096029590951763ffffffff60401b191668010000000000000000919098160296909617909255850151600c80548416918516919091179055840151600d805483169184169190911790559190920151600e80549092169216919091179055620003b2565b60405160a081016001600160401b03811182821017156200019b57634e487b7160e01b600052604160045260246000fd5b60405290565b60405161010081016001600160401b03811182821017156200019b57634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620001eb57600080fd5b919050565b805163ffffffff81168114620001eb57600080fd5b600060c082840312156200021857600080fd5b60405160c081016001600160401b03811182821017156200024957634e487b7160e01b600052604160045260246000fd5b6040529050806200025a83620001d3565b815260208301516020820152604083015160408201526200027e60608401620001f0565b60608201526200029160808401620001f0565b6080820152620002a460a08401620001f0565b60a08201525092915050565b6000818303610220811215620002c557600080fd5b620002cf6200016a565b61010080831215620002e057600080fd5b620002ea620001a1565b9250620002f785620001d3565b83526200030760208601620001d3565b602084015260408501516040840152606085015160608401526080850151608084015260a085015160a084015260c085015160c084015260e085015180151581146200035257600080fd5b60e0840152828252620003688686830162000205565b6020830152506200037d6101c08501620001d3565b6040820152620003916101e08501620001d3565b6060820152620003a56102008501620001d3565b6080820152949350505050565b6111e680620003c26000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636f27089f1161005b5780636f27089f146101af578063d3e2c5451461026d578063d8de658714610280578063e62256301461037e57600080fd5b80630ad47e1e1461008d5780632c85e863146100a2578063408c3b2e146100cc5780635815d8bf146100ec575b600080fd5b6100a061009b366004610c65565b610450565b005b6100b56100b0366004610cf8565b6106bd565b6040516100c3929190610d11565b60405180910390f35b6100df6100da366004610cf8565b610864565b6040516100c39190610df2565b61015a6100fa366004610cf8565b6010602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015473ffffffffffffffffffffffffffffffffffffffff968716979590961695939492939192909160ff1688565b6040805173ffffffffffffffffffffffffffffffffffffffff998a168152989097166020890152958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016100c3565b61021d6101bd366004610cf8565b600f60205260009081526040902080546001820154600283015460039093015473ffffffffffffffffffffffffffffffffffffffff90921692909163ffffffff808216916401000000008104821691680100000000000000009091041686565b6040805173ffffffffffffffffffffffffffffffffffffffff909716875260208701959095529385019290925263ffffffff908116606085015290811660808401521660a082015260c0016100c3565b6100a061027b366004610f35565b610966565b604080516101008101825260005473ffffffffffffffffffffffffffffffffffffffff908116825260015481166020808401919091526002548385015260035460608085019190915260045460808086019190915260055460a08087019190915260065460c08088019190915260075460ff16151560e0880152875190810188526008548616815260095494810194909452600a5496840196909652600b5463ffffffff8082169385019390935264010000000081048316918401919091526801000000000000000090041693810193909352600c54600d54600e5461036d959392831692918216911685565b6040516100c395949392919061101f565b61044361038c366004610cf8565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506000908152600f6020908152604091829020825160c081018452815473ffffffffffffffffffffffffffffffffffffffff16815260018201549281019290925260028101549282019290925260039091015463ffffffff8082166060840152640100000000820481166080840152680100000000000000009091041660a082015290565b6040516100c3919061112c565b600c546040517fab15ce830000000000000000000000000000000000000000000000000000000081523360048201526000357fffffffff0000000000000000000000000000000000000000000000000000000016602482015273ffffffffffffffffffffffffffffffffffffffff9091169063ab15ce8390604401602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190611193565b61051557600080fd5b506000908152600f60209081526040808320600854815473ffffffffffffffffffffffffffffffffffffffff9182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783556009546001808501918255600a54600280870191909155600b80546003978801805463ffffffff9283167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082168117835584547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909216176401000000009182900484169091021780825592547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff909316680100000000000000009384900490921690920217905542909255601090965293862095548654908316908216178655845494860180549590921694169390931790925580549083015580549082015560048054908201556005805490820155600680549082015560078054910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9092161515919091179055565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152610765604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b50506000908152600f602090815260408083206010835292819020815160c08082018452855473ffffffffffffffffffffffffffffffffffffffff9081168352600180880154848801526002808901548588015260039889015463ffffffff808216606080890191909152640100000000830482166080808a01919091526801000000000000000090930490911660a080890191909152895161010081018b528954871681529489015490951699840199909952908601549682019690965296840154958701959095526004830154938601939093526005820154938501939093526006810154918401919091526007015460ff16151560e083015291565b6108da604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b50600090815260106020908152604091829020825161010081018452815473ffffffffffffffffffffffffffffffffffffffff9081168252600183015416928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460ff16151560e082015290565b600c546040517fab15ce830000000000000000000000000000000000000000000000000000000081523360048201526000357fffffffff0000000000000000000000000000000000000000000000000000000016602482015273ffffffffffffffffffffffffffffffffffffffff9091169063ab15ce8390604401602060405180830381865afa1580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a229190611193565b610a2b57600080fd5b80518051600080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9384161790915560208084015160018054841691851691909117905560408085015160025560608086015160035560808087015160045560a08088015160055560c088015160065560e090970151600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558388015180516008805488169189169190911790559384015160095583830151600a5583820151600b805486840151969099015163ffffffff9283167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909a169990991764010000000096831696909602959095177fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff1668010000000000000000919098160296909617909255850151600c80548416918516919091179055840151600d805483169184169190911790559190920151600e80549092169216919091179055565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610c2257610c22610bd0565b60405290565b604051610100810167ffffffffffffffff81118282101715610c2257610c22610bd0565b803563ffffffff81168114610c6057600080fd5b919050565b6000806106e0808486031215610c7a57600080fd5b83359250602085603f860112610c8f57600080fd5b6040516106c0810181811067ffffffffffffffff82111715610cb357610cb3610bd0565b604052918501918087841115610cc857600080fd5b8287015b84811015610cea57610cdd81610c4c565b8252908301908301610ccc565b509497909650945050505050565b600060208284031215610d0a57600080fd5b5035919050565b6101c08101610d79828573ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015163ffffffff80821660608501528060808401511660808501528060a08401511660a085015250505050565b610deb60c083018473ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e0810151151560e08301525050565b9392505050565b6101008101610e66828473ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e0810151151560e08301525050565b92915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c6057600080fd5b8015158114610e9e57600080fd5b50565b600060c08284031215610eb357600080fd5b60405160c0810181811067ffffffffffffffff82111715610ed657610ed6610bd0565b604052905080610ee583610e6c565b81526020830135602082015260408301356040820152610f0760608401610c4c565b6060820152610f1860808401610c4c565b6080820152610f2960a08401610c4c565b60a08201525092915050565b6000818303610220811215610f4957600080fd5b610f51610bff565b61010080831215610f6157600080fd5b610f69610c28565b9250610f7485610e6c565b8352610f8260208601610e6c565b602084015260408501356040840152606085013560608401526080850135608084015260a085013560a084015260c085013560c084015260e0850135610fc781610e90565b60e0840152828252610fdb86868301610ea1565b602083015250610fee6101c08501610e6c565b60408201526110006101e08501610e6c565b60608201526110126102008501610e6c565b6080820152949350505050565b6102208101611093828873ffffffffffffffffffffffffffffffffffffffff8082511683528060208301511660208401525060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e0810151151560e08301525050565b855173ffffffffffffffffffffffffffffffffffffffff1661010083015260208601516101208301526040860151610140830152606086015163ffffffff9081166101608401526080870151811661018084015260a0870151166101a083015273ffffffffffffffffffffffffffffffffffffffff9485166101c08301529284166101e082015292166102009092019190915292915050565b60c08101610e66828473ffffffffffffffffffffffffffffffffffffffff81511682526020810151602083015260408101516040830152606081015163ffffffff80821660608501528060808401511660808501528060a08401511660a085015250505050565b6000602082840312156111a557600080fd5b8151610deb81610e9056fea264697066735822122088f52e2c5b586618ec4f6f596b49078ebf1d8ecdd2ea045fa18631f543723dc664736f6c63430008110033";

type GamificationMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GamificationMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GamificationMethods__factory extends ContractFactory {
  constructor(...args: GamificationMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GamificationMethods";
  }

  deploy(
    input: GamificationConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GamificationMethods> {
    return super.deploy(input, overrides || {}) as Promise<GamificationMethods>;
  }
  getDeployTransaction(
    input: GamificationConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): GamificationMethods {
    return super.attach(address) as GamificationMethods;
  }
  connect(signer: Signer): GamificationMethods__factory {
    return super.connect(signer) as GamificationMethods__factory;
  }
  static readonly contractName: "GamificationMethods";
  public readonly contractName: "GamificationMethods";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GamificationMethodsInterface {
    return new utils.Interface(_abi) as GamificationMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GamificationMethods {
    return new Contract(address, _abi, signerOrProvider) as GamificationMethods;
  }
}
