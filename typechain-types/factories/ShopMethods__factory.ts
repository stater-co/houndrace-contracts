/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ShopMethods,
  ShopMethodsInterface,
  ShopConstructor,
} from "../ShopMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "NewDiscount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "calculateDiscount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600180553480156200001557600080fd5b50604051620018993803806200189983398181016040528101906200003b91906200032b565b806200005c62000050620000f860201b60201c565b6200010060201b60201c565b80600260008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050506200035d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022382620001d8565b810181811067ffffffffffffffff82111715620002455762000244620001e9565b5b80604052505050565b60006200025a620001c4565b905062000268828262000218565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200029a826200026d565b9050919050565b620002ac816200028d565b8114620002b857600080fd5b50565b600081519050620002cc81620002a1565b92915050565b600060408284031215620002eb57620002ea620001d3565b5b620002f760406200024e565b905060006200030984828501620002bb565b60008301525060206200031f84828501620002bb565b60208301525092915050565b600060408284031215620003445762000343620001ce565b5b60006200035484828501620002d2565b91505092915050565b61152c806200036d6000396000f3fe6080604052600436106100745760003560e01c8063ad6a87451161004e578063ad6a8745146100e8578063af640d0f14610125578063d8de658714610150578063f2fde38b1461017c5761007b565b8063299f9f0e1461007d578063715018a6146100a65780638da5cb5b146100bd5761007b565b3661007b57005b005b34801561008957600080fd5b506100a4600480360381019061009f919061106b565b6101a5565b005b3480156100b257600080fd5b506100bb610244565b005b3480156100c957600080fd5b506100d2610258565b6040516100df91906110a7565b60405180910390f35b3480156100f457600080fd5b5061010f600480360381019061010a91906110c2565b610281565b60405161011c9190611108565b60405180910390f35b34801561013157600080fd5b5061013a610cf8565b6040516101479190611108565b60405180910390f35b34801561015c57600080fd5b50610165610cfe565b604051610173929190611123565b60405180910390f35b34801561018857600080fd5b506101a3600480360381019061019e91906110c2565b610d50565b005b6101ad610dd3565b80600260008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505050565b61024c610dd3565b6102566000610e51565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060005b600154811015610cee5760016005600083815260200190815260200160002060040160049054906101000a900460ff1660ff160361067e5760005b600560008381526020019081526020016000206001018054905081101561067c576005600083815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff1683118061031d5750600183145b8015610355575060016005600084815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff16115b1561066b576005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e866005600086815260200190815260200160002060010184815481106103d4576103d361114c565b5b90600052602060002001546040518363ffffffff1660e01b81526004016103fc92919061117b565b602060405180830381865afa92505050801561043657506040513d601f19601f8201168201806040525081019061043391906111d0565b60015b610472573d8060008114610466576040519150601f19603f3d011682016040523d82523d6000602084013e61046b565b606091505b505061066a565b600081111561066857426005600085815260200190815260200160002060020154111580156104b7575042600560008581526020019081526020016000206003015410155b806104fa5750600060056000858152602001908152602001600020600201541480156104f9575060006005600085815260200190815260200160002060030154145b5b15610667576005600084815260200190815260200160002060040160059054906101000a900460ff1615610636576005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f242432a87306005600088815260200190815260200160002060010186815481106105a4576105a361114c565b5b906000526020600020015460016040518563ffffffff1660e01b81526004016105d0949392919061129f565b600060405180830381600087803b1580156105ea57600080fd5b505af11580156105fe573d6000803e3d6000fd5b505050506005600084815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff169350610666565b6005600084815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff1693505b5b5b505b5b8061067590611326565b90506102c2565b505b60026005600083815260200190815260200160002060040160049054906101000a900460ff1660ff16036108ca576005600082815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff168211806106e65750600182145b801561071e575060016005600083815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff16115b156108c9576005600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b341aed856040518263ffffffff1660e01b815260040161079291906110a7565b602060405180830381865afa9250505080156107cc57506040513d601f19601f820116820180604052508101906107c991906111d0565b60015b610808573d80600081146107fc576040519150601f19603f3d011682016040523d82523d6000602084013e610801565b606091505b50506108c8565b60008111156108c6574260056000848152602001908152602001600020600201541115801561084d575042600560008481526020019081526020016000206003015410155b8061089057506000600560008481526020019081526020016000206002015414801561088f575060006005600084815260200190815260200160002060030154145b5b156108c5576005600083815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff1692505b5b505b5b5b60006005600083815260200190815260200160002060040160049054906101000a900460ff1660ff1603610cdd5760005b6005600083815260200190815260200160002060010180549050811015610cdb576005600083815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff168311806109565750600183145b801561098e575060016005600084815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff16115b15610cca576005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e600560008581526020019081526020016000206001018381548110610a0d57610a0c61114c565b5b90600052602060002001546040518263ffffffff1660e01b8152600401610a349190611108565b602060405180830381865afa925050508015610a6e57506040513d601f19601f82011682018060405250810190610a6b9190611383565b60015b610aaa573d8060008114610a9e576040519150601f19603f3d011682016040523d82523d6000602084013e610aa3565b606091505b5050610cc9565b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cc75742600560008581526020019081526020016000206002015411158015610b19575042600560008581526020019081526020016000206003015410155b80610b5c575060006005600085815260200190815260200160002060020154148015610b5b575060006005600085815260200190815260200160002060030154145b5b15610cc6576005600084815260200190815260200160002060040160059054906101000a900460ff1615610c95576005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8730600560008881526020019081526020016000206001018681548110610c0657610c0561114c565b5b90600052602060002001546040518463ffffffff1660e01b8152600401610c2f939291906113b0565b600060405180830381600087803b158015610c4957600080fd5b505af1158015610c5d573d6000803e3d6000fd5b505050506005600084815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff169350610cc5565b6005600084815260200190815260200160002060040160009054906101000a900463ffffffff1663ffffffff1693505b5b5b505b5b80610cd490611326565b90506108fb565b505b80610ce790611326565b9050610287565b5080915050919050565b60015481565b60028060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b610d58610dd3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe9061146a565b60405180910390fd5b610dd081610e51565b50565b610ddb610f15565b73ffffffffffffffffffffffffffffffffffffffff16610df9610258565b73ffffffffffffffffffffffffffffffffffffffff1614610e4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e46906114d6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f7a82610f31565b810181811067ffffffffffffffff82111715610f9957610f98610f42565b5b80604052505050565b6000610fac610f1d565b9050610fb88282610f71565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fe882610fbd565b9050919050565b610ff881610fdd565b811461100357600080fd5b50565b60008135905061101581610fef565b92915050565b60006040828403121561103157611030610f2c565b5b61103b6040610fa2565b9050600061104b84828501611006565b600083015250602061105f84828501611006565b60208301525092915050565b60006040828403121561108157611080610f27565b5b600061108f8482850161101b565b91505092915050565b6110a181610fdd565b82525050565b60006020820190506110bc6000830184611098565b92915050565b6000602082840312156110d8576110d7610f27565b5b60006110e684828501611006565b91505092915050565b6000819050919050565b611102816110ef565b82525050565b600060208201905061111d60008301846110f9565b92915050565b60006040820190506111386000830185611098565b6111456020830184611098565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506111906000830185611098565b61119d60208301846110f9565b9392505050565b6111ad816110ef565b81146111b857600080fd5b50565b6000815190506111ca816111a4565b92915050565b6000602082840312156111e6576111e5610f27565b5b60006111f4848285016111bb565b91505092915050565b6000819050919050565b6000819050919050565b600061122c611227611222846111fd565b611207565b6110ef565b9050919050565b61123c81611211565b82525050565b600082825260208201905092915050565b7f3078303000000000000000000000000000000000000000000000000000000000600082015250565b6000611289600483611242565b915061129482611253565b602082019050919050565b600060a0820190506112b46000830187611098565b6112c16020830186611098565b6112ce60408301856110f9565b6112db6060830184611233565b81810360808301526112ec8161127c565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611331826110ef565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611363576113626112f7565b5b600182019050919050565b60008151905061137d81610fef565b92915050565b60006020828403121561139957611398610f27565b5b60006113a78482850161136e565b91505092915050565b60006060820190506113c56000830186611098565b6113d26020830185611098565b6113df60408301846110f9565b949350505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006114546026836113e7565b915061145f826113f8565b604082019050919050565b6000602082019050818103600083015261148381611447565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006114c06020836113e7565b91506114cb8261148a565b602082019050919050565b600060208201905081810360008301526114ef816114b3565b905091905056fea2646970667358221220c1f84fe5b0759f92d37282f17aca6477344b0cd2279795264edf21ae5415372564736f6c63430008110033";

type ShopMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShopMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShopMethods__factory extends ContractFactory {
  constructor(...args: ShopMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShopMethods";
  }

  deploy(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShopMethods> {
    return super.deploy(input, overrides || {}) as Promise<ShopMethods>;
  }
  getDeployTransaction(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): ShopMethods {
    return super.attach(address) as ShopMethods;
  }
  connect(signer: Signer): ShopMethods__factory {
    return super.connect(signer) as ShopMethods__factory;
  }
  static readonly contractName: "ShopMethods";
  public readonly contractName: "ShopMethods";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShopMethodsInterface {
    return new utils.Interface(_abi) as ShopMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShopMethods {
    return new Contract(address, _abi, signerOrProvider) as ShopMethods;
  }
}
