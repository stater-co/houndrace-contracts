/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ShopMethods,
  ShopMethodsInterface,
  ShopConstructor,
} from "../ShopMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "NewDiscount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "calculateDiscount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "alphadune",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805534801561001457600080fd5b50604051611068380380611068833981016040819052610033916100f6565b8061003d3361008a565b8051600280546001600160a01b03199081166001600160a01b039384161790915560208301516003805483169184169190911790556040909201516004805490931691161790555061016f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100f157600080fd5b919050565b60006060828403121561010857600080fd5b604051606081016001600160401b038111828210171561013857634e487b7160e01b600052604160045260246000fd5b604052610144836100da565b8152610152602084016100da565b6020820152610163604084016100da565b60408201529392505050565b610eea8061017e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063af640d0f1161005b578063af640d0f146100da578063d6dc0dfd146100e3578063d8de6587146100f6578063f2fde38b1461015a57600080fd5b8063715018a6146100825780638da5cb5b1461008c578063ad6a8745146100b9575b600080fd5b61008a61016d565b005b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100cc6100c7366004610d33565b610181565b6040519081526020016100b0565b6100cc60015481565b61008a6100f1366004610d57565b610ae9565b6002546003546004546101239273ffffffffffffffffffffffffffffffffffffffff908116928116911683565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529216918101919091526060016100b0565b61008a610168366004610d33565b610b5f565b610175610c1b565b61017f6000610c9c565b565b60008060005b600154811015610ae257600081815260056020526040902060040154640100000000900460ff1660010361055b5760005b6000828152600560205260409020600101548110156105595760008281526005602052604090206004015463ffffffff168311806101f65750826001145b801561021b5750600082815260056020526040902060040154600163ffffffff909116115b1561054957600082815260056020526040902080546001909101805473ffffffffffffffffffffffffffffffffffffffff9092169162fdd58e9188918590811061026757610267610df0565b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381865afa92505050801561031b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261031891810190610e1f565b60015b610355573d808015610349576040519150601f19603f3d011682016040523d82523d6000602084013e61034e565b606091505b5050610549565b801561054757600083815260056020526040902060020154421080159061038d57506000838152600560205260409020600301544211155b806103c157506000838152600560205260409020600201541580156103c15750600083815260056020526040902060030154155b156105475760008381526005602052604090206004015465010000000000900460ff161561052c57600083815260056020526040902080546004546001909201805473ffffffffffffffffffffffffffffffffffffffff9283169363f242432a938b939116918790811061043757610437610df0565b60009182526020909120015460405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048083019190915292909316602484015260448301526001606483015260a0608483015260a48201527f307830300000000000000000000000000000000000000000000000000000000060c482015260e401600060405180830381600087803b1580156104f457600080fd5b505af1158015610508573d6000803e3d6000fd5b50505060008481526005602052604090206004015463ffffffff1694506105479050565b60008381526005602052604090206004015463ffffffff1693505b505b61055281610e38565b90506101b8565b505b600081815260056020526040902060040154640100000000900460ff1660020361074d5760008181526005602052604090206004015463ffffffff168211806105a45750816001145b80156105c95750600081815260056020526040902060040154600163ffffffff909116115b1561074d57600081815260056020526040908190205490517f4b341aed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015290911690634b341aed90602401602060405180830381865afa925050508015610685575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261068291810190610e1f565b60015b6106bf573d8080156106b3576040519150601f19603f3d011682016040523d82523d6000602084013e6106b8565b606091505b505061074d565b801561074b5760008281526005602052604090206002015442108015906106f757506000828152600560205260409020600301544211155b8061072b575060008281526005602052604090206002015415801561072b5750600082815260056020526040902060030154155b1561074b5760008281526005602052604090206004015463ffffffff1692505b505b600081815260056020526040812060040154640100000000900460ff169003610ad25760005b600082815260056020526040902060010154811015610ad05760008281526005602052604090206004015463ffffffff168311806107b15750826001145b80156107d65750600082815260056020526040902060040154600163ffffffff909116115b15610ac057600082815260056020526040902080546001909101805473ffffffffffffffffffffffffffffffffffffffff90921691636352211e91908490811061082257610822610df0565b90600052602060002001546040518263ffffffff1660e01b815260040161084b91815260200190565b602060405180830381865afa9250505080156108a2575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261089f91810190610e97565b60015b6108dc573d8080156108d0576040519150601f19603f3d011682016040523d82523d6000602084013e6108d5565b606091505b5050610ac0565b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610abe57600083815260056020526040902060020154421080159061094157506000838152600560205260409020600301544211155b8061097557506000838152600560205260409020600201541580156109755750600083815260056020526040902060030154155b15610abe5760008381526005602052604090206004015465010000000000900460ff1615610aa357600083815260056020526040902080546004546001909201805473ffffffffffffffffffffffffffffffffffffffff928316936342842e0e938b93911691879081106109eb576109eb610df0565b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401600060405180830381600087803b158015610a6b57600080fd5b505af1158015610a7f573d6000803e3d6000fd5b50505060008481526005602052604090206004015463ffffffff169450610abe9050565b60008381526005602052604090206004015463ffffffff1693505b505b610ac981610e38565b9050610773565b505b610adb81610e38565b9050610187565b5092915050565b610af1610c1b565b8051600280547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff938416179091556020830151600380548316918416919091179055604090920151600480549093169116179055565b610b67610c1b565b73ffffffffffffffffffffffffffffffffffffffff8116610c0f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610c1881610c9c565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461017f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c06565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b73ffffffffffffffffffffffffffffffffffffffff81168114610c1857600080fd5b600060208284031215610d4557600080fd5b8135610d5081610d11565b9392505050565b600060608284031215610d6957600080fd5b6040516060810181811067ffffffffffffffff82111715610db3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528235610dc181610d11565b81526020830135610dd181610d11565b60208201526040830135610de481610d11565b60408201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610e3157600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e90577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600060208284031215610ea957600080fd5b8151610d5081610d1156fea264697066735822122022d7791762c36de9f770944a289649ef11824399273d8df8ebbe12abc19dc63364736f6c63430008110033";

type ShopMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShopMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShopMethods__factory extends ContractFactory {
  constructor(...args: ShopMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShopMethods";
  }

  deploy(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShopMethods> {
    return super.deploy(input, overrides || {}) as Promise<ShopMethods>;
  }
  getDeployTransaction(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): ShopMethods {
    return super.attach(address) as ShopMethods;
  }
  connect(signer: Signer): ShopMethods__factory {
    return super.connect(signer) as ShopMethods__factory;
  }
  static readonly contractName: "ShopMethods";
  public readonly contractName: "ShopMethods";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShopMethodsInterface {
    return new utils.Interface(_abi) as ShopMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShopMethods {
    return new Contract(address, _abi, signerOrProvider) as ShopMethods;
  }
}
