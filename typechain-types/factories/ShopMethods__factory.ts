/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ShopMethods,
  ShopMethodsInterface,
  ShopConstructor,
} from "../ShopMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "targets",
            type: "bytes4[]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "NewDiscount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
    ],
    name: "calculateDiscount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "alphadune",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "alphadune",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "targets",
            type: "bytes4[]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016002553480156200001657600080fd5b506040516200194238038062001942833981016040819052620000399162000448565b805160808201518291906200004e336200018c565b80518251146200005d57600080fd5b60005b8251811015620000f7578181815181106200007f576200007f6200057e565b602002602001015160016000858481518110620000a057620000a06200057e565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555080620000ef9062000594565b905062000060565b5050815180518392506003916200011491839160200190620001dc565b506020828101516001830180546001600160a01b039283166001600160a01b031991821617909155604085015160028501805491841691831691909117905560608501516003850180549190931691161790556080830151805162000180926004850192019062000246565b509050505050620005bc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82805482825590600052602060002090810192821562000234579160200282015b828111156200023457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001fd565b5062000242929150620002ef565b5090565b82805482825590600052602060002090600701600890048101928215620002345791602002820160005b83821115620002b357835183826101000a81548163ffffffff021916908360e01c0217905550926020019260040160208160030104928301926001030262000270565b8015620002e55782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620002b3565b5050620002429291505b5b80821115620002425760008155600101620002f0565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b038111828210171562000341576200034162000306565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000372576200037262000306565b604052919050565b60006001600160401b0382111562000396576200039662000306565b5060051b60200190565b80516001600160a01b0381168114620003b857600080fd5b919050565b600082601f830112620003cf57600080fd5b81516020620003e8620003e2836200037a565b62000347565b82815260059290921b840181019181810190868411156200040857600080fd5b8286015b848110156200043d5780516001600160e01b0319811681146200042f5760008081fd5b83529183019183016200040c565b509695505050505050565b600060208083850312156200045c57600080fd5b82516001600160401b03808211156200047457600080fd5b9084019060a082870312156200048957600080fd5b620004936200031c565b825182811115620004a357600080fd5b8301601f81018813620004b557600080fd5b8051620004c6620003e2826200037a565b81815260059190911b8201860190868101908a831115620004e657600080fd5b928701925b828410156200050f57620004ff84620003a0565b82529287019290870190620004eb565b84525062000522915050838501620003a0565b848201526200053460408401620003a0565b60408201526200054760608401620003a0565b606082015260808301519350818411156200056157600080fd5b6200056f87858501620003bd565b60808201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620005b557634e487b7160e01b600052601160045260246000fd5b5060010190565b61137680620005cc6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ad6a87451161005b578063ad6a8745146100cc578063af640d0f146100ed578063d8de6587146100f6578063f2fde38b1461015a57600080fd5b80633d27878414610082578063715018a6146100975780638da5cb5b1461009f575b600080fd5b610095610090366004611137565b61016d565b005b610095610234565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100df6100da366004611258565b610248565b6040519081526020016100c3565b6100df60025481565b6004546005546006546101239273ffffffffffffffffffffffffffffffffffffffff908116928116911683565b6040805173ffffffffffffffffffffffffffffffffffffffff948516815292841660208401529216918101919091526060016100c3565b610095610168366004611258565b610bf7565b610175610cb0565b80518051829160039161018f918391602090910190610e63565b5060208281015160018301805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155604085015160028501805491841691831691909117905560608501516003850180549190931691161790556080830151805161021e9260048501920190610eed565b5050815160808301516102319250610d31565b50565b61023c610cb0565b6102466000610dee565b565b3360009081526001602052604081205460e01b7fffffffff000000000000000000000000000000000000000000000000000000009081168235919091161461028f57600080fd5b6000805b600254811015610bee57600081815260096020526040902060040154640100000000900460ff166001036106675760005b6000828152600960205260409020600101548110156106655760008281526009602052604090206004015463ffffffff168311806103025750826001145b80156103275750600082815260096020526040902060040154600163ffffffff909116115b1561065557600082815260096020526040902080546001909101805473ffffffffffffffffffffffffffffffffffffffff9092169162fdd58e918891859081106103735761037361127c565b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381865afa925050508015610427575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610424918101906112ab565b60015b610461573d808015610455576040519150601f19603f3d011682016040523d82523d6000602084013e61045a565b606091505b5050610655565b801561065357600083815260096020526040902060020154421080159061049957506000838152600960205260409020600301544211155b806104cd57506000838152600960205260409020600201541580156104cd5750600083815260096020526040902060030154155b156106535760008381526009602052604090206004015465010000000000900460ff161561063857600083815260096020526040902080546006546001909201805473ffffffffffffffffffffffffffffffffffffffff9283169363f242432a938b93911691879081106105435761054361127c565b60009182526020909120015460405160e085901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff93841660048083019190915292909316602484015260448301526001606483015260a0608483015260a48201527f307830300000000000000000000000000000000000000000000000000000000060c482015260e401600060405180830381600087803b15801561060057600080fd5b505af1158015610614573d6000803e3d6000fd5b50505060008481526009602052604090206004015463ffffffff1694506106539050565b60008381526009602052604090206004015463ffffffff1693505b505b61065e816112c4565b90506102c4565b505b600081815260096020526040902060040154640100000000900460ff166002036108595760008181526009602052604090206004015463ffffffff168211806106b05750816001145b80156106d55750600081815260096020526040902060040154600163ffffffff909116115b1561085957600081815260096020526040908190205490517f4b341aed00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015290911690634b341aed90602401602060405180830381865afa925050508015610791575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261078e918101906112ab565b60015b6107cb573d8080156107bf576040519150601f19603f3d011682016040523d82523d6000602084013e6107c4565b606091505b5050610859565b801561085757600082815260096020526040902060020154421080159061080357506000828152600960205260409020600301544211155b8061083757506000828152600960205260409020600201541580156108375750600082815260096020526040902060030154155b156108575760008281526009602052604090206004015463ffffffff1692505b505b600081815260096020526040812060040154640100000000900460ff169003610bde5760005b600082815260096020526040902060010154811015610bdc5760008281526009602052604090206004015463ffffffff168311806108bd5750826001145b80156108e25750600082815260096020526040902060040154600163ffffffff909116115b15610bcc57600082815260096020526040902080546001909101805473ffffffffffffffffffffffffffffffffffffffff90921691636352211e91908490811061092e5761092e61127c565b90600052602060002001546040518263ffffffff1660e01b815260040161095791815260200190565b602060405180830381865afa9250505080156109ae575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526109ab91810190611323565b60015b6109e8573d8080156109dc576040519150601f19603f3d011682016040523d82523d6000602084013e6109e1565b606091505b5050610bcc565b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bca576000838152600960205260409020600201544210801590610a4d57506000838152600960205260409020600301544211155b80610a815750600083815260096020526040902060020154158015610a815750600083815260096020526040902060030154155b15610bca5760008381526009602052604090206004015465010000000000900460ff1615610baf57600083815260096020526040902080546006546001909201805473ffffffffffffffffffffffffffffffffffffffff928316936342842e0e938b9391169187908110610af757610af761127c565b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401600060405180830381600087803b158015610b7757600080fd5b505af1158015610b8b573d6000803e3d6000fd5b50505060008481526009602052604090206004015463ffffffff169450610bca9050565b60008381526009602052604090206004015463ffffffff1693505b505b610bd5816112c4565b905061087f565b505b610be7816112c4565b9050610293565b5090505b919050565b610bff610cb0565b73ffffffffffffffffffffffffffffffffffffffff8116610ca7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61023181610dee565b60005473ffffffffffffffffffffffffffffffffffffffff163314610246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c9e565b8051825114610d3f57600080fd5b60005b8251811015610de957818181518110610d5d57610d5d61127c565b602002602001015160016000858481518110610d7b57610d7b61127c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908360e01c021790555080610de2906112c4565b9050610d42565b505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610edd579160200282015b82811115610edd57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190610e83565b50610ee9929150610f90565b5090565b82805482825590600052602060002090600701600890048101928215610edd5791602002820160005b83821115610f5757835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610f16565b8015610f875782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610f57565b5050610ee99291505b5b80821115610ee95760008155600101610f91565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610ff757610ff7610fa5565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561104457611044610fa5565b604052919050565b600067ffffffffffffffff82111561106657611066610fa5565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461023157600080fd5b8035610bf281611070565b600082601f8301126110ae57600080fd5b813560206110c36110be8361104c565b610ffd565b82815260059290921b840181019181810190868411156110e257600080fd5b8286015b8481101561112c5780357fffffffff000000000000000000000000000000000000000000000000000000008116811461111f5760008081fd5b83529183019183016110e6565b509695505050505050565b6000602080838503121561114a57600080fd5b823567ffffffffffffffff8082111561116257600080fd5b9084019060a0828703121561117657600080fd5b61117e610fd4565b82358281111561118d57600080fd5b8301601f8101881361119e57600080fd5b80356111ac6110be8261104c565b81815260059190911b8201860190868101908a8311156111cb57600080fd5b928701925b828410156111f25783356111e381611070565b825292870192908701906111d0565b845250611203915050838501611092565b8482015261121360408401611092565b604082015261122460608401611092565b6060820152608083013593508184111561123d57600080fd5b6112498785850161109d565b60808201529695505050505050565b60006020828403121561126a57600080fd5b813561127581611070565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156112bd57600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361131c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60006020828403121561133557600080fd5b81516112758161107056fea2646970667358221220972742eba8209cd0ae94aa221ffa3434da5374968cf718afdef55abfd8a282a964736f6c63430008110033";

type ShopMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShopMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShopMethods__factory extends ContractFactory {
  constructor(...args: ShopMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShopMethods";
  }

  deploy(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShopMethods> {
    return super.deploy(input, overrides || {}) as Promise<ShopMethods>;
  }
  getDeployTransaction(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): ShopMethods {
    return super.attach(address) as ShopMethods;
  }
  connect(signer: Signer): ShopMethods__factory {
    return super.connect(signer) as ShopMethods__factory;
  }
  static readonly contractName: "ShopMethods";
  public readonly contractName: "ShopMethods";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShopMethodsInterface {
    return new utils.Interface(_abi) as ShopMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShopMethods {
    return new Contract(address, _abi, signerOrProvider) as ShopMethods;
  }
}
