/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Params, ParamsInterface, ShopConstructor } from "../Params";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "discounts",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "discountsReceiverWallet",
            type: "address",
          },
          {
            internalType: "bytes4[][]",
            name: "targets",
            type: "bytes4[][]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToUsePerUsableDiscount",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct Discount.Struct",
        name: "discount",
        type: "tuple",
      },
    ],
    name: "NewDiscount",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "zerocost",
        type: "address",
      },
      {
        internalType: "address",
        name: "discounts",
        type: "address",
      },
      {
        internalType: "address",
        name: "restricted",
        type: "address",
      },
      {
        internalType: "address",
        name: "discountsReceiverWallet",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "discounts",
    outputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "dateStart",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "dateStop",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountToUsePerUsableDiscount",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "discount",
        type: "uint32",
      },
      {
        internalType: "uint8",
        name: "tokenType",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "usable",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "discountId",
        type: "uint256",
      },
    ],
    name: "getDiscount",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenContract",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "dateStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dateStop",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountToUsePerUsableDiscount",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "discount",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "usable",
            type: "bool",
          },
        ],
        internalType: "struct Discount.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "operators",
            type: "address[]",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "discounts",
            type: "address",
          },
          {
            internalType: "address",
            name: "restricted",
            type: "address",
          },
          {
            internalType: "address",
            name: "discountsReceiverWallet",
            type: "address",
          },
          {
            internalType: "bytes4[][]",
            name: "targets",
            type: "bytes4[][]",
          },
        ],
        internalType: "struct ShopConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDiscounts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "whitelists",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016002553480156200001657600080fd5b50604051620018b1380380620018b183398101604081905262000039916200069b565b805160c08201516200004b3362000234565b80518251146200005a57600080fd5b60005b8251811015620001735760005b8282815181106200007f576200007f62000795565b6020026020010151518110156200015f5760016000858481518110620000a957620000a962000795565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020838381518110620000e657620000e662000795565b6020026020010151828151811062000102576200010262000795565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c919091029190911790556200015781620007ab565b90506200006a565b506200016b81620007ab565b90506200005d565b505081518051839250600391620001909183916020019062000284565b506020828101516001830180546001600160a01b03199081166001600160a01b039384161790915560408501516002850180548316918416919091179055606085015160038501805483169184169190911790556080850151600485018054831691841691909117905560a0850151600585018054909216921691909117905560c08301518051620002299260068501920190620002ee565b5090505050620007d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620002dc579160200282015b82811115620002dc57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620002a5565b50620002ea9291506200034e565b5090565b82805482825590600052602060002090810192821562000340579160200282015b828111156200034057825180516200032f91849160209091019062000365565b50916020019190600101906200030f565b50620002ea92915062000413565b5b80821115620002ea57600081556001016200034f565b82805482825590600052602060002090600701600890048101928215620002dc5791602002820160005b83821115620003d257835183826101000a81548163ffffffff021916908360e01c021790555092602001926004016020816003010492830192600103026200038f565b8015620004045782816101000a81549063ffffffff0219169055600401602081600301049283019260010302620003d2565b5050620002ea9291506200034e565b80821115620002ea5760006200042a828262000434565b5060010162000413565b5080546000825560070160089004906000526020600020908101906200045b91906200034e565b50565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b03811182821017156200049957620004996200045e565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004ca57620004ca6200045e565b604052919050565b60006001600160401b03821115620004ee57620004ee6200045e565b5060051b60200190565b80516001600160a01b03811681146200051057600080fd5b919050565b600082601f8301126200052757600080fd5b81516020620005406200053a83620004d2565b6200049f565b82815260059290921b840181019181810190868411156200056057600080fd5b8286015b8481101562000586576200057881620004f8565b835291830191830162000564565b509695505050505050565b600082601f830112620005a357600080fd5b81516020620005b66200053a83620004d2565b828152600592831b8501820192828201919087851115620005d657600080fd5b8387015b858110156200068e5780516001600160401b03811115620005fb5760008081fd5b8801603f81018a136200060e5760008081fd5b858101516040620006236200053a83620004d2565b82815291851b8301810191888101908d841115620006415760008081fd5b938201935b838510156200067c57845192506001600160e01b0319831683146200066b5760008081fd5b828252938901939089019062000646565b885250505093850193508401620005da565b5090979650505050505050565b600060208284031215620006ae57600080fd5b81516001600160401b0380821115620006c657600080fd5b9083019060e08286031215620006db57600080fd5b620006e562000474565b825182811115620006f557600080fd5b620007038782860162000515565b8252506200071460208401620004f8565b60208201526200072760408401620004f8565b60408201526200073a60608401620004f8565b60608201526200074d60808401620004f8565b60808201526200076060a08401620004f8565b60a082015260c0830151828111156200077857600080fd5b620007868782860162000591565b60c08301525095945050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620007cc57634e487b7160e01b600052601160045260246000fd5b5060010190565b6110ce80620007e36000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639aca06dc11610076578063bae6a6901161005b578063bae6a69014610190578063d8de65871461025a578063f2fde38b146102da57600080fd5b80639aca06dc14610175578063af640d0f1461018757600080fd5b80635b19e294116100a75780635b19e29414610101578063715018a6146101455780638da5cb5b1461014d57600080fd5b80632336dbe4146100c3578063507e3a27146100ec575b600080fd5b6100d66100d1366004610b7f565b6102ed565b6040516100e39190610b98565b60405180910390f35b6100ff6100fa366004610ed8565b61043b565b005b61011461010f366004610fbe565b61052f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100e3565b6100ff610575565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e3565b6002545b6040519081526020016100e3565b61017960025481565b61020361019e366004610b7f565b600b602052600090815260409020805460028201546003830154600484015460059094015473ffffffffffffffffffffffffffffffffffffffff90931693919290919063ffffffff81169060ff64010000000082048116916501000000000090041687565b6040805173ffffffffffffffffffffffffffffffffffffffff9098168852602088019690965294860193909352606085019190915263ffffffff16608084015260ff1660a0830152151560c082015260e0016100e3565b6004546005546006546007546008546102939473ffffffffffffffffffffffffffffffffffffffff908116948116938116928116911685565b6040805173ffffffffffffffffffffffffffffffffffffffff968716815294861660208601529285169284019290925283166060830152909116608082015260a0016100e3565b6100ff6102e8366004610fe8565b610589565b610356604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081526020016000815260200160008152602001600063ffffffff168152602001600060ff1681526020016000151581525090565b6000828152600b6020908152604091829020825161010081018452815473ffffffffffffffffffffffffffffffffffffffff168152600182018054855181860281018601909652808652919492938581019392908301828280156103d957602002820191906000526020600020905b8154815260200190600101908083116103c5575b505050918352505060028201546020820152600382015460408201526004820154606082015260059091015463ffffffff8116608083015260ff6401000000008204811660a08401526501000000000090910416151560c09091015292915050565b610443610642565b80518051829160039161045d91839160209091019061099e565b506020828101516001830180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9384161790915560408501516002850180548316918416919091179055606085015160038501805483169184169190911790556080850151600485018054831691841691909117905560a0850151600585018054909216921691909117905560c083015180516105199260068501920190610a28565b5050815160c083015161052c92506106c3565b50565b6001602052816000526040600020818154811061054b57600080fd5b9060005260206000209060089182820401919006600402915091509054906101000a900460e01b81565b61057d610642565b6105876000610929565b565b610591610642565b73ffffffffffffffffffffffffffffffffffffffff8116610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61052c81610929565b60005473ffffffffffffffffffffffffffffffffffffffff163314610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610630565b80518251146106d157600080fd5b60005b82518110156109245760005b8282815181106106f2576106f261100a565b60200260200101515181101561091357600160008584815181106107185761071861100a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508110610836576001600085848151811061077a5761077a61100a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208383815181106107ce576107ce61100a565b602002602001015182815181106107e7576107e761100a565b60209081029190910181015182546001810184556000938452919092206008820401805463ffffffff60079093166004026101000a928302191660e09390931c91909102919091179055610903565b8282815181106108485761084861100a565b602002602001015181815181106108615761086161100a565b60200260200101516001600086858151811061087f5761087f61100a565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106108d2576108d261100a565b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908360e01c02179055505b61090c81611039565b90506106e0565b5061091d81611039565b90506106d4565b505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610a18579160200282015b82811115610a1857825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9091161782556020909201916001909101906109be565b50610a24929150610a81565b5090565b828054828255906000526020600020908101928215610a75579160200282015b82811115610a755782518051610a65918491602090910190610a96565b5091602001919060010190610a48565b50610a24929150610b3d565b5b80821115610a245760008155600101610a82565b82805482825590600052602060002090600701600890048101928215610a185791602002820160005b83821115610b0057835183826101000a81548163ffffffff021916908360e01c02179055509260200192600401602081600301049283019260010302610abf565b8015610b305782816101000a81549063ffffffff0219169055600401602081600301049283019260010302610b00565b5050610a24929150610a81565b80821115610a24576000610b518282610b5a565b50600101610b3d565b50805460008255600701600890049060005260206000209081019061052c9190610a81565b600060208284031215610b9157600080fd5b5035919050565b6020808252825173ffffffffffffffffffffffffffffffffffffffff16828201528281015161010060408401819052815161012085018190526000939283019184916101408701905b80841015610c015784518252938501936001939093019290850190610be1565b506040880151606088015260608801516080880152608088015160a088015260a08801519450610c3960c088018663ffffffff169052565b60c088015160ff1660e08881019190915290970151151595019490945250929392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715610cb157610cb1610c5f565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610cfe57610cfe610c5f565b604052919050565b600067ffffffffffffffff821115610d2057610d20610c5f565b5060051b60200190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d4e57600080fd5b919050565b600082601f830112610d6457600080fd5b81356020610d79610d7483610d06565b610cb7565b82815260059290921b84018101918181019086841115610d9857600080fd5b8286015b84811015610dba57610dad81610d2a565b8352918301918301610d9c565b509695505050505050565b600082601f830112610dd657600080fd5b81356020610de6610d7483610d06565b828152600592831b8501820192828201919087851115610e0557600080fd5b8387015b85811015610ecb57803567ffffffffffffffff811115610e295760008081fd5b8801603f81018a13610e3b5760008081fd5b858101356040610e4d610d7483610d06565b82815291851b8301810191888101908d841115610e6a5760008081fd5b938201935b83851015610eba57843592507fffffffff0000000000000000000000000000000000000000000000000000000083168314610eaa5760008081fd5b8282529389019390890190610e6f565b885250505093850193508401610e09565b5090979650505050505050565b600060208284031215610eea57600080fd5b813567ffffffffffffffff80821115610f0257600080fd5b9083019060e08286031215610f1657600080fd5b610f1e610c8e565b823582811115610f2d57600080fd5b610f3987828601610d53565b825250610f4860208401610d2a565b6020820152610f5960408401610d2a565b6040820152610f6a60608401610d2a565b6060820152610f7b60808401610d2a565b6080820152610f8c60a08401610d2a565b60a082015260c083013582811115610fa357600080fd5b610faf87828601610dc5565b60c08301525095945050505050565b60008060408385031215610fd157600080fd5b610fda83610d2a565b946020939093013593505050565b600060208284031215610ffa57600080fd5b61100382610d2a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611091577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212202b9797e4d9ef9e4e6d6b4bddda1537426225f5bab5f5f766d378430802fd2c9e64736f6c63430008110033";

type ParamsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ParamsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Params__factory extends ContractFactory {
  constructor(...args: ParamsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Params";
  }

  deploy(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Params> {
    return super.deploy(input, overrides || {}) as Promise<Params>;
  }
  getDeployTransaction(
    input: ShopConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Params {
    return super.attach(address) as Params;
  }
  connect(signer: Signer): Params__factory {
    return super.connect(signer) as Params__factory;
  }
  static readonly contractName: "Params";
  public readonly contractName: "Params";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ParamsInterface {
    return new utils.Interface(_abi) as ParamsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Params {
    return new Contract(address, _abi, signerOrProvider) as Params;
  }
}
