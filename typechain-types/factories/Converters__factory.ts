/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Converters, ConvertersInterface } from "../Converters";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "erc721Contract",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "erc721IdsToOwners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61064e610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806340160f2d1461003a575b600080fd5b610054600480360381019061004f91906103ca565b61006a565b60405161006191906104e4565b60405180910390f35b60606000825167ffffffffffffffff81111561008957610088610251565b5b6040519080825280602002602001820160405280156100b75781602001602082028036833780820191505090505b509050600084905060005b84518110156101bd578173ffffffffffffffffffffffffffffffffffffffff16636352211e8683815181106100fa576100f9610506565b5b60200260200101516040518263ffffffff1660e01b815260040161011e9190610544565b602060405180830381865afa15801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f9190610574565b83828151811061017257610171610506565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806101b6906105d0565b90506100c2565b50819250505092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610208826101dd565b9050919050565b610218816101fd565b811461022357600080fd5b50565b6000813590506102358161020f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61028982610240565b810181811067ffffffffffffffff821117156102a8576102a7610251565b5b80604052505050565b60006102bb6101c9565b90506102c78282610280565b919050565b600067ffffffffffffffff8211156102e7576102e6610251565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b610310816102fd565b811461031b57600080fd5b50565b60008135905061032d81610307565b92915050565b6000610346610341846102cc565b6102b1565b90508083825260208201905060208402830185811115610369576103686102f8565b5b835b81811015610392578061037e888261031e565b84526020840193505060208101905061036b565b5050509392505050565b600082601f8301126103b1576103b061023b565b5b81356103c1848260208601610333565b91505092915050565b600080604083850312156103e1576103e06101d3565b5b60006103ef85828601610226565b925050602083013567ffffffffffffffff8111156104105761040f6101d8565b5b61041c8582860161039c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61045b816101fd565b82525050565b600061046d8383610452565b60208301905092915050565b6000602082019050919050565b600061049182610426565b61049b8185610431565b93506104a683610442565b8060005b838110156104d75781516104be8882610461565b97506104c983610479565b9250506001810190506104aa565b5085935050505092915050565b600060208201905081810360008301526104fe8184610486565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61053e816102fd565b82525050565b60006020820190506105596000830184610535565b92915050565b60008151905061056e8161020f565b92915050565b60006020828403121561058a576105896101d3565b5b60006105988482850161055f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006105db826102fd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361060d5761060c6105a1565b5b60018201905091905056fea26469706673582212204b682badb8428cc61f1afb38a19c11968591eb50f2a15fa083148e26ad255e7764736f6c63430008110033";

type ConvertersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvertersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Converters__factory extends ContractFactory {
  constructor(...args: ConvertersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Converters";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Converters> {
    return super.deploy(overrides || {}) as Promise<Converters>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Converters {
    return super.attach(address) as Converters;
  }
  connect(signer: Signer): Converters__factory {
    return super.connect(signer) as Converters__factory;
  }
  static readonly contractName: "Converters";
  public readonly contractName: "Converters";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvertersInterface {
    return new utils.Interface(_abi) as ConvertersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Converters {
    return new Contract(address, _abi, signerOrProvider) as Converters;
  }
}
