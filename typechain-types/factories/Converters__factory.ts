/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Converters, ConvertersInterface } from "../Converters";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "erc721Contract",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "erc721IdsToOwners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61042761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806340160f2d1461003a575b600080fd5b61004d6100483660046101f4565b610063565b60405161005a91906102e5565b60405180910390f35b60606000825167ffffffffffffffff811115610081576100816101c5565b6040519080825280602002602001820160405280156100aa578160200160208202803683370190505b5090508360005b8451811015610196578173ffffffffffffffffffffffffffffffffffffffff16636352211e8683815181106100e8576100e861033f565b60200260200101516040518263ffffffff1660e01b815260040161010e91815260200190565b602060405180830381865afa15801561012b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014f919061036e565b8382815181106101615761016161033f565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015261018f81610392565b90506100b1565b5090949350505050565b73ffffffffffffffffffffffffffffffffffffffff811681146101c257600080fd5b50565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561020757600080fd5b8235610212816101a0565b915060208381013567ffffffffffffffff8082111561023057600080fd5b818601915086601f83011261024457600080fd5b813581811115610256576102566101c5565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715610299576102996101c5565b6040529182528482019250838101850191898311156102b757600080fd5b938501935b828510156102d5578435845293850193928501926102bc565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561033357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610301565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561038057600080fd5b815161038b816101a0565b9392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036103ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220dbc486be4a82e890e930c3baab83e343090a4b3c6ece2127296463f75eb7a16964736f6c63430008110033";

type ConvertersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConvertersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Converters__factory extends ContractFactory {
  constructor(...args: ConvertersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Converters";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Converters> {
    return super.deploy(overrides || {}) as Promise<Converters>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Converters {
    return super.attach(address) as Converters;
  }
  connect(signer: Signer): Converters__factory {
    return super.connect(signer) as Converters__factory;
  }
  static readonly contractName: "Converters";
  public readonly contractName: "Converters";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConvertersInterface {
    return new utils.Interface(_abi) as ConvertersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Converters {
    return new Contract(address, _abi, signerOrProvider) as Converters;
  }
}
