/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Generator,
  GeneratorInterface,
  GeneratorConstructor,
} from "../Generator";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "incubator",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "randomness",
        type: "address",
      },
      {
        internalType: "address",
        name: "arenas",
        type: "address",
      },
      {
        internalType: "address",
        name: "hounds",
        type: "address",
      },
      {
        internalType: "address",
        name: "allowed",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "payments",
        type: "address",
      },
      {
        internalType: "address",
        name: "zerocost",
        type: "address",
      },
      {
        internalType: "address",
        name: "incubator",
        type: "address",
      },
      {
        internalType: "address",
        name: "gamification",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "address",
                name: "feeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "entryFeeCurrency",
                type: "address",
              },
              {
                internalType: "uint256[]",
                name: "participants",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "enqueueDates",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "arena",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "entryFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "from",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "to",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "currency",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "ids",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "amounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "enum Payment.PaymentTypes[]",
                    name: "paymentType",
                    type: "uint8[]",
                  },
                ],
                internalType: "struct Payment.Struct",
                name: "payments",
                type: "tuple",
              },
            ],
            internalType: "struct Core.Struct",
            name: "core",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastCompletion",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "totalParticipants",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "cooldown",
            type: "uint32",
          },
          {
            internalType: "enum Specie.Enum[]",
            name: "speciesAllowed",
            type: "uint8[]",
          },
          {
            internalType: "bool",
            name: "closed",
            type: "bool",
          },
        ],
        internalType: "struct Queue.Struct",
        name: "queue",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "queueId",
        type: "uint256",
      },
    ],
    name: "generate",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "address",
                name: "feeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "entryFeeCurrency",
                type: "address",
              },
              {
                internalType: "uint256[]",
                name: "participants",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "enqueueDates",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "arena",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "entryFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "from",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "to",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "currency",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "ids",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "amounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "enum Payment.PaymentTypes[]",
                    name: "paymentType",
                    type: "uint8[]",
                  },
                ],
                internalType: "struct Payment.Struct",
                name: "payments",
                type: "tuple",
              },
            ],
            internalType: "struct Core.Struct",
            name: "core",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        internalType: "struct Race.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "incubator",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "participants",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "terrain",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "theRandomness",
        type: "uint256",
      },
    ],
    name: "simulateClassicRace",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b1b38038062001b1b8339810160408190526200003491620001ac565b80620000403362000107565b8051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c083015160078054831691841691909117905560e0830151600880548316918416919091179055610100909201516009805490931691161790555062000277565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405161012081016001600160401b03811182821017156200018957634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114620001a757600080fd5b919050565b60006101208284031215620001c057600080fd5b620001ca62000157565b620001d5836200018f565b8152620001e5602084016200018f565b6020820152620001f8604084016200018f565b60408201526200020b606084016200018f565b60608201526200021e608084016200018f565b60808201526200023160a084016200018f565b60a08201526200024460c084016200018f565b60c08201526200025760e084016200018f565b60e08201526101006200026c8185016200018f565b908201529392505050565b61189480620002876000396000f3fe60806040526004361061006e5760003560e01c80638da5cb5b1161004b5780638da5cb5b146100e257806393380e7814610117578063d8de658714610145578063f2fde38b1461020a57005b80636774da7c14610077578063715018a6146100ad57806377479c9c146100c257005b3661007557005b005b34801561008357600080fd5b50610097610092366004610d79565b61022a565b6040516100a491906110a7565b60405180910390f35b3480156100b957600080fd5b506100756102cf565b3480156100ce57600080fd5b506100756100dd366004611204565b6102e3565b3480156100ee57600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a4565b34801561012357600080fd5b506101376101323660046112ba565b6103d2565b6040516100a4929190611308565b34801561015157600080fd5b506001546002546003546004546005546006546007546008546009546101a39873ffffffffffffffffffffffffffffffffffffffff908116988116978116968116958116948116938116928116911689565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a01529689169688019690965293871660608701529186166080860152851660a0850152841660c0840152831660e0830152909116610100820152610120016100a4565b34801561021657600080fd5b5061007561022536600461132d565b6104a0565b610232610652565b600554604051600091829173ffffffffffffffffffffffffffffffffffffffff909116906102639083903690611351565b600060405180830381855af49150503d806000811461029e576040519150601f19603f3d011682016040523d82523d6000602084013e6102a3565b606091505b5091509150816102b257600080fd5b808060200190518101906102c69190611653565b95945050505050565b6102d761055c565b6102e160006105dd565b565b6102eb61055c565b8051600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c083015160078054831691841691909117905560e083015160088054831691841691909117905561010090920151600980549093169116179055565b6007546040517f93380e78000000000000000000000000000000000000000000000000000000008152606091829173ffffffffffffffffffffffffffffffffffffffff909116906393380e7890610431908890889088906004016117d5565b600060405180830381865afa15801561044e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261049491908101906117fa565b91509150935093915050565b6104a861055c565b73ffffffffffffffffffffffffffffffffffffffff8116610550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610559816105dd565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610547565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060800160405280610665610680565b81526020016000815260200160008152602001606081525090565b60405180610120016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001600081526020016107296040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156107805761078061072e565b60405290565b604051610120810167ffffffffffffffff811182821017156107805761078061072e565b604051610100810167ffffffffffffffff811182821017156107805761078061072e565b6040516080810167ffffffffffffffff811182821017156107805761078061072e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156108385761083861072e565b604052919050565b600067ffffffffffffffff82111561085a5761085a61072e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261089757600080fd5b81356108aa6108a582610840565b6107f1565b8181528460208386010111156108bf57600080fd5b816020850160208301376000918101602001919091529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461055957600080fd5b8035610909816108dc565b919050565b600067ffffffffffffffff8211156109285761092861072e565b5060051b60200190565b600082601f83011261094357600080fd5b813560206109536108a58361090e565b82815260059290921b8401810191818101908684111561097257600080fd5b8286015b8481101561098d5780358352918301918301610976565b509695505050505050565b600082601f8301126109a957600080fd5b813560206109b96108a58361090e565b82815260059290921b840181019181810190868411156109d857600080fd5b8286015b8481101561098d5780356109ef816108dc565b83529183019183016109dc565b600082601f830112610a0d57600080fd5b81356020610a1d6108a58361090e565b82815260059290921b84018101918181019086841115610a3c57600080fd5b8286015b8481101561098d57803567ffffffffffffffff811115610a605760008081fd5b610a6e8986838b0101610932565b845250918301918301610a40565b6004811061055957600080fd5b600082601f830112610a9a57600080fd5b81356020610aaa6108a58361090e565b82815260059290921b84018101918181019086841115610ac957600080fd5b8286015b8481101561098d578035610ae081610a7c565b8352918301918301610acd565b600060c08284031215610aff57600080fd5b610b0761075d565b9050813567ffffffffffffffff80821115610b2157600080fd5b610b2d85838601610998565b83526020840135915080821115610b4357600080fd5b610b4f85838601610998565b60208401526040840135915080821115610b6857600080fd5b610b7485838601610998565b60408401526060840135915080821115610b8d57600080fd5b610b99858386016109fc565b60608401526080840135915080821115610bb257600080fd5b610bbe858386016109fc565b608084015260a0840135915080821115610bd757600080fd5b50610be484828501610a89565b60a08301525092915050565b60006101208284031215610c0357600080fd5b610c0b610786565b9050813567ffffffffffffffff80821115610c2557600080fd5b610c3185838601610886565b8352610c3f602085016108fe565b6020840152610c50604085016108fe565b60408401526060840135915080821115610c6957600080fd5b610c7585838601610932565b60608401526080840135915080821115610c8e57600080fd5b610c9a85838601610932565b608084015260a084013560a084015260c084013560c084015260e084013560e084015261010091508184013581811115610cd357600080fd5b610cdf86828701610aed565b8385015250505092915050565b803563ffffffff8116811461090957600080fd5b600082601f830112610d1157600080fd5b81356020610d216108a58361090e565b82815260059290921b84018101918181019086841115610d4057600080fd5b8286015b8481101561098d57803560078110610d5c5760008081fd5b8352918301918301610d44565b8035801515811461090957600080fd5b60008060408385031215610d8c57600080fd5b823567ffffffffffffffff80821115610da457600080fd5b908401906101008287031215610db957600080fd5b610dc16107aa565b823582811115610dd057600080fd5b610ddc88828601610bf0565b825250602083013560208201526040830135604082015260608301356060820152610e0960808401610cec565b6080820152610e1a60a08401610cec565b60a082015260c083013582811115610e3157600080fd5b610e3d88828601610d00565b60c083015250610e4f60e08401610d69565b60e08201529660209590950135955050505050565b60005b83811015610e7f578181015183820152602001610e67565b50506000910152565b60008151808452610ea0816020860160208601610e64565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501945080840160005b83811015610f0257815187529582019590820190600101610ee6565b509495945050505050565b600081518084526020808501945080840160005b83811015610f0257815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610f21565b600081518084526020808501808196508360051b8101915082860160005b85811015610f9b578284038952610f89848351610ed2565b98850198935090840190600101610f71565b5091979650505050505050565b6000815160c08452610fbd60c0850182610f0d565b905060208084015185830382870152610fd68382610f0d565b92505060408401518583036040870152610ff08382610f0d565b9250506060840151858303606087015261100a8382610f53565b925050608084015185830360808701526110248382610f53565b60a08681015188830391890191909152805180835290840194506000925090830190825b8181101561109a5785516004808210611087577f4e487b7100000000000000000000000000000000000000000000000000000000865260218152602486fd5b5083529484019491840191600101611048565b5090979650505050505050565b60208152600082516080602084015280516101208060a08601526110cf6101c0860183610e88565b915060208301516110f860c087018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff811660e08701525060608301517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff606101008188860301818901526111578584610ed2565b9450608086015192508188860301848901526111738584610ed2565b60a08701516101408a015260c08701516101608a015260e08701516101808a01529501518786039091016101a08801529392506111b4915082905083610fa8565b915050602084015160408401526040840151606084015260608401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08483030160808501526102c68282610e88565b6000610120828403121561121757600080fd5b61121f610786565b611228836108fe565b8152611236602084016108fe565b6020820152611247604084016108fe565b6040820152611258606084016108fe565b6060820152611269608084016108fe565b608082015261127a60a084016108fe565b60a082015261128b60c084016108fe565b60c082015261129c60e084016108fe565b60e08201526101006112af8185016108fe565b908201529392505050565b6000806000606084860312156112cf57600080fd5b833567ffffffffffffffff8111156112e657600080fd5b6112f286828701610932565b9660208601359650604090950135949350505050565b60408152600061131b6040830185610ed2565b82810360208401526102c68185610ed2565b60006020828403121561133f57600080fd5b813561134a816108dc565b9392505050565b8183823760009101908152919050565b600082601f83011261137257600080fd5b81516113806108a582610840565b81815284602083860101111561139557600080fd5b6113a6826020830160208701610e64565b949350505050565b8051610909816108dc565b600082601f8301126113ca57600080fd5b815160206113da6108a58361090e565b82815260059290921b840181019181810190868411156113f957600080fd5b8286015b8481101561098d57805183529183019183016113fd565b600082601f83011261142557600080fd5b815160206114356108a58361090e565b82815260059290921b8401810191818101908684111561145457600080fd5b8286015b8481101561098d57805161146b816108dc565b8352918301918301611458565b600082601f83011261148957600080fd5b815160206114996108a58361090e565b82815260059290921b840181019181810190868411156114b857600080fd5b8286015b8481101561098d57805167ffffffffffffffff8111156114dc5760008081fd5b6114ea8986838b01016113b9565b8452509183019183016114bc565b600082601f83011261150957600080fd5b815160206115196108a58361090e565b82815260059290921b8401810191818101908684111561153857600080fd5b8286015b8481101561098d57805161154f81610a7c565b835291830191830161153c565b600060c0828403121561156e57600080fd5b61157661075d565b9050815167ffffffffffffffff8082111561159057600080fd5b61159c85838601611414565b835260208401519150808211156115b257600080fd5b6115be85838601611414565b602084015260408401519150808211156115d757600080fd5b6115e385838601611414565b604084015260608401519150808211156115fc57600080fd5b61160885838601611478565b6060840152608084015191508082111561162157600080fd5b61162d85838601611478565b608084015260a084015191508082111561164657600080fd5b50610be4848285016114f8565b60006020828403121561166557600080fd5b815167ffffffffffffffff8082111561167d57600080fd5b908301906080828603121561169157600080fd5b6116996107ce565b8251828111156116a857600080fd5b830161012081880312156116bb57600080fd5b6116c3610786565b8151848111156116d257600080fd5b6116de89828501611361565b8252506116ed602083016113ae565b60208201526116fe604083016113ae565b604082015260608201518481111561171557600080fd5b611721898285016113b9565b60608301525060808201518481111561173957600080fd5b611745898285016113b9565b60808301525060a082015160a082015260c082015160c082015260e082015160e0820152610100808301518581111561177d57600080fd5b6117898a82860161155c565b828401525050808352505060208301516020820152604083015160408201526060830151828111156117ba57600080fd5b6117c687828601611361565b60608301525095945050505050565b6060815260006117e86060830186610ed2565b60208301949094525060400152919050565b6000806040838503121561180d57600080fd5b825167ffffffffffffffff8082111561182557600080fd5b611831868387016113b9565b9350602085015191508082111561184757600080fd5b50611854858286016113b9565b915050925092905056fea2646970667358221220a3bcbd29f3498ff842621d7d10384c524a93056a2096cdb7fb9303967581029464736f6c63430008110033";

type GeneratorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GeneratorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Generator__factory extends ContractFactory {
  constructor(...args: GeneratorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Generator";
  }

  deploy(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Generator> {
    return super.deploy(input, overrides || {}) as Promise<Generator>;
  }
  getDeployTransaction(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): Generator {
    return super.attach(address) as Generator;
  }
  connect(signer: Signer): Generator__factory {
    return super.connect(signer) as Generator__factory;
  }
  static readonly contractName: "Generator";
  public readonly contractName: "Generator";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GeneratorInterface {
    return new utils.Interface(_abi) as GeneratorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Generator {
    return new Contract(address, _abi, signerOrProvider) as Generator;
  }
}
