/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GeneratorMethods,
  GeneratorMethodsInterface,
  GeneratorConstructor,
} from "../GeneratorMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "incubator",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "randomness",
        type: "address",
      },
      {
        internalType: "address",
        name: "arenas",
        type: "address",
      },
      {
        internalType: "address",
        name: "hounds",
        type: "address",
      },
      {
        internalType: "address",
        name: "allowed",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "payments",
        type: "address",
      },
      {
        internalType: "address",
        name: "zerocost",
        type: "address",
      },
      {
        internalType: "address",
        name: "incubator",
        type: "address",
      },
      {
        internalType: "address",
        name: "gamification",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "address",
                name: "feeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "entryFeeCurrency",
                type: "address",
              },
              {
                internalType: "uint256[]",
                name: "participants",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "enqueueDates",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "arena",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "entryFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "from",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "to",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "currency",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "ids",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "amounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint32[]",
                    name: "paymentType",
                    type: "uint32[]",
                  },
                ],
                internalType: "struct Payment.Struct",
                name: "payments",
                type: "tuple",
              },
            ],
            internalType: "struct Core.Struct",
            name: "core",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastCompletion",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "totalParticipants",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "cooldown",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "closed",
            type: "bool",
          },
        ],
        internalType: "struct Queue.Struct",
        name: "queue",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "queueId",
        type: "uint256",
      },
    ],
    name: "generate",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "address",
                name: "feeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "entryFeeCurrency",
                type: "address",
              },
              {
                internalType: "uint256[]",
                name: "participants",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "enqueueDates",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "arena",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "entryFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "from",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "to",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "currency",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "ids",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "amounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint32[]",
                    name: "paymentType",
                    type: "uint32[]",
                  },
                ],
                internalType: "struct Payment.Struct",
                name: "payments",
                type: "tuple",
              },
            ],
            internalType: "struct Core.Struct",
            name: "core",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        internalType: "struct Race.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "incubator",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001460380380620014608339810160408190526200003491620001ac565b80620000403362000107565b8051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c083015160078054831691841691909117905560e0830151600880548316918416919091179055610100909201516009805490931691161790555062000277565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405161012081016001600160401b03811182821017156200018957634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114620001a757600080fd5b919050565b60006101208284031215620001c057600080fd5b620001ca62000157565b620001d5836200018f565b8152620001e5602084016200018f565b6020820152620001f8604084016200018f565b60408201526200020b606084016200018f565b60608201526200021e608084016200018f565b60808201526200023160a084016200018f565b60a08201526200024460c084016200018f565b60c08201526200025760e084016200018f565b60e08201526101006200026c8185016200018f565b908201529392505050565b6111d980620002876000396000f3fe6080604052600436106100565760003560e01c8063715018a61461005f57806377479c9c146100745780638da5cb5b14610094578063a30a0860146100c6578063d8de6587146100f3578063f2fde38b1461019e57005b3661005d57005b005b34801561006b57600080fd5b5061005d6101be565b34801561008057600080fd5b5061005d61008f36600461079c565b6101d2565b3480156100a057600080fd5b506100a961029c565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100d257600080fd5b506100e66100e1366004610cc0565b6102ab565b6040516100bd9190610f59565b3480156100ff57600080fd5b50600154600254600354600454600554600654600754600854600954610144986001600160a01b03908116988116978116968116958116948116938116928116911689565b604080516001600160a01b039a8b168152988a1660208a01529689169688019690965293871660608701529186166080860152851660a0850152841660c0840152831660e0830152909116610100820152610120016100bd565b3480156101aa57600080fd5b5061005d6101b936600461105f565b6104de565b6101c661055c565b6101d060006105bb565b565b6101da61055c565b8051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c083015160078054831691841691909117905560e083015160088054831691841691909117905561010090920151600980549093169116179055565b6000546001600160a01b031690565b6102b361060b565b6004546001600160a01b031633146102ca57600080fd5b826080015163ffffffff1683600001516060015151146102e957600080fd5b600154604080514260208201526000926001600160a01b03169163abaa08b391016040516020818303038152906040526040518263ffffffff1660e01b81526004016103359190611081565b602060405180830381865afa158015610352573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103769190611094565b6007548551606081015160a09091015160405163126701cf60e31b815293945060009384936001600160a01b0316926393380e78926103b99288906004016110ad565b600060405180830381865afa1580156103d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103fe919081019061112d565b91509150604051806080016040528060405180610120016040528089600001516000015181526020018960000151602001516001600160a01b031681526020018960000151604001516001600160a01b031681526020018581526020018960000151608001518152602001896000015160a001518152602001896000015160c001518152602001896000015160e001518152602001896000015161010001518152508152602001848152602001868152602001826040516020016104c29190611190565b60408051601f1981840301815291905290529695505050505050565b6104e661055c565b6001600160a01b0381166105505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610559816105bb565b50565b3361056561029c565b6001600160a01b0316146101d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610547565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b604051806080016040528061061e610639565b81526020016000815260200160008152602001606081525090565b6040518061012001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000815260200160008152602001600081526020016106c86040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b905290565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715610706576107066106cd565b60405290565b60405160c081016001600160401b0381118282101715610706576107066106cd565b60405160e081016001600160401b0381118282101715610706576107066106cd565b604051601f8201601f191681016001600160401b0381118282101715610778576107786106cd565b604052919050565b80356001600160a01b038116811461079757600080fd5b919050565b600061012082840312156107af57600080fd5b6107b76106e3565b6107c083610780565b81526107ce60208401610780565b60208201526107df60408401610780565b60408201526107f060608401610780565b606082015261080160808401610780565b608082015261081260a08401610780565b60a082015261082360c08401610780565b60c082015261083460e08401610780565b60e0820152610100610847818501610780565b908201529392505050565b6001600160a01b03169052565b600082601f83011261087057600080fd5b81356001600160401b03811115610889576108896106cd565b61089c601f8201601f1916602001610750565b8181528460208386010111156108b157600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b038211156108e7576108e76106cd565b5060051b60200190565b600082601f83011261090257600080fd5b81356020610917610912836108ce565b610750565b82815260059290921b8401810191818101908684111561093657600080fd5b8286015b84811015610951578035835291830191830161093a565b509695505050505050565b600082601f83011261096d57600080fd5b8135602061097d610912836108ce565b82815260059290921b8401810191818101908684111561099c57600080fd5b8286015b84811015610951576109b181610780565b83529183019183016109a0565b600082601f8301126109cf57600080fd5b813560206109df610912836108ce565b82815260059290921b840181019181810190868411156109fe57600080fd5b8286015b848110156109515780356001600160401b03811115610a215760008081fd5b610a2f8986838b01016108f1565b845250918301918301610a02565b803563ffffffff8116811461079757600080fd5b600082601f830112610a6257600080fd5b81356020610a72610912836108ce565b82815260059290921b84018101918181019086841115610a9157600080fd5b8286015b8481101561095157610aa681610a3d565b8352918301918301610a95565b600060c08284031215610ac557600080fd5b610acd61070c565b905081356001600160401b0380821115610ae657600080fd5b610af28583860161095c565b83526020840135915080821115610b0857600080fd5b610b148583860161095c565b60208401526040840135915080821115610b2d57600080fd5b610b398583860161095c565b60408401526060840135915080821115610b5257600080fd5b610b5e858386016109be565b60608401526080840135915080821115610b7757600080fd5b610b83858386016109be565b608084015260a0840135915080821115610b9c57600080fd5b50610ba984828501610a51565b60a08301525092915050565b60006101208284031215610bc857600080fd5b610bd06106e3565b905081356001600160401b0380821115610be957600080fd5b610bf58583860161085f565b8352610c0360208501610780565b6020840152610c1460408501610780565b60408401526060840135915080821115610c2d57600080fd5b610c39858386016108f1565b60608401526080840135915080821115610c5257600080fd5b610c5e858386016108f1565b608084015260a084013560a084015260c084013560c084015260e084013560e084015261010091508184013581811115610c9757600080fd5b610ca386828701610ab3565b8385015250505092915050565b8035801515811461079757600080fd5b60008060408385031215610cd357600080fd5b82356001600160401b0380821115610cea57600080fd5b9084019060e08287031215610cfe57600080fd5b610d0661072e565b823582811115610d1557600080fd5b610d2188828601610bb5565b825250602083013560208201526040830135604082015260608301356060820152610d4e60808401610a3d565b6080820152610d5f60a08401610a3d565b60a0820152610d7060c08401610cb0565b60c08201529660209590950135955050505050565b6000815180845260005b81811015610dab57602081850181015186830182015201610d8f565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015610dfb57815187529582019590820190600101610ddf565b509495945050505050565b600081518084526020808501945080840160005b83811015610dfb5781516001600160a01b031687529582019590820190600101610e1a565b600081518084526020808501808196508360051b8101915082860160005b85811015610e87578284038952610e75848351610dcb565b98850198935090840190600101610e5d565b5091979650505050505050565b6000815160c08452610ea960c0850182610e06565b905060208084015185830382870152610ec28382610e06565b92505060408401518583036040870152610edc8382610e06565b92505060608401518583036060870152610ef68382610e3f565b92505060808401518583036080870152610f108382610e3f565b60a086810151888303918901919091528051808352908401945060009250908301905b8083101561095157845163ffffffff168252938301936001929092019190830190610f33565b60208152600082516080602084015280516101208060a0860152610f816101c0860183610d85565b91506020830151610f9560c0870182610852565b506040830151610fa860e0870182610852565b506060830151609f19610100818886030181890152610fc78584610dcb565b945060808601519250818886030184890152610fe38584610dcb565b60a08701516101408a015260c08701516101608a015260e08701516101808a01529501518786039091016101a0880152939250611024915082905083610e94565b91505060208401516040840152604084015160608401526060840151601f198483030160808501526110568282610d85565b95945050505050565b60006020828403121561107157600080fd5b61107a82610780565b9392505050565b60208152600061107a6020830184610d85565b6000602082840312156110a657600080fd5b5051919050565b6060815260006110c06060830186610dcb565b60208301949094525060400152919050565b600082601f8301126110e357600080fd5b815160206110f3610912836108ce565b82815260059290921b8401810191818101908684111561111257600080fd5b8286015b848110156109515780518352918301918301611116565b6000806040838503121561114057600080fd5b82516001600160401b038082111561115757600080fd5b611163868387016110d2565b9350602085015191508082111561117957600080fd5b50611186858286016110d2565b9150509250929050565b60208152600061107a6020830184610dcb56fea2646970667358221220dce772c35a05d97f0d6892d80e6df5a73274c0d8157580c61ee9642edb02266c64736f6c63430008100033";

type GeneratorMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GeneratorMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GeneratorMethods__factory extends ContractFactory {
  constructor(...args: GeneratorMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GeneratorMethods";
  }

  deploy(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GeneratorMethods> {
    return super.deploy(input, overrides || {}) as Promise<GeneratorMethods>;
  }
  getDeployTransaction(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): GeneratorMethods {
    return super.attach(address) as GeneratorMethods;
  }
  connect(signer: Signer): GeneratorMethods__factory {
    return super.connect(signer) as GeneratorMethods__factory;
  }
  static readonly contractName: "GeneratorMethods";
  public readonly contractName: "GeneratorMethods";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GeneratorMethodsInterface {
    return new utils.Interface(_abi) as GeneratorMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GeneratorMethods {
    return new Contract(address, _abi, signerOrProvider) as GeneratorMethods;
  }
}
