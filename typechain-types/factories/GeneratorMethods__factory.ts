/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GeneratorMethods,
  GeneratorMethodsInterface,
  GeneratorConstructor,
} from "../GeneratorMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "incubator",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "randomness",
        type: "address",
      },
      {
        internalType: "address",
        name: "arenas",
        type: "address",
      },
      {
        internalType: "address",
        name: "hounds",
        type: "address",
      },
      {
        internalType: "address",
        name: "allowed",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "payments",
        type: "address",
      },
      {
        internalType: "address",
        name: "zerocost",
        type: "address",
      },
      {
        internalType: "address",
        name: "incubator",
        type: "address",
      },
      {
        internalType: "address",
        name: "gamification",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "address",
                name: "feeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "entryFeeCurrency",
                type: "address",
              },
              {
                internalType: "uint256[]",
                name: "participants",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "enqueueDates",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "arena",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "entryFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "from",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "to",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "currency",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "ids",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "amounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "enum Payment.PaymentTypes[]",
                    name: "paymentType",
                    type: "uint8[]",
                  },
                ],
                internalType: "struct Payment.Struct",
                name: "payments",
                type: "tuple",
              },
            ],
            internalType: "struct Core.Struct",
            name: "core",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastCompletion",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "totalParticipants",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "cooldown",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "staminaCost",
            type: "uint32",
          },
          {
            internalType: "enum Specie.Enum[]",
            name: "speciesAllowed",
            type: "uint8[]",
          },
          {
            internalType: "bool",
            name: "closed",
            type: "bool",
          },
        ],
        internalType: "struct Queue.Struct",
        name: "queue",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "queueId",
        type: "uint256",
      },
    ],
    name: "generate",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "address",
                name: "feeCurrency",
                type: "address",
              },
              {
                internalType: "address",
                name: "entryFeeCurrency",
                type: "address",
              },
              {
                internalType: "uint256[]",
                name: "participants",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "enqueueDates",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "arena",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "entryFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "fee",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "from",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "to",
                    type: "address[]",
                  },
                  {
                    internalType: "address[]",
                    name: "currency",
                    type: "address[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "ids",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "amounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "enum Payment.PaymentTypes[]",
                    name: "paymentType",
                    type: "uint8[]",
                  },
                ],
                internalType: "struct Payment.Struct",
                name: "payments",
                type: "tuple",
              },
            ],
            internalType: "struct Core.Struct",
            name: "core",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        internalType: "struct Race.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
          {
            internalType: "address",
            name: "incubator",
            type: "address",
          },
          {
            internalType: "address",
            name: "gamification",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001696380380620016968339810160408190526200003491620001ac565b80620000403362000107565b8051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c083015160078054831691841691909117905560e0830151600880548316918416919091179055610100909201516009805490931691161790555062000277565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405161012081016001600160401b03811182821017156200018957634e487b7160e01b600052604160045260246000fd5b60405290565b80516001600160a01b0381168114620001a757600080fd5b919050565b60006101208284031215620001c057600080fd5b620001ca62000157565b620001d5836200018f565b8152620001e5602084016200018f565b6020820152620001f8604084016200018f565b60408201526200020b606084016200018f565b60608201526200021e608084016200018f565b60808201526200023160a084016200018f565b60a08201526200024460c084016200018f565b60c08201526200025760e084016200018f565b60e08201526101006200026c8185016200018f565b908201529392505050565b61140f80620002876000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638da5cb5b116100505780638da5cb5b146100bd578063d8de6587146100e5578063f2fde38b1461019d57600080fd5b80633a4057f614610077578063715018a6146100a057806377479c9c146100aa575b600080fd5b61008a610085366004610d7a565b6101b0565b6040516100979190611096565b60405180910390f35b6100a861043d565b005b6100a86100b83660046111de565b610451565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610097565b6001546002546003546004546005546006546007546008546009546101369873ffffffffffffffffffffffffffffffffffffffff908116988116978116968116958116948116938116928116911689565b6040805173ffffffffffffffffffffffffffffffffffffffff9a8b168152988a1660208a01529689169688019690965293871660608701529186166080860152851660a0850152841660c0840152831660e083015290911661010082015261012001610097565b6100a86101ab366004611294565b610540565b6101b86106f2565b60045473ffffffffffffffffffffffffffffffffffffffff1633146101dc57600080fd5b826080015163ffffffff1683600001516060015151146101fb57600080fd5b6001546040805142602082015260009273ffffffffffffffffffffffffffffffffffffffff169163abaa08b391016040516020818303038152906040526040518263ffffffff1660e01b815260040161025491906112b6565b602060405180830381865afa158015610271573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029591906112c9565b6007548551606081015160a0909101516040517f93380e78000000000000000000000000000000000000000000000000000000008152939450600093849373ffffffffffffffffffffffffffffffffffffffff16926393380e78926102fe9288906004016112e2565b600060405180830381865afa15801561031b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103439190810190611362565b915091506040518060800160405280604051806101200160405280896000015160000151815260200189600001516020015173ffffffffffffffffffffffffffffffffffffffff16815260200189600001516040015173ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018960000151608001518152602001896000015160a001518152602001896000015160c001518152602001896000015160e0015181526020018960000151610100015181525081526020018481526020018681526020018260405160200161042191906113c6565b60408051601f1981840301815291905290529695505050505050565b6104456105fc565b61044f600061067d565b565b6104596105fc565b8051600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c083015160078054831691841691909117905560e083015160088054831691841691909117905561010090920151600980549093169116179055565b6105486105fc565b73ffffffffffffffffffffffffffffffffffffffff81166105f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105f98161067d565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461044f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e7565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060800160405280610705610720565b81526020016000815260200160008152602001606081525090565b60405180610120016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001600081526020016107c96040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610820576108206107ce565b60405290565b604051610120810167ffffffffffffffff81118282101715610820576108206107ce565b604051601f8201601f1916810167ffffffffffffffff81118282101715610873576108736107ce565b604052919050565b600082601f83011261088c57600080fd5b813567ffffffffffffffff8111156108a6576108a66107ce565b6108b96020601f19601f8401160161084a565b8181528460208386010111156108ce57600080fd5b816020850160208301376000918101602001919091529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461090f57600080fd5b919050565b600067ffffffffffffffff82111561092e5761092e6107ce565b5060051b60200190565b600082601f83011261094957600080fd5b8135602061095e61095983610914565b61084a565b82815260059290921b8401810191818101908684111561097d57600080fd5b8286015b848110156109985780358352918301918301610981565b509695505050505050565b600082601f8301126109b457600080fd5b813560206109c461095983610914565b82815260059290921b840181019181810190868411156109e357600080fd5b8286015b84811015610998576109f8816108eb565b83529183019183016109e7565b600082601f830112610a1657600080fd5b81356020610a2661095983610914565b82815260059290921b84018101918181019086841115610a4557600080fd5b8286015b8481101561099857803567ffffffffffffffff811115610a695760008081fd5b610a778986838b0101610938565b845250918301918301610a49565b600082601f830112610a9657600080fd5b81356020610aa661095983610914565b82815260059290921b84018101918181019086841115610ac557600080fd5b8286015b8481101561099857803560048110610ae15760008081fd5b8352918301918301610ac9565b600060c08284031215610b0057600080fd5b610b086107fd565b9050813567ffffffffffffffff80821115610b2257600080fd5b610b2e858386016109a3565b83526020840135915080821115610b4457600080fd5b610b50858386016109a3565b60208401526040840135915080821115610b6957600080fd5b610b75858386016109a3565b60408401526060840135915080821115610b8e57600080fd5b610b9a85838601610a05565b60608401526080840135915080821115610bb357600080fd5b610bbf85838601610a05565b608084015260a0840135915080821115610bd857600080fd5b50610be584828501610a85565b60a08301525092915050565b60006101208284031215610c0457600080fd5b610c0c610826565b9050813567ffffffffffffffff80821115610c2657600080fd5b610c328583860161087b565b8352610c40602085016108eb565b6020840152610c51604085016108eb565b60408401526060840135915080821115610c6a57600080fd5b610c7685838601610938565b60608401526080840135915080821115610c8f57600080fd5b610c9b85838601610938565b608084015260a084013560a084015260c084013560c084015260e084013560e084015261010091508184013581811115610cd457600080fd5b610ce086828701610aee565b8385015250505092915050565b803563ffffffff8116811461090f57600080fd5b600082601f830112610d1257600080fd5b81356020610d2261095983610914565b82815260059290921b84018101918181019086841115610d4157600080fd5b8286015b8481101561099857803560078110610d5d5760008081fd5b8352918301918301610d45565b8035801515811461090f57600080fd5b60008060408385031215610d8d57600080fd5b823567ffffffffffffffff80821115610da557600080fd5b908401906101208287031215610dba57600080fd5b610dc2610826565b823582811115610dd157600080fd5b610ddd88828601610bf1565b825250602083013560208201526040830135604082015260608301356060820152610e0a60808401610ced565b6080820152610e1b60a08401610ced565b60a0820152610e2c60c08401610ced565b60c082015260e083013582811115610e4357600080fd5b610e4f88828601610d01565b60e0830152506101009150610e65828401610d6a565b9181019190915295602094909401359450505050565b6000815180845260005b81811015610ea157602081850181015186830182015201610e85565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501945080840160005b83811015610ef157815187529582019590820190600101610ed5565b509495945050505050565b600081518084526020808501945080840160005b83811015610ef157815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101610f10565b600081518084526020808501808196508360051b8101915082860160005b85811015610f8a578284038952610f78848351610ec1565b98850198935090840190600101610f60565b5091979650505050505050565b6000815160c08452610fac60c0850182610efc565b905060208084015185830382870152610fc58382610efc565b92505060408401518583036040870152610fdf8382610efc565b92505060608401518583036060870152610ff98382610f42565b925050608084015185830360808701526110138382610f42565b60a08681015188830391890191909152805180835290840194506000925090830190825b818110156110895785516004808210611076577f4e487b7100000000000000000000000000000000000000000000000000000000865260218152602486fd5b5083529484019491840191600101611037565b5090979650505050505050565b60208152600082516080602084015280516101208060a08601526110be6101c0860183610e7b565b915060208301516110e760c087018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff811660e08701525060608301517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff606101008188860301818901526111468584610ec1565b9450608086015192508188860301848901526111628584610ec1565b60a08701516101408a015260c08701516101608a015260e08701516101808a01529501518786039091016101a08801529392506111a3915082905083610f97565b91505060208401516040840152604084015160608401526060840151601f198483030160808501526111d58282610e7b565b95945050505050565b600061012082840312156111f157600080fd5b6111f9610826565b611202836108eb565b8152611210602084016108eb565b6020820152611221604084016108eb565b6040820152611232606084016108eb565b6060820152611243608084016108eb565b608082015261125460a084016108eb565b60a082015261126560c084016108eb565b60c082015261127660e084016108eb565b60e08201526101006112898185016108eb565b908201529392505050565b6000602082840312156112a657600080fd5b6112af826108eb565b9392505050565b6020815260006112af6020830184610e7b565b6000602082840312156112db57600080fd5b5051919050565b6060815260006112f56060830186610ec1565b60208301949094525060400152919050565b600082601f83011261131857600080fd5b8151602061132861095983610914565b82815260059290921b8401810191818101908684111561134757600080fd5b8286015b84811015610998578051835291830191830161134b565b6000806040838503121561137557600080fd5b825167ffffffffffffffff8082111561138d57600080fd5b61139986838701611307565b935060208501519150808211156113af57600080fd5b506113bc85828601611307565b9150509250929050565b6020815260006112af6020830184610ec156fea2646970667358221220b012ce3306b7b8bbb7140c2b780dc52bf668014b2782644869609ad64ccd73d964736f6c63430008110033";

type GeneratorMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GeneratorMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GeneratorMethods__factory extends ContractFactory {
  constructor(...args: GeneratorMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GeneratorMethods";
  }

  deploy(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GeneratorMethods> {
    return super.deploy(input, overrides || {}) as Promise<GeneratorMethods>;
  }
  getDeployTransaction(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): GeneratorMethods {
    return super.attach(address) as GeneratorMethods;
  }
  connect(signer: Signer): GeneratorMethods__factory {
    return super.connect(signer) as GeneratorMethods__factory;
  }
  static readonly contractName: "GeneratorMethods";
  public readonly contractName: "GeneratorMethods";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GeneratorMethodsInterface {
    return new utils.Interface(_abi) as GeneratorMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GeneratorMethods {
    return new Contract(address, _abi, signerOrProvider) as GeneratorMethods;
  }
}
