/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GeneratorMethods,
  GeneratorMethodsInterface,
  GeneratorConstructor,
} from "../GeneratorMethods";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "input",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "control",
    outputs: [
      {
        internalType: "address",
        name: "randomness",
        type: "address",
      },
      {
        internalType: "address",
        name: "arenas",
        type: "address",
      },
      {
        internalType: "address",
        name: "hounds",
        type: "address",
      },
      {
        internalType: "address",
        name: "allowed",
        type: "address",
      },
      {
        internalType: "address",
        name: "methods",
        type: "address",
      },
      {
        internalType: "address",
        name: "payments",
        type: "address",
      },
      {
        internalType: "address",
        name: "zerocost",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "enqueueDates",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "arena",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entryFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastCompletion",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "from",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "to",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "currency",
                type: "address[]",
              },
              {
                internalType: "uint256[][]",
                name: "ids",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "amounts",
                type: "uint256[][]",
              },
              {
                internalType: "uint32[]",
                name: "paymentType",
                type: "uint32[]",
              },
            ],
            internalType: "struct Payment.Struct",
            name: "payments",
            type: "tuple",
          },
          {
            internalType: "uint32",
            name: "totalParticipants",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "cooldown",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "closed",
            type: "bool",
          },
        ],
        internalType: "struct Queue.Struct",
        name: "queue",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "queueId",
        type: "uint256",
      },
    ],
    name: "generate",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "participants",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "arena",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "entryFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "randomness",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "from",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "to",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "currency",
                type: "address[]",
              },
              {
                internalType: "uint256[][]",
                name: "ids",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "amounts",
                type: "uint256[][]",
              },
              {
                internalType: "uint32[]",
                name: "paymentType",
                type: "uint32[]",
              },
            ],
            internalType: "struct Payment.Struct",
            name: "payments",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "queueId",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "seed",
            type: "bytes",
          },
        ],
        internalType: "struct Race.Struct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "randomness",
            type: "address",
          },
          {
            internalType: "address",
            name: "arenas",
            type: "address",
          },
          {
            internalType: "address",
            name: "hounds",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowed",
            type: "address",
          },
          {
            internalType: "address",
            name: "methods",
            type: "address",
          },
          {
            internalType: "address",
            name: "payments",
            type: "address",
          },
          {
            internalType: "address",
            name: "zerocost",
            type: "address",
          },
        ],
        internalType: "struct GeneratorConstructor.Struct",
        name: "globalParameters",
        type: "tuple",
      },
    ],
    name: "setGlobalParameters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012693803806200126983398101604081905262000034916200014b565b806200004033620000de565b8051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c0909201516007805490931691161790555062000218565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200014657600080fd5b919050565b600060e082840312156200015e57600080fd5b60405160e081016001600160401b03811182821017156200018f57634e487b7160e01b600052604160045260246000fd5b6040526200019d836200012e565b8152620001ad602084016200012e565b6020820152620001c0604084016200012e565b6040820152620001d3606084016200012e565b6060820152620001e6608084016200012e565b6080820152620001f960a084016200012e565b60a08201526200020c60c084016200012e565b60c08201529392505050565b61104180620002286000396000f3fe6080604052600436106100565760003560e01c806318833d1e1461005f578063715018a6146100955780637feaa6d3146100aa5780638da5cb5b146100ca578063d8de6587146100f7578063f2fde38b1461018557005b3661005d57005b005b34801561006b57600080fd5b5061007f61007a366004610a10565b6101a5565b60405161008c9190610d51565b60405180910390f35b3480156100a157600080fd5b5061005d610380565b3480156100b657600080fd5b5061005d6100c5366004610e18565b610394565b3480156100d657600080fd5b506100df610435565b6040516001600160a01b03909116815260200161008c565b34801561010357600080fd5b5060015460025460035460045460055460065460075461013c966001600160a01b03908116968116958116948116938116928116911687565b604080516001600160a01b039889168152968816602088015294871694860194909452918516606085015284166080840152831660a083015290911660c082015260e00161008c565b34801561019157600080fd5b5061005d6101a0366004610ec7565b610444565b6101ad610571565b6004546001600160a01b031633146101c457600080fd5b82610140015163ffffffff16836040015151146101e057600080fd5b600154604080514260208201526000926001600160a01b03169163abaa08b391016040516020818303038152906040526040518263ffffffff1660e01b815260040161022c9190610ee9565b602060405180830381865afa158015610249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026d9190610efc565b6007546040808701516080880151915163126701cf60e31b815293945060009384936001600160a01b0316926393380e78926102b0929091908890600401610f15565b600060405180830381865afa1580156102cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f59190810190610f95565b915091506040518061012001604052808760000151815260200187602001516001600160a01b03168152602001838152602001876080015181526020018760a0015181526020018481526020018761012001518152602001868152602001826040516020016103649190610ff8565b60408051601f1981840301815291905290529695505050505050565b6103886104c2565b6103926000610521565b565b61039c6104c2565b8051600180546001600160a01b03199081166001600160a01b0393841617909155602083015160028054831691841691909117905560408301516003805483169184169190911790556060830151600480548316918416919091179055608083015160058054831691841691909117905560a083015160068054831691841691909117905560c090920151600780549093169116179055565b6000546001600160a01b031690565b61044c6104c2565b6001600160a01b0381166104b65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6104bf81610521565b50565b336104cb610435565b6001600160a01b0316146103925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ad565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518061012001604052806060815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081526020016105e96040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001606081525090565b815260200160008152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715610635576106356105fd565b60405290565b6040516101a081016001600160401b0381118282101715610635576106356105fd565b604051601f8201601f191681016001600160401b0381118282101715610686576106866105fd565b604052919050565b600082601f83011261069f57600080fd5b81356001600160401b038111156106b8576106b86105fd565b6106cb601f8201601f191660200161065e565b8181528460208386010111156106e057600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b038116811461071457600080fd5b919050565b60006001600160401b03821115610732576107326105fd565b5060051b60200190565b600082601f83011261074d57600080fd5b8135602061076261075d83610719565b61065e565b82815260059290921b8401810191818101908684111561078157600080fd5b8286015b8481101561079c5780358352918301918301610785565b509695505050505050565b600082601f8301126107b857600080fd5b813560206107c861075d83610719565b82815260059290921b840181019181810190868411156107e757600080fd5b8286015b8481101561079c576107fc816106fd565b83529183019183016107eb565b600082601f83011261081a57600080fd5b8135602061082a61075d83610719565b82815260059290921b8401810191818101908684111561084957600080fd5b8286015b8481101561079c5780356001600160401b0381111561086c5760008081fd5b61087a8986838b010161073c565b84525091830191830161084d565b803563ffffffff8116811461071457600080fd5b600082601f8301126108ad57600080fd5b813560206108bd61075d83610719565b82815260059290921b840181019181810190868411156108dc57600080fd5b8286015b8481101561079c576108f181610888565b83529183019183016108e0565b600060c0828403121561091057600080fd5b610918610613565b905081356001600160401b038082111561093157600080fd5b61093d858386016107a7565b8352602084013591508082111561095357600080fd5b61095f858386016107a7565b6020840152604084013591508082111561097857600080fd5b610984858386016107a7565b6040840152606084013591508082111561099d57600080fd5b6109a985838601610809565b606084015260808401359150808211156109c257600080fd5b6109ce85838601610809565b608084015260a08401359150808211156109e757600080fd5b506109f48482850161089c565b60a08301525092915050565b8035801515811461071457600080fd5b60008060408385031215610a2357600080fd5b82356001600160401b0380821115610a3a57600080fd5b908401906101a08287031215610a4f57600080fd5b610a5761063b565b823582811115610a6657600080fd5b610a728882860161068e565b825250610a81602084016106fd565b6020820152604083013582811115610a9857600080fd5b610aa48882860161073c565b604083015250606083013582811115610abc57600080fd5b610ac88882860161073c565b6060830152506080830135608082015260a083013560a082015260c083013560c082015260e083013560e08201526101008084013581830152506101208084013583811115610b1657600080fd5b610b22898287016108fe565b8284015250506101409150610b38828401610888565b828201526101609150610b4c828401610888565b828201526101809150610b60828401610a00565b9181019190915295602094909401359450505050565b6000815180845260005b81811015610b9c57602081850181015186830182015201610b80565b81811115610bae576000602083870101525b50601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015610bf357815187529582019590820190600101610bd7565b509495945050505050565b600081518084526020808501945080840160005b83811015610bf35781516001600160a01b031687529582019590820190600101610c12565b600081518084526020808501808196508360051b8101915082860160005b85811015610c7f578284038952610c6d848351610bc3565b98850198935090840190600101610c55565b5091979650505050505050565b6000815160c08452610ca160c0850182610bfe565b905060208084015185830382870152610cba8382610bfe565b92505060408401518583036040870152610cd48382610bfe565b92505060608401518583036060870152610cee8382610c37565b92505060808401518583036080870152610d088382610c37565b60a086810151888303918901919091528051808352908401945060009250908301905b8083101561079c57845163ffffffff168252938301936001929092019190830190610d2b565b6020815260008251610120806020850152610d70610140850183610b76565b91506020850151610d8c60408601826001600160a01b03169052565b506040850151601f1980868503016060870152610da98483610bc3565b935060608701516080870152608087015160a087015260a087015160c087015260c08701519150808685030160e0870152610de48483610c8c565b60e0880151610100888101919091528801518782039092018488015293509050610e0e8382610b76565b9695505050505050565b600060e08284031215610e2a57600080fd5b60405160e081016001600160401b0381118282101715610e4c57610e4c6105fd565b604052610e58836106fd565b8152610e66602084016106fd565b6020820152610e77604084016106fd565b6040820152610e88606084016106fd565b6060820152610e99608084016106fd565b6080820152610eaa60a084016106fd565b60a0820152610ebb60c084016106fd565b60c08201529392505050565b600060208284031215610ed957600080fd5b610ee2826106fd565b9392505050565b602081526000610ee26020830184610b76565b600060208284031215610f0e57600080fd5b5051919050565b606081526000610f286060830186610bc3565b60208301949094525060400152919050565b600082601f830112610f4b57600080fd5b81516020610f5b61075d83610719565b82815260059290921b84018101918181019086841115610f7a57600080fd5b8286015b8481101561079c5780518352918301918301610f7e565b60008060408385031215610fa857600080fd5b82516001600160401b0380821115610fbf57600080fd5b610fcb86838701610f3a565b93506020850151915080821115610fe157600080fd5b50610fee85828601610f3a565b9150509250929050565b602081526000610ee26020830184610bc356fea26469706673582212202c964346d8eb37e505ae91486e08e821073e4729f69a37b8a907bb8472cf5fff64736f6c634300080f0033";

type GeneratorMethodsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GeneratorMethodsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GeneratorMethods__factory extends ContractFactory {
  constructor(...args: GeneratorMethodsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GeneratorMethods";
  }

  deploy(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GeneratorMethods> {
    return super.deploy(input, overrides || {}) as Promise<GeneratorMethods>;
  }
  getDeployTransaction(
    input: GeneratorConstructor.StructStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(input, overrides || {});
  }
  attach(address: string): GeneratorMethods {
    return super.attach(address) as GeneratorMethods;
  }
  connect(signer: Signer): GeneratorMethods__factory {
    return super.connect(signer) as GeneratorMethods__factory;
  }
  static readonly contractName: "GeneratorMethods";
  public readonly contractName: "GeneratorMethods";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GeneratorMethodsInterface {
    return new utils.Interface(_abi) as GeneratorMethodsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GeneratorMethods {
    return new Contract(address, _abi, signerOrProvider) as GeneratorMethods;
  }
}
