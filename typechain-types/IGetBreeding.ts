/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace HoundBreeding {
  export type StructStruct = {
    breedingFeeCurrency: string;
    lastBreed: BigNumberish;
    breedingCooldown: BigNumberish;
    breedingFee: BigNumberish;
    availableToBreed: boolean;
  };

  export type StructStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    breedingFeeCurrency: string;
    lastBreed: BigNumber;
    breedingCooldown: BigNumber;
    breedingFee: BigNumber;
    availableToBreed: boolean;
  };
}

export interface IGetBreedingInterface extends utils.Interface {
  contractName: "IGetBreeding";
  functions: {
    "getBreeding(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBreeding",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBreeding",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGetBreeding extends BaseContract {
  contractName: "IGetBreeding";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGetBreedingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBreeding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[HoundBreeding.StructStructOutput]>;
  };

  getBreeding(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<HoundBreeding.StructStructOutput>;

  callStatic: {
    getBreeding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<HoundBreeding.StructStructOutput>;
  };

  filters: {};

  estimateGas: {
    getBreeding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBreeding(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
