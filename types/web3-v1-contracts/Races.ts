/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type DeleteQueue = ContractEventLog<{
  id: string;
  0: string;
}>;
export type NewFinishedRace = ContractEventLog<{
  id: string;
  race: [string, string, string[], string, string, string, string, string];
  0: string;
  1: [string, string, string[], string, string, string, string, string];
}>;
export type NewRace = ContractEventLog<{
  id: string;
  race: [
    string,
    string,
    string[],
    string,
    string,
    string,
    string,
    string,
    string
  ];
  0: string;
  1: [string, string, string[], string, string, string, string, string, string];
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PlayerEnqueue = ContractEventLog<{
  id: string;
  hound: string;
  player: string;
  0: string;
  1: string;
  2: string;
}>;
export type QueuesCreation = ContractEventLog<{
  idStart: string;
  idStop: string;
  newQueues: [
    string,
    string,
    string[],
    string,
    string,
    string,
    string,
    string,
    string
  ][];
  0: string;
  1: string;
  2: [
    string,
    string,
    string[],
    string,
    string,
    string,
    string,
    string,
    string
  ][];
}>;
export type UploadRace = ContractEventLog<{
  id: string;
  race: [string, string, string[], string, string, string, string, string];
  0: string;
  1: [string, string, string[], string, string, string, string, string];
}>;

export interface Races extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Races;
  clone(): Races;
  methods: {
    control(): NonPayableTransactionObject<{
      randomness: string;
      arenas: string;
      hounds: string;
      methods: string;
      generator: string;
      payments: string;
      restricted: string;
      zerocost: string;
      raceFee: string;
      callable: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: boolean;
    }>;

    createQueues(
      theQueues: [
        string,
        string,
        (number | string | BN)[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ][]
    ): NonPayableTransactionObject<void>;

    deleteQueue(theId: number | string | BN): NonPayableTransactionObject<void>;

    enqueue(
      theId: number | string | BN,
      hound: number | string | BN
    ): PayableTransactionObject<void>;

    id(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    queue(
      theId: number | string | BN
    ): NonPayableTransactionObject<
      [string, string, string[], string, string, string, string, string, string]
    >;

    queues(arg0: number | string | BN): NonPayableTransactionObject<{
      name: string;
      currency: string;
      arena: string;
      entryFee: string;
      startDate: string;
      endDate: string;
      rewardsId: string;
      totalParticipants: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
    }>;

    races(arg0: number | string | BN): NonPayableTransactionObject<{
      name: string;
      currency: string;
      arena: string;
      entryFee: string;
      rewardsId: string;
      randomness: string;
      seed: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
    }>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    rewards(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<{
      from: string;
      to: string;
      currency: string;
      qty: string;
      paymentType: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;

    setGlobalParameters(
      globalParameters: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        number | string | BN,
        boolean
      ]
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    uploadRace(
      race: [
        string,
        string,
        (number | string | BN)[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN,
        string | number[]
      ]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    DeleteQueue(cb?: Callback<DeleteQueue>): EventEmitter;
    DeleteQueue(
      options?: EventOptions,
      cb?: Callback<DeleteQueue>
    ): EventEmitter;

    NewFinishedRace(cb?: Callback<NewFinishedRace>): EventEmitter;
    NewFinishedRace(
      options?: EventOptions,
      cb?: Callback<NewFinishedRace>
    ): EventEmitter;

    NewRace(cb?: Callback<NewRace>): EventEmitter;
    NewRace(options?: EventOptions, cb?: Callback<NewRace>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PlayerEnqueue(cb?: Callback<PlayerEnqueue>): EventEmitter;
    PlayerEnqueue(
      options?: EventOptions,
      cb?: Callback<PlayerEnqueue>
    ): EventEmitter;

    QueuesCreation(cb?: Callback<QueuesCreation>): EventEmitter;
    QueuesCreation(
      options?: EventOptions,
      cb?: Callback<QueuesCreation>
    ): EventEmitter;

    UploadRace(cb?: Callback<UploadRace>): EventEmitter;
    UploadRace(options?: EventOptions, cb?: Callback<UploadRace>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "DeleteQueue", cb: Callback<DeleteQueue>): void;
  once(
    event: "DeleteQueue",
    options: EventOptions,
    cb: Callback<DeleteQueue>
  ): void;

  once(event: "NewFinishedRace", cb: Callback<NewFinishedRace>): void;
  once(
    event: "NewFinishedRace",
    options: EventOptions,
    cb: Callback<NewFinishedRace>
  ): void;

  once(event: "NewRace", cb: Callback<NewRace>): void;
  once(event: "NewRace", options: EventOptions, cb: Callback<NewRace>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PlayerEnqueue", cb: Callback<PlayerEnqueue>): void;
  once(
    event: "PlayerEnqueue",
    options: EventOptions,
    cb: Callback<PlayerEnqueue>
  ): void;

  once(event: "QueuesCreation", cb: Callback<QueuesCreation>): void;
  once(
    event: "QueuesCreation",
    options: EventOptions,
    cb: Callback<QueuesCreation>
  ): void;

  once(event: "UploadRace", cb: Callback<UploadRace>): void;
  once(
    event: "UploadRace",
    options: EventOptions,
    cb: Callback<UploadRace>
  ): void;
}
